//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Benchmarker - Overgrowth LE [BETA]
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_buildOrderStepLimit = 50;
const string gv_unitStepType = "unit";
const string gv_upgradeStepType = "upgrade";
const string gv_abilityStepType = "ability";

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_UpgradeGapAlert {
    string lv_delayedUpgrade;
    timer lv_alertTimer;
    timer lv_cooldownTimer;
};

struct gs_ProductionIdleAlert {
    string lv_unitType;
    timer lv_alertTimer;
    timer lv_cooldownTimer;
};

struct gs_SupplyBenchmark {
    int lv_benchmarkSupply;
    int lv_benchmarkTimeMin;
    int lv_benchmarkTimeSeconds;
    int lv_actualSupplyatBenchmarkTime;
};

struct gs_BuildOrderStep {
    string lv_stepType;
    string lv_unitType;
    string lv_upgrade;
    string lv_ability;
    int lv_amount;
    int lv_supply;
    int lv_elapsedSeconds;
    unitgroup lv_completingUnits;
    string lv_completingUpgrade;
    abilcmd lv_completingAbility;
    timer lv_multipleUnitFailureTimer;
    int lv_finishedBenchmarkStepReference;
};

struct gs_Resource {
    unit lv_unit;
    string lv_type;
    point lv_position;
    bool lv_isMinedOut;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_muteAlertsEnabled;
fixed gv_warningPingCooldownSeconds;
int gv_alertCooldownSeconds;
timer[61] gv_activeAlertTimers;
int gv_numStoredActiveAlertTimers;
bool gv_aPMBelowThresholdEnabled;
int gv_aPMThreshold;
int gv_aPMThresholdDuration;
int gv_aPMBelowThresholdAlertCounter;
int gv_aPMBelowThresholdAlertCheckbox;
timer gv_aPMBelowThresholdCooldownTimer;
bool gv_alertMineralsEnabled;
int gv_alertMineralsThreshold;
timer gv_alertMineralsCooldownTimer;
bool gv_alertGasEnabled;
int gv_alertGasThreshold;
timer gv_alertGasCooldownTimer;
bool gv_alertSupplyBlockEnabled;
int gv_alertSupplyBlockStart;
int gv_alertSupplyBlockWithinCapThreshold;
timer gv_alertSupplyBlockCooldownTimer;
bool gv_alertMacroEnergyEnabled;
int gv_alertSelectedMacroEnergyThreshold;
int gv_alertZergDefaultMacroEnergyThreshold;
int gv_alertTerranDefaultMacroEnergyThreshold;
int gv_alertProtossDefaultMacroEnergyThreshold;
timer gv_alertMacroEnergyCooldownTimer;
bool gv_alertUpgradeGapEnabled;
int gv_alertUpgradeGapThreshold;
gs_UpgradeGapAlert[31] gv_upgradeGapAlerts;
int gv_alertUpgradeGapNumUpgrades;
bool gv_productionIdleAlertEnabled;
int gv_productionIdleAlertSecondsThreshold;
gs_ProductionIdleAlert[31] gv_productionIdleAlerts;
int gv_productionIdleNumProductionUnitTypes;
bank gv_benchmarkerBank;
string gv_configurationOptionsSectionKey;
string gv_alertConfigurationSectionKey;
string gv_alertMineralsCheckEnabledEntryKey;
string gv_alertMineralsThresholdKey;
string gv_alertGasCheckEnabledEntryKey;
string gv_alertGasThresholdKey;
string gv_alertSupplyBlockCheckEnabledEntryKey;
string gv_alertSupplyBlockStartKey;
string gv_alertSupplyBlockWithinCapKey;
string gv_alertMacroEnergyCheckEnabledEntryKey;
string gv_alertMacroEnergyThresholdKey;
string gv_alertUpgradeGapCheckEnabledEntryKey;
string gv_alertUpgradeGapThresholdKey;
string gv_alertProductionIdleCheckEnabledEntryKey;
string gv_alertProductionIdleThresholdKey;
string gv_alertAPMBelowThresholdCheckEnabledEntryKey;
string gv_alertAPMThresholdKey;
string gv_alertAPMThresholdDurationKey;
string gv_benchmarkMaxSupplyatTimeMinutesKey;
string gv_benchmarkMaxSupplyatTimeSecondsKey;
string[4] gv_benchmarkSupplyEntryKeys;
string gv_benchmarkEndBuildSelectionKey;
string gv_benchmarkEndBuildMinutesKey;
string gv_benchmarkEndBuildSecondsKey;
string gv_benchmarkFinalSupplyatGameTimeKey;
string gv_practiceAgainstBenchmarkBuildOrderKey;
string gv_displayBuildHintsKey;
string gv_displayPerformanceFeedbackKey;
string gv_bestSpendingQuotientEntryKey;
string gv_bestTotalWorkersCreatedEntryKey;
string gv_bestTotalArmySupplyEntryKey;
string gv_bestTotalArmyValueMineralsEntryKey;
string gv_bestTotalArmyValueGasEntryKey;
string gv_bestNumUpgradesResearchedEntryKey;
string gv_bestTotalMineralsCollectedEntryKey;
string gv_bestTotalGasCollectedEntryKey;
string gv_bestTimeSupplyBlockedEntryKey;
string gv_bestIdleProductionTimeEntryKey;
string gv_bestAverageUnspentMineralsEntryKey;
string gv_bestAverageUnspentGasEntryKey;
string gv_bestAverageAPMEntryKey;
string gv_postBuildReportMuteButtonKey;
string gv_benchmarkBuildStepEntryKeyPrefix;
string gv_numBenchmarkBuildOrderStepsEntryKey;
string gv_stepTypeBuildOrderStepEntryKey;
string gv_unitTypeBuildOrderStepEntryKey;
string gv_upgradeBuildOrderStepEntryKey;
string gv_abilityBuildOrderStepEntryKey;
string gv_supplyBuildOrderStepEntryKey;
string gv_amountBuildOrderStepEntryKey;
string gv_elapsedSecondsBuildOrderStepEntryKey;
string gv_benchmarkBuildOrderTimeKey;
string gv_benchmarkBuildOrderSupplyBenchmarksMetKey;
string[4] gv_currentMatchupSectionKeys;
string gv_zvTMatchupSectionKey;
string gv_zvZMatchupSectionKey;
string gv_zvPMatchupSectionKey;
string gv_tvTMatchupSectionKey;
string gv_tvZMatchupSectionKey;
string gv_tvPMatchupSectionKey;
string gv_pvTMatchupSectionKey;
string gv_pvZMatchupSectionKey;
string gv_pvPMatchupSectionKey;
int[4] gv_benchmarkTimesInSeconds;
int gv_numBenchmarkBuildOrderStepsTracked;
bool gv_trackSupplyUnitsAsSteps;
int gv_trackSupplyUnitAsStepSupplyLimit;
int gv_buildOrderMaxGasSupply;
timer gv_multipleUnitFailureTimer;
int gv_trackQueensAsStepSupplyLimit;
bool gv_trackInitialArmyUnitsAsSteps;
int gv_trackInitialArmyUnitsStepLimit;
bool gv_trackInitialDetectorsAsSteps;
int gv_trackInitialDetectorsStepLimit;
gs_SupplyBenchmark[5] gv_supplyBenchmarks;
int[4] gv_benchmarkSupplyObjectives;
int gv_benchmarkFinalBenchmarkObjective;
timer gv_benchmark1Timer;
timer gv_benchmark2Timer;
timer gv_benchmark3Timer;
int[4] gv_benchmarkSupplyDefaults;
timer gv_finalBenchmarkTimer;
int gv_benchmarkMaxSupplyMinutes;
int gv_benchmarkMaxSupplySeconds;
int gv_benchmarkMaxSupplyTotalSeconds;
int gv_benchmarkEndBuildatGameTimeMinutes;
int gv_benchmarkEndBuildatGameTimeSeconds;
int gv_benchmarkEndBuildatGameTimeTotalSeconds;
int gv_benchmarkFinalSupplyatGameTimeValue;
int gv_numBenchmarksMetThisBuild;
bool gv_buildOrderStepLock;
bool gv_practiceAgainstBenchmarkBuildOrder;
gs_BuildOrderStep[gv_buildOrderStepLimit + 1] gv_currentBuildOrderSteps;
int gv_currentBuildOrderStepCursor;
int gv_maxCurrentBuildOrderStepsTracked;
int gv_multipleUnitFailureThreshold;
gs_BuildOrderStep[gv_buildOrderStepLimit + 1] gv_benchmarkBuildOrderSteps;
int gv_benchmarkBuildOrderStepCursor;
int[11] gv_benchmarkBuildOrderStepObjectives;
int gv_benchmarkBuildOrderTimeSeconds;
int gv_benchmarkBuildOrderSupplyBenchmarksMet;
timer[11] gv_activeMultiUnitFailureTimers;
int gv_numStoredActiveMultiUnitFailureTimers;
int gv_totalNumBenchmarkBuildOrderSteps;
int gv_numCompletedBenchmarkBuildOrderSteps;
int gv_numFailedBenchmarkBuildOrderSteps;
bool gv_displayBuildHints;
fixed gv_buildHintTimeThreshold;
timer gv_displayBuildHintCooldownTimer;
int gv_buildHintCursor;
int gv_buildOrderToleranceWindowNumSteps;
int gv_buildOrderToleranceWindowTime;
text gv_performanceFeedbackMarvelousText;
text gv_performanceFeedbackPerfectText;
text gv_performanceFeedbackGreatText;
text gv_performanceFeedbackGoodText;
text gv_performanceFeedbackAlmostText;
text gv_performanceFeedbackBooText;
text gv_performanceFeedbackMissText;
bool gv_displayPerformanceFeedback;
int gv_performanceFeedbackDuration;
int gv_maxDisplayedBuildOrderObjectives1;
int gv_benchmarkBuildOrderObjectiveCycleThreshold;
int gv_buildOrderCycleOffset;
color gv_benchmarkSupplyObjectiveTextColor;
int gv_greenBenchmarkSupplyThreshold;
int gv_greenBenchmarkSecondsThreshold;
int gv_yellowBenchmarkSupplyThreshold;
int gv_yellowBenchmarkSecondsThreshold;
int gv_orangeBenchmarkSupplyThreshold;
int gv_orangeBenchmarkSecondsThreshold;
int gv_totalAPMSamplesThisBuild;
int gv_cumulativeAPM;
fixed gv_cumulativeTotalMineralCollectionRate;
fixed gv_cumulativeTotalGasCollectionRate;
int gv_numResourceCollectionRateSamples;
int gv_totalMineralsCollected;
int gv_totalGasCollected;
int gv_cumulativeTotalUnspentMinerals;
int gv_cumulativeTotalUnspentGas;
int gv_numUnspentResourceSamples;
int gv_workersCreated;
int gv_timeProductionIdleThisBuild;
int gv_timeSupplyBlockedThisBuild;
int gv_totalNumberofUpgradesResearchedCurrentBuild;
bool gv_debugMenusEnabled;
bool gv_debugBuildOrderEnabled;
bool gv_debugMapMechanicsEnabled;
bool gv_debugAlertsEnabled;
bool gv_debugBankEnabled;
bool gv_debugStatsEnabled;
int[21] gv_debugTimerWindows;
int gv_numDebugTimerWindows;
int gv_menuPadding;
int gv_menuItemRowIndent;
int gv_menuItemHeight;
int gv_checkboxWidth;
int gv_checkboxHeight;
int gv__1DigitEditBoxWidth;
int gv__2DigitEditBoxWidth;
int gv__3DigitEditBoxWidth;
int gv__4DigitEditBoxWidth;
int gv_benchmarkEditBoxHeight;
int gv_alertThresholdEditBoxHeight;
int gv_buildOrderListBoxWidth;
int gv_buildOrderListBoxHeight;
int gv_menuSelectButtonWidth;
int gv_menuSelectButtonHeight;
int[3] gv_benchmarksMenuButton;
int[3] gv_alertMenuButton;
int gv_sectionLabelWidth;
int gv_sectionLabelHeight;
int gv_labelAlignmentSpacer;
int[3] gv_startButton;
int gv_startButtonWidth;
int gv_startButtonHeight;
int gv_alertMenuDialog;
int[11][11] gv_alertMenuDialogItemGrid;
int[9][3] gv_alertRowLabelWidths;
int gv_alertMenuSupplyBlockBaseWidth;
int gv_alertMenuQueenNameWidth;
int gv_alertMenuOrbitalNameWidth;
int gv_alertMenuNexusNameWidth;
int gv_mineralAboveThresholdAlertCheckbox;
int gv_gasAboveThresholdAlertCheckbox;
int gv_supplyBlockImminentAlertCheckbox;
int gv_macroEnergyAboveThresholdAlertCheckbox;
int gv_upgradeGapAboveThresholdAlertCheckbox;
int gv_productionIdleAboveThresholdAlertCheckbox;
bool gv_isBenchmarkAlertDialogOpen;
int gv_benchmarkDialogHeight;
int gv_benchmarkDialogWidth;
text gv_benchmarkDialogTitle;
int gv_benchmarkDialog;
int gv_benchmarkDialogTitleSpacer;
int gv_benchmarkMenuSectionLabelNudge;
int gv_minutesLabelWidth;
int gv_secondsLabelWidth;
int gv_currentlySelectedMatchupIndex;
int gv_currentlySelectedMatchupButton;
string gv_currentlySelectedMatchupBankKey;
int[4] gv_matchupSelectionButtons;
int gv_matchupSelectionLabelHeight;
int gv_matchupButtonWidth;
int gv_matchupButtonHeight;
int gv_matchupButtonSpacing;
int[4] gv_benchmarkSupplyEditBoxes;
int gv_benchmarkSupplyValueLabelWidth;
int gv_benchmarkSupplyValueLabelHeight;
int gv_benchmarkSupplyValueSpacing;
int gv_endBuildLabelWidth;
int gv_endBuildPulldown;
int gv_endBuildPulldownSelection;
int gv_endBuildPulldownWidth;
int gv_endBuildMinutesEditBox;
int gv_endBuildMinutesLabel;
int gv_endBuildSecondsEditBox;
int gv_endBuildSecondsLabel;
int gv_maxTimeEndBuildLabel;
int gv_maxTimeLabelWidth;
int gv_maxTimeMinutesEditBox;
int gv_maxTimeMinutesLabel;
int gv_maxTimeSecondsEditBox;
int gv_maxTimeSecondsLabel;
int gv_finalSupplyAtGameTimeLabel;
int gv_finalSupplyAtGameTimeLabelWidth;
int gv_finalSupplyAtGameTimeEditBox;
int gv_finalSupplyAtGameTimeTimeTextLabel;
int gv_practiceAgainstSavedBuildOrderLabelWidth;
int gv_practiceAgainstSavedBuildOrderCheckbox;
int gv_practiceAgainstSavedBuildOrderLabel;
int gv_practiceAgainstSavedBuildOrderClearButton;
int gv_practiceAgainstSavedBuildOrderClearButtonWidth;
int gv_practiceAgainstSavedBuildOrderClearButtonHeight;
int gv_displayBuildOrderHintsLabelWidth;
int gv_displayBuildOrderHintsCheckbox;
int gv_displayBuildOrderHintsLabel;
int gv_displayBuildOrderPerformanceFeedbackCheckbox;
int gv_displayBuildOrderPerformanceFeedbackLabelWidth;
int gv_displayBuildOrderPerformanceFeedbackLabel;
int gv_helpDialogTitleSpacer;
int gv_helpDialogItemHeight;
int gv_helpCommandLabelWidth;
int gv_helpHotkeyLabelWidth;
int gv_helpDescriptionLabelWidth;
text gv_helpDialogTitle;
int gv_helpDialog;
int gv_helpOkButton;
bool gv_isHelpDialogOpen;
int gv_postBuildReportButtonWidth;
int gv_postBuildReportButtonHeight;
int gv_postBuildReportDialogWidth;
int gv_postBuildReportDialog;
text gv_postBuildReportDialogTitle;
int gv_backToMenuButton;
int gv_postBuildReportDialogTitleSpacer;
int[4][11][5] gv_postBuildReportDialogItems;
int gv_postBuildReportOverviewIndex;
int gv_postBuildReportBenchmarksIndex;
int gv_postBuildReportStatsIndex;
int gv_postBuildReportMuteButton;
int gv_postBuildReportMuteButtonLabelWidth;
int gv_postBuildReportMuteButtonLabelHeight;
bool gv_muteVictoryFanfare;
int[3] gv_postBuildReportMatchupLabels;
int gv_postBuildReportMatchupLabelWidth;
int gv_postBuildReportMatchupLabelHeight;
int gv_postBuildReportMatchupLabelXOffset;
int gv_postBuildReportMatchupLabelYOffset;
int gv_postBuildReportBuildOverviewSectionHeight;
int gv_postBuildReportBuildOverviewTimeLabel;
int gv_postBuildReportBuildOverviewBenchmarkCompletionLabel;
int gv_postBuildReportBuildOverviewBuildStepNumLabel;
int gv_postBuildReportBuildOverviewLabelNameWidth;
int gv_postBuildReportBuildOverviewLabelValueWidth;
int gv_postBuildReportBuildOverviewLabelHeight;
int gv_postBuildReportBenchmarkHeadingWidth;
int gv_postBuildReportBenchmarksSupplyHeadingWidth;
int gv_postBuildReportBenchmarkAnalysisRowLabelWidth;
int gv_postBuildReportBenchmarkAnalysisRowHeight;
int gv_postBuildReportBenchmarkUpdateButton;
int gv_postBuildReportStatLabelHeight;
int gv_postBuildReportStatLabelWidth;
int gv_postBuildReportStatValueWidth;
int gv_postBuildReportStatBestWidth;
int gv_postBuildReportStatPercentDifferenceWidth;
int gv_postBuildReportBuildOrderListBox;
int gv_postBuildReportBuildOrderListBoxHeight;
int gv_postBuildReportBuildOrderListBoxWidth;
int gv_postBuildReportSaveBuildButton;
int gv_postBuildReportClearBuildButton;
bool gv_isStatsDialogOpen;
int gv_statsDialogMaxItems;
int gv_statsDialogWidth;
int gv_statsDialogHeight;
int[11][3] gv_statValueDialogItems;
int gv_statValueWidth;
int gv_statLabelWidth;
int gv_statRowHeight;
text gv_statsDialogTitle;
int gv_statsDialogTitleSpacer;
int gv_statsDialog;
int gv_statsOkButton;
int gv_statsDialogBuildOrderListBox;
color gv_zergColorLight;
color gv_terramColorLight;
color gv_protossColorLight;
bool gv_paused;
gs_Resource[257] gv_mapResources;
int gv_numMapResources;
bool gv_isFirstBuild;
bool gv_currentBuildIsGasTaken;
bool gv_currentBuildWasForked;
timer gv_currentBuildBuildTimer;
int gv_onehourinseconds;
fixed gv_e;
unitgroup gv_workers;
int gv_numMorphingOverlords;
unitgroup gv_morphingOverlords;
timer gv_overlordInProgressTimer;
int gv_overlordMorphDuration;
fixed gv_zergHatcheryCreepRadius;
int gv_neverexpires;
bool gv_haveZergAssetsBeenLoaded;
bool gv_haveTerranAssetsBeenLoaded;
bool gv_haveProtossAssetsBeenLoaded;
int gv_winButtonHeight;
int gv_winButtonWidth;
int gv_winButtonXPadding;
int gv_winButtonZergYPadding;
int gv_winButtonProtossYPadding;
int gv_winButtonTerranYPadding;
int gv_screenButtonWidth;
int gv_screenButtonHeight;
int gv_screenButtonXPadding;
int gv_screenButtonYPadding;
int gv_forkScreenButtonID;

void InitGlobals () {
    int init_i;
    int init_j;
    int init_k;

    for (init_i = 0; init_i <= 60; init_i += 1) {
        gv_activeAlertTimers[init_i] = TimerCreate();
    }
    gv_aPMBelowThresholdAlertCheckbox = c_invalidDialogControlId;
    gv_aPMBelowThresholdCooldownTimer = TimerCreate();
    gv_alertMineralsEnabled = true;
    gv_alertMineralsCooldownTimer = TimerCreate();
    gv_alertGasEnabled = true;
    gv_alertGasCooldownTimer = TimerCreate();
    gv_alertSupplyBlockEnabled = true;
    gv_alertSupplyBlockCooldownTimer = TimerCreate();
    gv_alertMacroEnergyEnabled = true;
    gv_alertMacroEnergyCooldownTimer = TimerCreate();
    gv_alertUpgradeGapEnabled = true;
    for (init_i = 0; init_i <= 30; init_i += 1) {
        gv_upgradeGapAlerts[init_i].lv_alertTimer = TimerCreate();
        gv_upgradeGapAlerts[init_i].lv_cooldownTimer = TimerCreate();
    }
    gv_productionIdleAlertEnabled = true;
    for (init_i = 0; init_i <= 30; init_i += 1) {
        gv_productionIdleAlerts[init_i].lv_alertTimer = TimerCreate();
        gv_productionIdleAlerts[init_i].lv_cooldownTimer = TimerCreate();
    }
    gv_configurationOptionsSectionKey = "options";
    gv_alertConfigurationSectionKey = "";
    gv_alertMineralsCheckEnabledEntryKey = "alertMineralsEnabled";
    gv_alertMineralsThresholdKey = "alertMineralsThreshold";
    gv_alertGasCheckEnabledEntryKey = "alertGasEnabled";
    gv_alertGasThresholdKey = "alertGasThreshold";
    gv_alertSupplyBlockCheckEnabledEntryKey = "alertSupplyBlockEnabled";
    gv_alertSupplyBlockStartKey = "alertSupplyBlockStart";
    gv_alertSupplyBlockWithinCapKey = "alertSupplyBlockWithinCap";
    gv_alertMacroEnergyCheckEnabledEntryKey = "alertMacroEnergyEnabled";
    gv_alertMacroEnergyThresholdKey = "alertMacroEnergyThreshold";
    gv_alertUpgradeGapCheckEnabledEntryKey = "alertUpgradeGapEnabled";
    gv_alertUpgradeGapThresholdKey = "alertUpgradeGapThreshold";
    gv_alertProductionIdleCheckEnabledEntryKey = "alertProductionIdleEnabled";
    gv_alertProductionIdleThresholdKey = "alertProductionIdleThreshold";
    gv_alertAPMBelowThresholdCheckEnabledEntryKey = "alertAPMBelowThresholdEnabled";
    gv_alertAPMThresholdKey = "alertAPMThreshold";
    gv_alertAPMThresholdDurationKey = "alertAPMThresholdDuration";
    gv_benchmarkMaxSupplyatTimeMinutesKey = "maxTimeMin";
    gv_benchmarkMaxSupplyatTimeSecondsKey = "maxTimeSec";
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_benchmarkSupplyEntryKeys[init_i] = "";
    }
    gv_benchmarkEndBuildSelectionKey = "endBuildSelection";
    gv_benchmarkEndBuildMinutesKey = "endBuildMin";
    gv_benchmarkEndBuildSecondsKey = "endBuildSec";
    gv_benchmarkFinalSupplyatGameTimeKey = "finalSupply";
    gv_practiceAgainstBenchmarkBuildOrderKey = "practiceAgainstBenchmarkBuildOrder";
    gv_displayBuildHintsKey = "displayBuildHints";
    gv_displayPerformanceFeedbackKey = "displayPerformanceFeedback";
    gv_bestSpendingQuotientEntryKey = "bestSpendingQuotient";
    gv_bestTotalWorkersCreatedEntryKey = "bestTotalWorkersCreated";
    gv_bestTotalArmySupplyEntryKey = "bestTotalArmySupply";
    gv_bestTotalArmyValueMineralsEntryKey = "bestTotalArmyValueMinerals";
    gv_bestTotalArmyValueGasEntryKey = "bestTotalArmyValueGas";
    gv_bestNumUpgradesResearchedEntryKey = "bestNumUpgradesResearched";
    gv_bestTotalMineralsCollectedEntryKey = "bestTotalMineralsCollected";
    gv_bestTotalGasCollectedEntryKey = "bestTotalGasCollected";
    gv_bestTimeSupplyBlockedEntryKey = "bestTimeSupplyBlocked";
    gv_bestIdleProductionTimeEntryKey = "bestProductionTimeIdle";
    gv_bestAverageUnspentMineralsEntryKey = "bestAverageUnspentMinerals";
    gv_bestAverageUnspentGasEntryKey = "bestAverageUnspentGas";
    gv_bestAverageAPMEntryKey = "bestAverageAPM";
    gv_postBuildReportMuteButtonKey = "muteVictoryFanfare";
    gv_benchmarkBuildStepEntryKeyPrefix = "benchmarkBuildStep";
    gv_numBenchmarkBuildOrderStepsEntryKey = "numBenchmarkBuildOrderSteps";
    gv_stepTypeBuildOrderStepEntryKey = "stepType";
    gv_unitTypeBuildOrderStepEntryKey = "unitType";
    gv_upgradeBuildOrderStepEntryKey = "upgrade";
    gv_abilityBuildOrderStepEntryKey = "ability";
    gv_supplyBuildOrderStepEntryKey = "supply";
    gv_amountBuildOrderStepEntryKey = "amount";
    gv_elapsedSecondsBuildOrderStepEntryKey = "elapsedSeconds";
    gv_benchmarkBuildOrderTimeKey = "benchmarkBuildTime";
    gv_benchmarkBuildOrderSupplyBenchmarksMetKey = "benchmarkBuildSupplyBenchmarksMet";
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_currentMatchupSectionKeys[init_i] = "";
    }
    gv_zvTMatchupSectionKey = "ZvT";
    gv_zvZMatchupSectionKey = "ZvZ";
    gv_zvPMatchupSectionKey = "ZvP";
    gv_tvTMatchupSectionKey = "TvT";
    gv_tvZMatchupSectionKey = "TvZ";
    gv_tvPMatchupSectionKey = "TvP";
    gv_pvTMatchupSectionKey = "PvT";
    gv_pvZMatchupSectionKey = "PvZ";
    gv_pvPMatchupSectionKey = "PvP";
    gv_multipleUnitFailureTimer = TimerCreate();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_benchmarkSupplyObjectives[init_i] = c_invalidObjectiveId;
    }
    gv_benchmarkFinalBenchmarkObjective = c_invalidObjectiveId;
    gv_benchmark1Timer = TimerCreate();
    gv_benchmark2Timer = TimerCreate();
    gv_benchmark3Timer = TimerCreate();
    gv_finalBenchmarkTimer = TimerCreate();
    for (init_i = 0; init_i <= gv_buildOrderStepLimit; init_i += 1) {
        gv_currentBuildOrderSteps[init_i].lv_stepType = "";
        gv_currentBuildOrderSteps[init_i].lv_completingUnits = UnitGroupEmpty();
        gv_currentBuildOrderSteps[init_i].lv_multipleUnitFailureTimer = TimerCreate();
        gv_currentBuildOrderSteps[init_i].lv_finishedBenchmarkStepReference = -1;
    }
    gv_maxCurrentBuildOrderStepsTracked = 50;
    for (init_i = 0; init_i <= gv_buildOrderStepLimit; init_i += 1) {
        gv_benchmarkBuildOrderSteps[init_i].lv_stepType = "";
        gv_benchmarkBuildOrderSteps[init_i].lv_completingUnits = UnitGroupEmpty();
        gv_benchmarkBuildOrderSteps[init_i].lv_multipleUnitFailureTimer = TimerCreate();
        gv_benchmarkBuildOrderSteps[init_i].lv_finishedBenchmarkStepReference = -1;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_benchmarkBuildOrderStepObjectives[init_i] = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_activeMultiUnitFailureTimers[init_i] = TimerCreate();
    }
    gv_displayBuildHintCooldownTimer = TimerCreate();
    gv_performanceFeedbackMarvelousText = StringExternal("Param/Value/13587AA1");
    gv_performanceFeedbackPerfectText = StringExternal("Param/Value/BB5CA700");
    gv_performanceFeedbackGreatText = StringExternal("Param/Value/990C8248");
    gv_performanceFeedbackGoodText = StringExternal("Param/Value/58B82B47");
    gv_performanceFeedbackAlmostText = StringExternal("Param/Value/4E53ED16");
    gv_performanceFeedbackBooText = StringExternal("Param/Value/886B76A3");
    gv_performanceFeedbackMissText = StringExternal("Param/Value/9EA4B5C3");
    gv_benchmarkSupplyObjectiveTextColor = Color(100.00, 53.33, 6.67);
    gv_greenBenchmarkSupplyThreshold = 2;
    gv_greenBenchmarkSecondsThreshold = 5;
    gv_yellowBenchmarkSupplyThreshold = 4;
    gv_yellowBenchmarkSecondsThreshold = 10;
    gv_orangeBenchmarkSupplyThreshold = 6;
    gv_orangeBenchmarkSecondsThreshold = 15;
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_debugTimerWindows[init_i] = c_timerWindowNone;
    }
    gv_menuPadding = 60;
    gv_menuItemRowIndent = 15;
    gv_menuItemHeight = 50;
    gv_checkboxWidth = 50;
    gv_checkboxHeight = 50;
    gv__1DigitEditBoxWidth = 45;
    gv__2DigitEditBoxWidth = 60;
    gv__3DigitEditBoxWidth = 75;
    gv__4DigitEditBoxWidth = 90;
    gv_benchmarkEditBoxHeight = 50;
    gv_alertThresholdEditBoxHeight = 50;
    gv_buildOrderListBoxWidth = 325;
    gv_buildOrderListBoxHeight = 450;
    gv_menuSelectButtonWidth = 200;
    gv_menuSelectButtonHeight = 40;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_benchmarksMenuButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_alertMenuButton[init_i] = c_invalidDialogControlId;
    }
    gv_sectionLabelWidth = 300;
    gv_sectionLabelHeight = 35;
    gv_labelAlignmentSpacer = 15;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_startButton[init_i] = c_invalidDialogControlId;
    }
    gv_startButtonWidth = 200;
    gv_startButtonHeight = 60;
    gv_alertMenuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 10; init_j += 1) {
            gv_alertMenuDialogItemGrid[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_alertMenuSupplyBlockBaseWidth = 306;
    gv_alertMenuQueenNameWidth = 100;
    gv_alertMenuOrbitalNameWidth = 237;
    gv_alertMenuNexusNameWidth = 98;
    gv_mineralAboveThresholdAlertCheckbox = c_invalidDialogControlId;
    gv_gasAboveThresholdAlertCheckbox = c_invalidDialogControlId;
    gv_supplyBlockImminentAlertCheckbox = c_invalidDialogControlId;
    gv_macroEnergyAboveThresholdAlertCheckbox = c_invalidDialogControlId;
    gv_upgradeGapAboveThresholdAlertCheckbox = c_invalidDialogControlId;
    gv_productionIdleAboveThresholdAlertCheckbox = c_invalidDialogControlId;
    gv_benchmarkDialogHeight = 800;
    gv_benchmarkDialogWidth = 1000;
    gv_benchmarkDialogTitle = StringExternal("Param/Value/DC1E9F7A");
    gv_benchmarkDialog = c_invalidDialogId;
    gv_benchmarkDialogTitleSpacer = 15;
    gv_benchmarkMenuSectionLabelNudge = 8;
    gv_minutesLabelWidth = 154;
    gv_secondsLabelWidth = 150;
    gv_currentlySelectedMatchupButton = gv_matchupSelectionButtons[0];
    gv_currentlySelectedMatchupBankKey = "";
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_matchupSelectionButtons[init_i] = c_invalidDialogControlId;
    }
    gv_matchupSelectionLabelHeight = 35;
    gv_matchupButtonWidth = 200;
    gv_matchupButtonHeight = 75;
    gv_matchupButtonSpacing = 10;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_benchmarkSupplyEditBoxes[init_i] = c_invalidDialogControlId;
    }
    gv_benchmarkSupplyValueLabelWidth = 350;
    gv_benchmarkSupplyValueLabelHeight = 50;
    gv_benchmarkSupplyValueSpacing = 10;
    gv_endBuildLabelWidth = 144;
    gv_endBuildPulldown = c_invalidDialogControlId;
    gv_endBuildPulldownSelection = 1;
    gv_endBuildPulldownWidth = 190;
    gv_endBuildMinutesEditBox = c_invalidDialogControlId;
    gv_endBuildMinutesLabel = c_invalidDialogControlId;
    gv_endBuildSecondsEditBox = c_invalidDialogControlId;
    gv_endBuildSecondsLabel = c_invalidDialogControlId;
    gv_maxTimeEndBuildLabel = c_invalidDialogControlId;
    gv_maxTimeLabelWidth = 170;
    gv_maxTimeMinutesEditBox = c_invalidDialogControlId;
    gv_maxTimeMinutesLabel = c_invalidDialogControlId;
    gv_maxTimeSecondsEditBox = c_invalidDialogControlId;
    gv_maxTimeSecondsLabel = c_invalidDialogControlId;
    gv_finalSupplyAtGameTimeLabel = c_invalidDialogControlId;
    gv_finalSupplyAtGameTimeLabelWidth = 170;
    gv_finalSupplyAtGameTimeEditBox = c_invalidDialogControlId;
    gv_finalSupplyAtGameTimeTimeTextLabel = c_invalidDialogControlId;
    gv_practiceAgainstSavedBuildOrderLabelWidth = 435;
    gv_practiceAgainstSavedBuildOrderCheckbox = c_invalidDialogControlId;
    gv_practiceAgainstSavedBuildOrderLabel = c_invalidDialogControlId;
    gv_practiceAgainstSavedBuildOrderClearButton = c_invalidDialogControlId;
    gv_practiceAgainstSavedBuildOrderClearButtonWidth = 100;
    gv_practiceAgainstSavedBuildOrderClearButtonHeight = 40;
    gv_displayBuildOrderHintsLabelWidth = 300;
    gv_displayBuildOrderHintsCheckbox = c_invalidDialogControlId;
    gv_displayBuildOrderHintsLabel = c_invalidDialogControlId;
    gv_displayBuildOrderPerformanceFeedbackCheckbox = c_invalidDialogControlId;
    gv_displayBuildOrderPerformanceFeedbackLabelWidth = 450;
    gv_displayBuildOrderPerformanceFeedbackLabel = c_invalidDialogControlId;
    gv_helpDialogTitleSpacer = 35;
    gv_helpDialogItemHeight = 35;
    gv_helpCommandLabelWidth = 120;
    gv_helpHotkeyLabelWidth = 165;
    gv_helpDescriptionLabelWidth = 550;
    gv_helpDialogTitle = StringExternal("Param/Value/91DF6EE7");
    gv_helpDialog = c_invalidDialogId;
    gv_helpOkButton = c_invalidDialogControlId;
    gv_postBuildReportButtonWidth = 100;
    gv_postBuildReportButtonHeight = 40;
    gv_postBuildReportDialogWidth = 1200;
    gv_postBuildReportDialog = c_invalidDialogId;
    gv_postBuildReportDialogTitle = StringExternal("Param/Value/B121E629");
    gv_backToMenuButton = c_invalidDialogControlId;
    gv_postBuildReportDialogTitleSpacer = 40;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 10; init_j += 1) {
            for (init_k = 0; init_k <= 4; init_k += 1) {
                gv_postBuildReportDialogItems[init_i][init_j][init_k] = c_invalidDialogControlId;
            }
        }
    }
    gv_postBuildReportBenchmarksIndex = 1;
    gv_postBuildReportStatsIndex = 2;
    gv_postBuildReportMuteButton = c_invalidDialogControlId;
    gv_postBuildReportMuteButtonLabelWidth = 75;
    gv_postBuildReportMuteButtonLabelHeight = 35;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_postBuildReportMatchupLabels[init_i] = c_invalidDialogControlId;
    }
    gv_postBuildReportMatchupLabelWidth = 200;
    gv_postBuildReportMatchupLabelHeight = 60;
    gv_postBuildReportMatchupLabelXOffset = 70;
    gv_postBuildReportMatchupLabelYOffset = 35;
    gv_postBuildReportBuildOverviewSectionHeight = (4*60);
    gv_postBuildReportBuildOverviewTimeLabel = c_invalidDialogControlId;
    gv_postBuildReportBuildOverviewBenchmarkCompletionLabel = c_invalidDialogControlId;
    gv_postBuildReportBuildOverviewBuildStepNumLabel = c_invalidDialogControlId;
    gv_postBuildReportBuildOverviewLabelNameWidth = 275;
    gv_postBuildReportBuildOverviewLabelValueWidth = 235;
    gv_postBuildReportBuildOverviewLabelHeight = 45;
    gv_postBuildReportBenchmarkHeadingWidth = 260;
    gv_postBuildReportBenchmarksSupplyHeadingWidth = 200;
    gv_postBuildReportBenchmarkAnalysisRowLabelWidth = 250;
    gv_postBuildReportBenchmarkAnalysisRowHeight = 35;
    gv_postBuildReportBenchmarkUpdateButton = c_invalidDialogControlId;
    gv_postBuildReportStatLabelHeight = 35;
    gv_postBuildReportStatLabelWidth = 305;
    gv_postBuildReportStatValueWidth = 150;
    gv_postBuildReportStatBestWidth = 150;
    gv_postBuildReportStatPercentDifferenceWidth = 150;
    gv_postBuildReportBuildOrderListBox = c_invalidDialogControlId;
    gv_postBuildReportBuildOrderListBoxHeight = 360;
    gv_postBuildReportBuildOrderListBoxWidth = 325;
    gv_postBuildReportSaveBuildButton = c_invalidDialogControlId;
    gv_postBuildReportClearBuildButton = c_invalidDialogControlId;
    gv_statsDialogMaxItems = 10;
    gv_statsDialogWidth = 1000;
    gv_statsDialogHeight = 525;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_statValueDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_statValueWidth = 300;
    gv_statLabelWidth = 395;
    gv_statRowHeight = 40;
    gv_statsDialogTitle = StringExternal("Param/Value/F4075B4B");
    gv_statsDialogTitleSpacer = 35;
    gv_statsDialog = c_invalidDialogId;
    gv_statsOkButton = c_invalidDialogControlId;
    gv_statsDialogBuildOrderListBox = c_invalidDialogControlId;
    gv_zergColorLight = Color(96.86, 64.31, 62.35);
    gv_terramColorLight = Color(65.88, 62.35, 84.31);
    gv_protossColorLight = Color(72.55, 93.33, 74.90);
    gv_paused = true;
    gv_isFirstBuild = true;
    gv_currentBuildBuildTimer = TimerCreate();
    gv_onehourinseconds = 216000;
    gv_e = 2.7183;
    gv_workers = UnitGroupEmpty();
    gv_morphingOverlords = UnitGroupEmpty();
    gv_overlordInProgressTimer = TimerCreate();
    gv_zergHatcheryCreepRadius = 12.0;
    gv_neverexpires = 99999;
    gv_winButtonHeight = 80;
    gv_winButtonWidth = 150;
    gv_winButtonXPadding = 10;
    gv_winButtonZergYPadding = 383;
    gv_winButtonProtossYPadding = 370;
    gv_winButtonTerranYPadding = 341;
    gv_screenButtonWidth = 120;
    gv_screenButtonHeight = 50;
    gv_screenButtonXPadding = 10;
    gv_screenButtonYPadding = 125;
    gv_forkScreenButtonID = 6;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_AddUpgradeGapAlert (string lp_delayedUpgrade);
void gf_StopUpgradeGapAlert (string lp_upgrade);
void gf_FireUpgradeGapAlert (timer lp_timer);
void gf_RestartUpgradeGapAlertTimer (string lp_upgrade);
void gf_RestartUpgradeCooldownAlertTimer (string lp_upgrade);
void gf_AddProductionIdleAlert (string lp_unitType);
void gf_StopProductionIdleTimer (string lp_unitType);
void gf_FireProductionIdleAlert (timer lp_timer);
void gf_RestartProductionIdleAlertTimer (string lp_unitType);
void gf_RestartProductionIdleCooldownTimer (string lp_unitType);
void gf_SaveBenchmarkMenuConfiguration (string lp_sectionKey);
void gf_RefreshSupplyBenchmarksConfigurationValuesFromDialog ();
void gf_RefreshBuildCompletionConfigurationValuesFromDialog ();
void gf_SaveMatchupBenchmarksConfiguration (string lp_sectionKey);
void gf_SaveBuildCompletionConfiguration (string lp_sectionKey);
void gf_SaveBenchmarkBuildMenuConfiguration (string lp_sectionKey);
void gf_LoadBenchmarkMenuConfiguration (string lp_sectionKey);
void gf_LoadSupplyBenchmarkMenuConfiguration (string lp_sectionKey);
void gf_LoadBuildCompletionMenuConfiguraiton (string lp_sectionKey);
void gf_LoadBenchmarkBuildMenuConfiguration (string lp_sectionKey);
void gf_SaveAlertMenuConfiguration ();
void gf_LoadAlertMenuConfiguration ();
void gf_LoadAlertRowConfiguration (string lp_alertEnabledKey, string lp_alertThresholdKey, int lp_alertCheckbox, int lp_alertEditBox, int lp_defaultThresholdValue, int lp_rowNumber);
void gf_SaveCurrentBuildAsBenchmarkBuildOrderForCurrentMatchup ();
void gf_LoadBenchmarkBuildOrderforCurrentMatchup ();
void gf_ClearBenchmarkBuildOrderforCurrentMatchup ();
void gf_SaveBenchmarkBuildStep (int lp_stepNumber);
void gf_LoadBenchmarkBuildStep (int lp_stepNumber);
void gf_ClearBenchmarkBuildStep (int lp_stepNumber);
void gf_SaveCurrentBuildStatsAsBenchmarkBuildStats ();
void gf_ClearBenchmarkBuildStatsForCurrentMatchup ();
void gf_SaveIntForCurrentMatchup (int lp_value, string lp_entryKey);
void gf_LoadIntFromBankIfKeyisSetElseDefault (int lp_dialogItem, string lp_entryKey, string lp_sectionKey, int lp_defaultValue);
void gf_LoadBooleanFromBankIfKeyisSetElseDefault (int lp_dialogItem, string lp_entryKey, string lp_sectionKey, bool lp_defaultValue);
void gf_SaveRealAsBuildBenchmark (fixed lp_value, string lp_entryKey);
void gf_CompleteFinalBenchmarkObjective ();
void gf_FailFinalBenchmarkObjective ();
void gf_CreateHiddenBenchmarkSupplyObjectives ();
void gf_ShowBenchmarkSupplyObjectives ();
void gf_HideBenchmarkSupplyObjectives ();
void gf_StartBenchmarkTimers ();
void gf_CreateBenchmarkBuildOrderObjectives ();
void gf_CreateBenchmarkBuildOrderStepasSecondaryObjective (int lp_buildStep);
void gf_CompleteObjectiveForBenchmarkBuildOrderStep (int lp_currentStep, int lp_benchmarkStep);
void gf_FailObjectiveForBenchmarkBuildOrderStep (int lp_currentStep, int lp_benchmarkStep, bool lp_timerExpired);
void gf_ResetObjectiveForBenchmarkBuildOrderStep (int lp_benchmarkStep);
void gf_CycleBenchmarkBuildOrderObjectives (int lp_currentStep, int lp_benchmarkStep);
void gf_AdjustAllBenchmarkBuildOrderObjectivePositionsUpby1 ();
void gf_DestroyBenchmarkBuildOrderObjectives ();
void gf_HighlightBenchmarkBuildOrderObjective (int lp_step);
void gf_UnHighlightBenchmarkBuildOrderObjective (int lp_step);
void gf_InitializeBenchmarkBuildOrder ();
void gf_AddUnitBuildOrderStep (int lp_currentStep, unit lp_triggeringUnit, string lp_triggeringUnitType);
void gf_AddUpgradeBuildOrderStep (int lp_currentStep, string lp_buildStepUpgrade);
void gf_AddAbilityBuildOrderStep (int lp_currentStep, abilcmd lp_triggerringAbilityCommand);
void gf_RemoveUnitBuildOrderStep (int lp_step);
void gf_RemoveUpgradeBuildOrderStep (int lp_step);
void gf_RemoveAbilityBuildOrderStep (int lp_step);
void gf_EvaluateUnitTypeForBenchmarkBuildOrderStep (string lp_unitType, int lp_currentStep, int lp_benchmarkStep);
void gf_EvaluateUpgradeForBenchmarkBuildOrderStep (string lp_upgrade, int lp_currentStep, int lp_benchmarkStep);
void gf_EvaluateAbilityForBenchmarkBuildOrderStep (string lp_ability, int lp_currentStep, int lp_benchmarkStep);
void gf_CompleteBenchmarkStepObjectiveStepAndCycle (int lp_currentStep, int lp_benchmarkStep);
void gf_FailBenchmarkStepObjectiveAndCycle (int lp_currentStep, int lp_benchmarkStep, bool lp_timerExpired);
void gf_ResetObjectiveForBenchmarkBuildOrderStepAndUncycle (int lp_benchmarkStep);
void gf_DisplayPerformanceFeedbackForCorrectStep (int lp_currentIndex, int lp_benchmarkIndex);
void gf_DisplayPerformanceFeedbackForFailedStep (int lp_currentStep, bool lp_timerExpired);
void gf_UpdateBenchmarkBuildOrderStepCursor ();
void gf_CreateAlertMenuDialog ();
void gf_CreateAlertMenuCheckbox (int lp_rowNumber);
void gf_CreateAlertMenuLabel (text lp_labelText, int lp_rowNum);
void gf_CreateAlertMenuThresholdEditBox (int lp_editBoxWidth, int lp_rowNum);
void gf_SetAlertCheckboxState (bool lp_markChecked, int lp_checkbox);
void gf_EnableDisableAlertRow (bool lp_checked, int lp_rowNum, int lp_numRowItems);
void gf_InitializeBenchmarkDialog ();
void gf_ShowBenchmarkDialog ();
void gf_HideBenchmarkDialog ();
void gf_UpdateFinalSupplyatGameTime ();
void gf_OpenBenchmarkDialogMainMenu ();
void gf_BenchmarkDialogCreateDialogFrame ();
void gf_BenchmarkDialogCreateStartButton ();
void gf_BenchmarkDialogInitializeMatchupSelectionRow ();
void gf_CreateMatchupSelectionButton (text lp_buttonText, int lp_offsetPositionVariable);
void gf_UpdateCurrentlySelectedMatchup ();
void gf_BenchmarkDialogInitializeBenchmarkSupplySection ();
void gf_CreateSupplyValueEditBox (text lp_labelText, int lp_rowNumber, int lp_defaultValue);
void gf_BenchmarkDialogInitializeBuildCompletionOptionsSection ();
void gf_BenchmarkDialogCreateMaxSupplyatTimeRow ();
void gf_BenchmarkDialogCreateFinalSupplyatGameTimeRow ();
void gf_BenchmarkDialogToggleMaxSupplyatTimeRowVisible ();
void gf_BenchmarkDialogToggleFinalSupplyatGameTimeRowVisible ();
void gf_InitializeBenchmarkBuildOrderSection ();
void gf_CreatePracticeAgainstBuildOrderRow ();
void gf_CreateDisplayBuildOrderHintsRow ();
void gf_CreateDisplayPerformanceFeedbackRow ();
void gf_EnablePracticeAgainstBenchmarkBuildOrderOptions ();
void gf_DisablePracticeAgainstBenchmarkBuildOrderOptions ();
void gf_EvaluateAndDisableEnableBuildHintsOptions ();
void gf_SelectAlertMenu ();
void gf_SelectBenchmarkMenu ();
void gf_CreateMenuSelectButtons (int lp_menuIndex);
void gf_ResetBuildOrderListBox (int lp_listBox);
void gf_UpdateBuildOrderListBoxwithCurrentBuild (int lp_listBox);
void gf_CreateHelpDialog ();
void gf_CreateHelpDialogHeadingRow ();
void gf_CreateHelpInfoRow (text lp_commandText, text lp_hotkeyText, text lp_descriptionText, int lp_rowNum);
void gf_CloseHelpDialogandUnpause ();
void gf_InitializePostBuildReportDialog ();
void gf_CreatePostBuildReportDialog ();
void gf_CreatePostBuildReportBuildOverviewLabels ();
void gf_CreatePostBuildReportBuildOverviewAnalysisRow (text lp_rowLabelName, int lp_rowNum);
void gf_CreatePostBuildReportSupplyBenchmarkSection ();
void gf_CreatePostBuildReportSupplyBenchmarkAnalysisRow (int lp_rowNumber);
void gf_CreatePostBuildReportStatsSection ();
void gf_CreatePostBuildReportStatSectionHeaderLabels ();
void gf_CreatePostBuildReportStatAnalysisRow (int lp_rowOffset);
void gf_CreatePostBuildReportBuildOrderListBox ();
void gf_CreatePostBuildReportBuildOrderSaveClearButtons ();
void gf_CreatePostBuildReportMuteCheckbox ();
void gf_UpdatePostBuildMatchupText ();
void gf_UpdatePostBuildReportDialogValues (bool lp_updateBuildOrderListBox);
void gf_UpdatePostBuildReportOverviewSection ();
void gf_UpdatePostBuildReportBenchmarkSection ();
void gf_UpdatePostBuildReportBenchmarkAnalysisRow (int lp_rowNumber);
void gf_UpdatePostBuildReportStatsSection ();
void gf_UpdatePostBuildStatRowValueasInt (text lp_label, int lp_value, string lp_benchmarkEntryKey, int lp_rowNumber, bool lp_higherIsBetter, bool lp_differenceAsPercentage);
void gf_UpdatePostBuildStatRowValueasReal (text lp_label, fixed lp_value, string lp_benchmarkEntryKey, int lp_rowNumber, bool lp_higherIsBetter);
void gf_UpdatePostBuildStatRowValueasTime (text lp_label, int lp_value, string lp_benchmarkEntryKey, int lp_rowNumber, bool lp_higherIsBetter, bool lp_displayasPercentage);
void gf_CreateStatsDialog ();
void gf_CreateStatsDialogHeaderRowLabels ();
void gf_CreateStatsDialogRow (int lp_rowOffset);
void gf_CreateStatsBuildOrderListBox ();
void gf_RefreshStatsDialog ();
void gf_RefreshStatsDialogRow (int lp_rowOffset, text lp_labelText, text lp_statValueText);
void gf_CloseStatsDialogandUnpause ();
void gf_LogStringMessage (bool lp_alertTypeFlag, string lp_message);
void gf_LogTextMessage (bool lp_alertTypeFlag, text lp_message);
void gf_DisplayDebugTimerWindowsForExistingAlertTimers ();
void gf_DisplayDebugTimerWindowsForExistingMultipleUnitFailureTimers ();
void gf_AddDebugTimerWindow (timer lp_timer, text lp_windowName);
void gf_ClearDebugTimerWindows ();
void gf_InitializeBankDefaults ();
void gf_InitializeDialogDefaults ();
void gf_InitializeGameDefaults ();
void gf_InitializeGameState ();
void gf_InitializeMapResources ();
void gf_InitializeUnitsAndStartingResources ();
void gf_WaitForRaceAssetsToLoadIfNecessary ();
void gf_AddResourceToMapResources (unit lp_unit);
void gf_InitializeBank ();
void gf_InitializeBuildConfiguration ();
void gf_InitializeBenchmarkSupplyObjectives ();
void gf_CreateMatchupBankSections ();
void gf_ResetGameState ();
void gf_ResetUnits ();
void gf_ResetMapResources ();
void gf_ResetTechTree ();
void gf_ResetUnitAbilities ();
void gf_ResetMapVision ();
void gf_ResetWatchtowerVision ();
void gf_ResetCreep ();
void gf_ResetCamera ();
void gf_ResetGameVariables ();
void gf_ResetBenchmarkSupplyObjectives ();
void gf_ResetCurrentBuildOrderStepsVariables ();
void gf_ResetBenchmarkBuildOrderStepsVariables ();
void gf_ResetBenchmarkBuildOrderObjectives ();
void gf_ResetAlertTimers ();
void gf_ResetBenchmarkTimers ();
void gf_PauseGame ();
void gf_PauseAllTimers ();
void gf_PauseBenchmarkTimers ();
void gf_PauseActiveAlertTimers ();
void gf_PauseAndStoreAlertTimerIfActive (timer lp_timer);
void gf_PauseActiveMultiUnitFailureTimers ();
void gf_PauseAndStoreMultiUnitFailureTimerIfActive (timer lp_timer);
void gf_UnpauseGame ();
void gf_UnpauseAllTimers ();
void gf_UnpauseBenchmarkTimers ();
void gf_UnpauseActiveAlertTimers ();
void gf_UnpauseActiveMultiUnitFailureTimers ();
void gf_ClearStoredActiveAlertTimers ();
void gf_ClearStoredActiveMultiUnitFailureTimers ();
void gf_CreateScreenButtons ();
bool gf_IsOverlordCurrentlyInProgress ();
bool gf_IsSupplyDepotorPylonUnderConstruction ();
text gf_GetRaceMacroUnitName ();
int gf_GetDefaultMacroEnergyThreshold ();
bool gf_IsRaceMacroEnergyAboveThreshold ();
bool gf_IsTimerAnUpgradeGapTimer (timer lp_timer);
bool gf_DoesUpgradeGapAlertExistForUpgrade (string lp_upgrade);
string gf_GetNextUpgrade (string lp_currentUpgrade);
bool gf_ShouldUpgradeTypeTriggerStartAlertTimer (string lp_upgrade);
bool gf_CanUpgradeBeResearchedRightNow (string lp_upgrade);
bool gf_ShouldUpgradeTypeTriggerStopAlertTimer (string lp_upgrade);
int gf_GetUpgradeGapAlertIndexForUpgrade (string lp_upgrade);
int gf_GetUpgradeGapAlertIndexForTimer (timer lp_timer);
string gf_GetResearchStructureUnitTypeForAttackDefenseUpgrade (string lp_upgrade);
bool gf_IsTimeraProductionIdleTimer (timer lp_timer);
bool gf_DoesProductionIdleAlertExistForUnitType (string lp_unitType);
bool gf_IsUnitTypeaProductionIdleType (string lp_unitType);
bool gf_IsAnyProductionUnitTypeQueueIdle ();
bool gf_IsProductionIdleForUnitType (string lp_unitType, bool lp_squelchDebugSpam);
bool gf_IsUnitBusyResearchinganUpgrade (unit lp_unit);
bool gf_DoesZergHaveLarvaToSpendAndNoUnitsMorphing ();
int gf_GetProductionIdleAlertIndexForUnitType (string lp_unitType);
int gf_GetProductionIdleAlertIndexForTimer (timer lp_timer);
string gf_GetIconForBuildingType (string lp_unitType);
string gf_GetCurrentlySelectedMatchupasBankSectionKey ();
string gf_GetBenchmarkBuildOrderStepBankKey (int lp_stepNumber, string lp_stepEntryKeySuffix);
text gf_GetTypeTextForCurrentBuildOrderStep (int lp_stepNumber);
text gf_GetTypeTextForBenchmarkBuildOrderStep (int lp_stepNumber);
text gf_GetCurrentBuildOrderStepText (int lp_stepNumber);
text gf_GetBenchmarkBuildOrderStepText (int lp_stepNumber);
text gf_GetFormattedCompleteBenchmarkBuildOrderStepText (int lp_currentStep, int lp_benchmarkStep);
color gf_GetColorForBenchmarkBuildOrderStepCompletion (int lp_stepNumber);
text gf_GetSupplyforCurrentBuildOrderStepasText (int lp_currentStep);
int gf_GetSupplyforCurrentBuildOrderStep (int lp_currentStep);
text gf_GetBenchmarkandCurrentStepSecondsDiffasText (int lp_stepNumber);
bool gf_IsEndBuildatMaxSupplySelected ();
bool gf_IsEndBuildatGameTimeSelected ();
int gf_GetObjectiveIndexforBenchmarkBuildOrderStep (int lp_cursor);
int gf_GetNextIncompleteBenchmarkBuildOrderStep (int lp_benchmarkStep);
bool gf_IsUnitTypeValidForBenchmarkBuildOrderStep (string lp_unitType, int lp_benchmarkStep);
bool gf_IsUnitTypeAStructure (string lp_unitType);
bool gf_IsUnitTypeAnEligibleSupplyUnit (string lp_unitType, int lp_benchmarkStep);
bool gf_IsUnitTypeAnIneligibleGasCollectionUnit (string lp_unitType, int lp_benchmarkStep);
bool gf_IsUnitTypeAnExplicitlyIgnoredStructureType (string lp_unitType);
bool gf_IsUnitTypeCorrectForBenchmarkBuildOrderStep (string lp_unitType, int lp_benchmarkBuildOrderStepIndex);
bool gf_IsUpgradeTypeValidForBuildOrder (string lp_upgrade);
bool gf_IsUpgradeTypeCorrectForBenchmarkBuildOrderStep (string lp_upgrade, int lp_benchmarkBuildOrderStepIndex);
bool gf_IsUpgradeAnAttackDefenseUpgrade (string lp_upgrade);
bool gf_IsAbilityValidForBuildOrder (string lp_ability);
bool gf_IsAbilityTypeCorrectForBenchmarkBuildOrderStep (string lp_ability, int lp_benchmarkBuildOrderStepIndex);
bool gf_IsSupplyCorrectForBenchmarkBuildOrderStep (int lp_supplyCount, int lp_benchmarkBuildOrderStepIndex);
bool gf_IsAmountCorrectForBenchmarkBuildOrderStep (int lp_numUnits, int lp_benchmarkBuildOrderStepIndex);
bool gf_IsUnitTypeSameAsPreviousUnitType (int lp_previousUnitStepIndex, string lp_unitType);
int gf_GetStepIndexForPreviousUnitStep (int lp_previousStep);
int gf_GetStepIndexForPreviousUpgradeStep (int lp_previousStep);
int gf_GetStepIndexForPreviousAbilityStep (int lp_previousStep);
bool gf_DoesBuildHaveAnotherStepToDisplay (int lp_currentStep);
bool gf_IsStepIndexPastEndOfBenchmarkBuild (int lp_step);
bool gf_IsTimeraMultiUnitFailureTimer (timer lp_timer);
int gf_GetBenchmarkStepForMultiUnitFailureTimer (timer lp_timer);
fixed gf_GetAverageResourceCollectionRate ();
fixed gf_GetAverageUnspentResources ();
int gf_GetAverageUnspentMinerals ();
int gf_GetAverageUnspentGas ();
int gf_GetTimeSupplyBlocked ();
int gf_GetIdleProductionTime ();
int gf_GetAverageBuildAPM ();
int gf_GetTotalArmySupply ();
int gf_GetTotalArmyValueMinerals ();
int gf_GetTotalArmyValueGas ();
int gf_GetNumUpgradesResearched ();
int gf_GetTotalMineralsCollected ();
int gf_GetTotalGasCollected ();
fixed gf_CalculateSpendingQuotient ();
unitgroup gf_GetUnitGroupofAllPlayer1WithoutThisUnit ();
text gf_GetCurrentlySelectedMatchupasText ();
int gf_GetEditBoxValueasInt (int lp_editBox);
bool gf_DoesSavedBuildOrderExistForCurrentMatchup ();
string gf_GetCurrentlySelectedMatchupOpponentRace ();
color gf_GetColorForRealStatValue (fixed lp_percentage, bool lp_higherIsBetter);
int gf_GetMapResourceIndexForUnit (unit lp_unit);
fixed gf_ln (fixed lp_x);
fixed gf_log10 (fixed lp_x);
int gf_GetWinButtonYPadding ();
unitgroup gf_GetAllGasStructureUnits ();
unitgroup gf_GetAllPlayerUnitsforType (int lp_player, string lp_unitType);
unitgroup gf_GetAllPlayerUnits (int lp_player);
bool gf_IsNumeric (string lp_input);
bool gf_IsCapitalLetterOrDigit (string lp_letter);
string gf_FormatCatalogStringwithSpaces (string lp_string);
string gf_TrimSOffArmorsUpgradeName (string lp_string);
text gf_GetIntDifferenceasText (int lp_value, int lp_previousBest, bool lp_higherisBetter, bool lp_displayasPercentage);
text gf_GetRealDifferenceasText (fixed lp_value, fixed lp_previousBest, bool lp_higherisBetter);
text gf_GetTimeDifferenceasText (int lp_value, int lp_previousBest, bool lp_higherisBetter, bool lp_displayasPercentage);
text gf_ConvertInttoTextWithPlusSignifPositive (int lp_int);
text gf_ConvertInttoTimeTextWithPlusSignifPositive (int lp_int);
text gf_GetFormattedUpgradeNameasText (string lp_upgrade);
text gf_GetFormattedAbilityNameasText (string lp_ability);
text gf_GetSupplyDifferenceasFormattedText (int lp_actualSupply, int lp_benchmarkSupply);
int gf_GetTotalSecondsforMinSeconds (int lp_minutes, int lp_seconds);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_UpgradeCompleteAddUpgradeAlert;
trigger gt_NewUpgradeStartsStopAlertTimers;
trigger gt_UpgradeCancelledRestartAlertTimers;
trigger gt_UpgradeGapAlertTimerExpiresFireAlert;
trigger gt_ProductionFinishedOrCancelledAddRestartAlert;
trigger gt_NewProductionBeginsStopAlertTimers;
trigger gt_ProductionIdleAlertTimerExpiresFireAlert;
trigger gt_MineralsAboveThreshold;
trigger gt_GasAboveThreshold;
trigger gt_SupplyBlockImminent;
trigger gt_RaceMacroEnergyAboveThreshold;
trigger gt_APMBelowThreshold;
trigger gt_Benchmark1TimerExpires;
trigger gt_Benchmark2TimerExpires;
trigger gt_Benchmark3TimerExpires;
trigger gt_MaxTimeTimerElapsed;
trigger gt_OnUnitStartUpdateCurrentBuildOrder;
trigger gt_OnUpgradeStartUpdateCurrentBuildOrder;
trigger gt_OnAbilityStartUpdateCurrentBuildOrder;
trigger gt_OnUnitCancelUpdateCurrentBuildOrder;
trigger gt_OnUpgradeCancelUpdateCurrentBuildOrder;
trigger gt_OnAbilityCancelUpdateCurrentBuildOrder;
trigger gt_OnMultipleUnitFailureTimerExpires;
trigger gt_ForkBuildOrder;
trigger gt_EverySecondCheckforBuildHints;
trigger gt_EnableDisableBuildHints;
trigger gt_DebugSpendingQuotient;
trigger gt_UpdateGasTaken;
trigger gt_UpdateProductionIdleTime;
trigger gt_UpdateTimeSupplyBlocked;
trigger gt_UpdateMineralsCollectedThisBuild;
trigger gt_UpdateGasCollectedThisBuild;
trigger gt_UpdateAPM;
trigger gt_UpdateTotalWorkers;
trigger gt_UpdateNumUpgradesResearched;
trigger gt_UpdateResourceCollectionRate;
trigger gt_UpdateAverageUnspentResources;
trigger gt_StartBuild;
trigger gt_ResetBuild;
trigger gt_EndBuildatMaxSupply;
trigger gt_EndBuildatSpecifiedGameTime;
trigger gt_EndBuildFromHotkey;
trigger gt_ToggleDebugAlerts;
trigger gt_ToggleDebugStats;
trigger gt_ToggleDebugBank;
trigger gt_ToggleDebugBuildOrder;
trigger gt_ToggleDebugMapMechanics;
trigger gt_ToggleDebugMenus;
trigger gt_DebugBooleanConditionFromHotkey;
trigger gt_MuteUnmuteAlerts;
trigger gt_EnableDisableMineralAlert;
trigger gt_EnableDisableGasAlert;
trigger gt_EnableDisableSupplyBlockAlert;
trigger gt_EnableDisableMacroEnergyAlert;
trigger gt_EnableDisableUpgradeGapAlert;
trigger gt_EnableDisableProductionIdleAlert;
trigger gt_EnableDisableAPMBelowThreshold;
trigger gt_SelectBenchmarkMenu;
trigger gt_OpenMainMenu;
trigger gt_SelectAlertMenu;
trigger gt_SelectMatchup;
trigger gt_SelectEndBuildAtMaxSupply;
trigger gt_SelectEndBuildAtGameTime;
trigger gt_TogglePracticeAgainstSavedBuild;
trigger gt_UpdateFinalSupplyAtGameTimeText;
trigger gt_ClearSavedBenchmarkBuildforMatchuponButtonPress;
trigger gt_CloseHelpandResumeBuildfromOkButton;
trigger gt_CloseHelpandResumeBuildfromHotkey;
trigger gt_OpenHelpDialog;
trigger gt_OpenPostBuildReportDialog;
trigger gt_SaveBenchmarkBuildStats;
trigger gt_ResetBenchmarkBuildStats;
trigger gt_ReturntoMainMenufromReport;
trigger gt_UpdateSupplyBenchmarksonButtonClick;
trigger gt_MuteVictoryFanfare;
trigger gt_CloseStatsandResumeBuildfromOkButton;
trigger gt_CloseStatsandResumeBuildfromHotkey;
trigger gt_OpenStatsDialog;
trigger gt_MapInitialization;
trigger gt_EndGame;
trigger gt_WorkerInGasDuringResetFix;
trigger gt_OverlordInProgressFix;
trigger gt_OverlordCompletedorCancelledFix;
trigger gt_HatcheryLarvaSpawnFix;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_AddUpgradeGapAlert (string lp_delayedUpgrade) {
    // Implementation
    TextExpressionSetToken("Param/Expression/A3731B98", "A", gf_GetFormattedUpgradeNameasText(lp_delayedUpgrade));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/A3731B98"));
    gv_upgradeGapAlerts[gv_alertUpgradeGapNumUpgrades].lv_delayedUpgrade = lp_delayedUpgrade;
    TimerStart(gv_upgradeGapAlerts[gv_alertUpgradeGapNumUpgrades].lv_alertTimer, gv_alertUpgradeGapThreshold, false, c_timeGame);
    if ((gv_debugAlertsEnabled == true)) {
        TextExpressionSetToken("Param/Expression/46760CB3", "A", gf_GetFormattedUpgradeNameasText(lp_delayedUpgrade));
        gf_AddDebugTimerWindow(gv_upgradeGapAlerts[gv_alertUpgradeGapNumUpgrades].lv_alertTimer, TextExpressionAssemble("Param/Expression/46760CB3"));
        TextExpressionSetToken("Param/Expression/D1487546", "A", gf_GetFormattedUpgradeNameasText(lp_delayedUpgrade));
        gf_AddDebugTimerWindow(gv_upgradeGapAlerts[gv_alertUpgradeGapNumUpgrades].lv_cooldownTimer, TextExpressionAssemble("Param/Expression/D1487546"));
    }
    else {
    }
    gv_alertUpgradeGapNumUpgrades += 1;
}

void gf_StopUpgradeGapAlert (string lp_upgrade) {
    // Variable Declarations
    int lv_alertIndex;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/A9003F5E", "A", gf_GetFormattedUpgradeNameasText(lp_upgrade));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/A9003F5E"));
    lv_alertIndex = gf_GetUpgradeGapAlertIndexForUpgrade(lp_upgrade);
    TimerStart(gv_upgradeGapAlerts[lv_alertIndex].lv_alertTimer, gv_neverexpires, false, c_timeGame);
    TimerPause(gv_upgradeGapAlerts[lv_alertIndex].lv_alertTimer, true);
    TimerStart(gv_upgradeGapAlerts[lv_alertIndex].lv_cooldownTimer, gv_neverexpires, false, c_timeGame);
    TimerPause(gv_upgradeGapAlerts[lv_alertIndex].lv_cooldownTimer, true);
}

void gf_FireUpgradeGapAlert (timer lp_timer) {
    // Variable Declarations
    int lv_alertIndex;

    // Variable Initialization

    // Implementation
    lv_alertIndex = gf_GetUpgradeGapAlertIndexForTimer(lp_timer);
    TextExpressionSetToken("Param/Expression/55853475", "A", IntToText(lv_alertIndex));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/55853475"));
    TextExpressionSetToken("Param/Expression/DDA3FDF3", "A", gf_GetFormattedUpgradeNameasText(gv_upgradeGapAlerts[lv_alertIndex].lv_delayedUpgrade));
    UIAlert("UpgradeDelayed", 1, TextExpressionAssemble("Param/Expression/DDA3FDF3"), (CatalogFieldValueGet(c_gameCatalogUpgrade, gv_upgradeGapAlerts[lv_alertIndex].lv_delayedUpgrade, "Icon", c_playerAny)));
    if ((gv_muteAlertsEnabled == false)) {
        SoundPlay(SoundLink("UI_ObjectiveUpdate", -1), PlayerGroupAll(), 50.0, 0.0);
    }
    else {
    }
    TimerStart(gv_upgradeGapAlerts[lv_alertIndex].lv_cooldownTimer, gv_alertCooldownSeconds, false, c_timeGame);
}

void gf_RestartUpgradeGapAlertTimer (string lp_upgrade) {
    // Variable Declarations
    int lv_alertIndex;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/B4C4D038", "A", gf_GetFormattedUpgradeNameasText(lp_upgrade));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/B4C4D038"));
    lv_alertIndex = gf_GetUpgradeGapAlertIndexForUpgrade(lp_upgrade);
    TimerStart(gv_upgradeGapAlerts[lv_alertIndex].lv_cooldownTimer, gv_neverexpires, false, c_timeGame);
    TimerPause(gv_upgradeGapAlerts[lv_alertIndex].lv_cooldownTimer, true);
    TimerStart(gv_upgradeGapAlerts[lv_alertIndex].lv_alertTimer, gv_alertUpgradeGapThreshold, false, c_timeGame);
}

void gf_RestartUpgradeCooldownAlertTimer (string lp_upgrade) {
    // Variable Declarations
    int lv_alertIndex;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/0B536D14", "A", gf_GetFormattedUpgradeNameasText(lp_upgrade));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/0B536D14"));
    lv_alertIndex = gf_GetUpgradeGapAlertIndexForUpgrade(lp_upgrade);
    TimerStart(gv_upgradeGapAlerts[lv_alertIndex].lv_alertTimer, gv_neverexpires, false, c_timeGame);
    TimerPause(gv_upgradeGapAlerts[lv_alertIndex].lv_alertTimer, true);
    TimerStart(gv_upgradeGapAlerts[lv_alertIndex].lv_cooldownTimer, gv_alertCooldownSeconds, false, c_timeGame);
}

void gf_AddProductionIdleAlert (string lp_unitType) {
    // Variable Declarations
    timer lv_alertTimer;
    timer lv_cooldownTimer;

    // Variable Initialization
    lv_alertTimer = TimerCreate();
    lv_cooldownTimer = TimerCreate();

    // Implementation
    TextExpressionSetToken("Param/Expression/04F20F4B", "A", UnitTypeGetName(lp_unitType));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/04F20F4B"));
    TimerStart(gv_productionIdleAlerts[gv_productionIdleNumProductionUnitTypes].lv_alertTimer, gv_productionIdleAlertSecondsThreshold, false, c_timeGame);
    gv_productionIdleAlerts[gv_productionIdleNumProductionUnitTypes].lv_unitType = lp_unitType;
    if ((gv_debugAlertsEnabled == true)) {
        TextExpressionSetToken("Param/Expression/2DCFD2AA", "A", UnitTypeGetName(lp_unitType));
        gf_AddDebugTimerWindow(gv_productionIdleAlerts[gv_productionIdleNumProductionUnitTypes].lv_alertTimer, TextExpressionAssemble("Param/Expression/2DCFD2AA"));
        TextExpressionSetToken("Param/Expression/8E290B4F", "A", UnitTypeGetName(lp_unitType));
        gf_AddDebugTimerWindow(gv_productionIdleAlerts[gv_productionIdleNumProductionUnitTypes].lv_cooldownTimer, TextExpressionAssemble("Param/Expression/8E290B4F"));
    }
    else {
    }
    gv_productionIdleNumProductionUnitTypes += 1;
}

void gf_StopProductionIdleTimer (string lp_unitType) {
    // Variable Declarations
    int lv_alertIndex;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/BFF9DA15", "A", UnitTypeGetName(lp_unitType));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/BFF9DA15"));
    lv_alertIndex = gf_GetProductionIdleAlertIndexForUnitType(lp_unitType);
    TimerPause(gv_productionIdleAlerts[lv_alertIndex].lv_alertTimer, true);
    TimerPause(gv_productionIdleAlerts[lv_alertIndex].lv_cooldownTimer, true);
}

void gf_FireProductionIdleAlert (timer lp_timer) {
    // Variable Declarations
    int lv_alertIndex;

    // Variable Initialization

    // Implementation
    lv_alertIndex = gf_GetProductionIdleAlertIndexForTimer(lp_timer);
    TextExpressionSetToken("Param/Expression/0021D979", "A", UnitTypeGetName(gv_productionIdleAlerts[lv_alertIndex].lv_unitType));
    UIAlert("ProductionIdleTooLong", 1, TextExpressionAssemble("Param/Expression/0021D979"), gf_GetIconForBuildingType(gv_productionIdleAlerts[lv_alertIndex].lv_unitType));
    if ((gv_muteAlertsEnabled == false)) {
        SoundPlay(SoundLink("Alert_UniObjectiveCompleted", -1), PlayerGroupAll(), 50.0, 0.0);
    }
    else {
    }
    TimerStart(gv_productionIdleAlerts[lv_alertIndex].lv_cooldownTimer, gv_alertCooldownSeconds, false, c_timeGame);
}

void gf_RestartProductionIdleAlertTimer (string lp_unitType) {
    // Variable Declarations
    int lv_alertIndex;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/CD69F550", "A", UnitTypeGetName(lp_unitType));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/CD69F550"));
    lv_alertIndex = gf_GetProductionIdleAlertIndexForUnitType(lp_unitType);
    TimerStart(gv_productionIdleAlerts[lv_alertIndex].lv_cooldownTimer, gv_neverexpires, false, c_timeGame);
    TimerPause(gv_productionIdleAlerts[lv_alertIndex].lv_cooldownTimer, true);
    TimerStart(gv_productionIdleAlerts[lv_alertIndex].lv_alertTimer, gv_productionIdleAlertSecondsThreshold, false, c_timeGame);
}

void gf_RestartProductionIdleCooldownTimer (string lp_unitType) {
    // Variable Declarations
    int lv_alertIndex;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/4240A9C2", "A", UnitTypeGetName(lp_unitType));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/4240A9C2"));
    lv_alertIndex = gf_GetProductionIdleAlertIndexForUnitType(lp_unitType);
    TimerStart(gv_productionIdleAlerts[lv_alertIndex].lv_alertTimer, gv_neverexpires, false, c_timeGame);
    TimerPause(gv_productionIdleAlerts[lv_alertIndex].lv_alertTimer, true);
    TimerStart(gv_productionIdleAlerts[lv_alertIndex].lv_cooldownTimer, gv_alertCooldownSeconds, false, c_timeGame);
}

void gf_SaveBenchmarkMenuConfiguration (string lp_sectionKey) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    gf_RefreshSupplyBenchmarksConfigurationValuesFromDialog();
    gf_RefreshBuildCompletionConfigurationValuesFromDialog();
    gf_SaveMatchupBenchmarksConfiguration(lp_sectionKey);
    gf_SaveBuildCompletionConfiguration(lp_sectionKey);
    gf_SaveBenchmarkBuildMenuConfiguration(lp_sectionKey);
    BankSave(gv_benchmarkerBank);
}

void gf_RefreshSupplyBenchmarksConfigurationValuesFromDialog () {
    int autoE860F6C8_ae;
    int autoE860F6C8_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoE860F6C8_ae = 2;
    autoE860F6C8_ai = 1;
    lv_i = 0;
    for ( ; ( (autoE860F6C8_ai >= 0 && lv_i <= autoE860F6C8_ae) || (autoE860F6C8_ai <= 0 && lv_i >= autoE860F6C8_ae) ) ; lv_i += autoE860F6C8_ai ) {
        gv_supplyBenchmarks[lv_i].lv_benchmarkSupply = gf_GetEditBoxValueasInt(gv_benchmarkSupplyEditBoxes[lv_i]);
    }
}

void gf_RefreshBuildCompletionConfigurationValuesFromDialog () {
    // Implementation
    gv_benchmarkMaxSupplyMinutes = gf_GetEditBoxValueasInt(gv_maxTimeMinutesEditBox);
    gv_benchmarkMaxSupplySeconds = gf_GetEditBoxValueasInt(gv_maxTimeSecondsEditBox);
    gv_benchmarkMaxSupplyTotalSeconds = ((gf_GetEditBoxValueasInt(gv_maxTimeMinutesEditBox)*60)+gf_GetEditBoxValueasInt(gv_maxTimeSecondsEditBox));
    gv_benchmarkEndBuildatGameTimeTotalSeconds = ((gf_GetEditBoxValueasInt(gv_endBuildMinutesEditBox)*60)+gf_GetEditBoxValueasInt(gv_endBuildSecondsEditBox));
    gv_benchmarkEndBuildatGameTimeMinutes = gf_GetEditBoxValueasInt(gv_endBuildMinutesEditBox);
    gv_benchmarkEndBuildatGameTimeSeconds = gf_GetEditBoxValueasInt(gv_endBuildSecondsEditBox);
    if ((gf_IsEndBuildatMaxSupplySelected() == true)) {
        gv_supplyBenchmarks[3].lv_benchmarkTimeMin = gf_GetEditBoxValueasInt(gv_maxTimeMinutesEditBox);
        gv_supplyBenchmarks[3].lv_benchmarkTimeSeconds = gf_GetEditBoxValueasInt(gv_maxTimeSecondsEditBox);
        gv_supplyBenchmarks[3].lv_benchmarkSupply = 200;
    }
    else {
        gv_supplyBenchmarks[3].lv_benchmarkTimeMin = gf_GetEditBoxValueasInt(gv_endBuildMinutesEditBox);
        gv_supplyBenchmarks[3].lv_benchmarkTimeSeconds = gf_GetEditBoxValueasInt(gv_endBuildSecondsEditBox);
        gv_supplyBenchmarks[3].lv_benchmarkSupply = gf_GetEditBoxValueasInt(gv_finalSupplyAtGameTimeEditBox);
    }
    TextExpressionSetToken("Param/Expression/562B406B", "A", IntToText(gv_supplyBenchmarks[3].lv_benchmarkTimeMin));
    TextExpressionSetToken("Param/Expression/562B406B", "B", IntToText(gv_supplyBenchmarks[3].lv_benchmarkTimeSeconds));
    gf_LogTextMessage(gv_debugMenusEnabled, TextExpressionAssemble("Param/Expression/562B406B"));
    gv_benchmarkFinalSupplyatGameTimeValue = gf_GetEditBoxValueasInt(gv_finalSupplyAtGameTimeEditBox);
}

void gf_SaveMatchupBenchmarksConfiguration (string lp_sectionKey) {
    int autoA7CD85DF_ae;
    int autoA7CD85DF_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoA7CD85DF_ae = 2;
    autoA7CD85DF_ai = 1;
    lv_i = 0;
    for ( ; ( (autoA7CD85DF_ai >= 0 && lv_i <= autoA7CD85DF_ae) || (autoA7CD85DF_ai <= 0 && lv_i >= autoA7CD85DF_ae) ) ; lv_i += autoA7CD85DF_ai ) {
        BankValueSetFromInt(gv_benchmarkerBank, lp_sectionKey, gv_benchmarkSupplyEntryKeys[lv_i], gv_supplyBenchmarks[lv_i].lv_benchmarkSupply);
    }
}

void gf_SaveBuildCompletionConfiguration (string lp_sectionKey) {
    // Implementation
    BankValueSetFromInt(gv_benchmarkerBank, lp_sectionKey, gv_benchmarkEndBuildSelectionKey, DialogControlGetSelectedItem(gv_endBuildPulldown, 1));
    BankValueSetFromInt(gv_benchmarkerBank, lp_sectionKey, gv_benchmarkMaxSupplyatTimeMinutesKey, gv_benchmarkMaxSupplyMinutes);
    BankValueSetFromInt(gv_benchmarkerBank, lp_sectionKey, gv_benchmarkMaxSupplyatTimeSecondsKey, gv_benchmarkMaxSupplySeconds);
    BankValueSetFromInt(gv_benchmarkerBank, lp_sectionKey, gv_benchmarkEndBuildMinutesKey, gv_benchmarkEndBuildatGameTimeMinutes);
    BankValueSetFromInt(gv_benchmarkerBank, lp_sectionKey, gv_benchmarkEndBuildSecondsKey, gv_benchmarkEndBuildatGameTimeSeconds);
    BankValueSetFromInt(gv_benchmarkerBank, lp_sectionKey, gv_benchmarkFinalSupplyatGameTimeKey, gv_benchmarkFinalSupplyatGameTimeValue);
}

void gf_SaveBenchmarkBuildMenuConfiguration (string lp_sectionKey) {
    // Implementation
    gv_practiceAgainstBenchmarkBuildOrder = libNtve_gf_DialogItemIsChecked(gv_practiceAgainstSavedBuildOrderCheckbox, 1);
    BankValueSetFromFlag(gv_benchmarkerBank, lp_sectionKey, gv_practiceAgainstBenchmarkBuildOrderKey, gv_practiceAgainstBenchmarkBuildOrder);
    gv_displayBuildHints = libNtve_gf_DialogItemIsChecked(gv_displayBuildOrderHintsCheckbox, 1);
    BankValueSetFromFlag(gv_benchmarkerBank, lp_sectionKey, gv_displayBuildHintsKey, gv_displayBuildHints);
    gv_displayPerformanceFeedback = libNtve_gf_DialogItemIsChecked(gv_displayBuildOrderPerformanceFeedbackCheckbox, 1);
    BankValueSetFromFlag(gv_benchmarkerBank, lp_sectionKey, gv_displayPerformanceFeedbackKey, gv_displayPerformanceFeedback);
}

void gf_LoadBenchmarkMenuConfiguration (string lp_sectionKey) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    gf_LoadSupplyBenchmarkMenuConfiguration(lp_sectionKey);
    gf_LoadBuildCompletionMenuConfiguraiton(lp_sectionKey);
    gf_LoadBenchmarkBuildMenuConfiguration(lp_sectionKey);
}

void gf_LoadSupplyBenchmarkMenuConfiguration (string lp_sectionKey) {
    int autoB80F7580_ae;
    int autoB80F7580_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoB80F7580_ae = 2;
    autoB80F7580_ai = 1;
    lv_i = 0;
    for ( ; ( (autoB80F7580_ai >= 0 && lv_i <= autoB80F7580_ae) || (autoB80F7580_ai <= 0 && lv_i >= autoB80F7580_ae) ) ; lv_i += autoB80F7580_ai ) {
        gf_LoadIntFromBankIfKeyisSetElseDefault(gv_benchmarkSupplyEditBoxes[lv_i], gv_benchmarkSupplyEntryKeys[lv_i], lp_sectionKey, gv_benchmarkSupplyDefaults[lv_i]);
    }
}

void gf_LoadBuildCompletionMenuConfiguraiton (string lp_sectionKey) {
    // Implementation
    gf_LoadIntFromBankIfKeyisSetElseDefault(gv_maxTimeMinutesEditBox, gv_benchmarkMaxSupplyatTimeMinutesKey, lp_sectionKey, gv_benchmarkMaxSupplyMinutes);
    gf_LoadIntFromBankIfKeyisSetElseDefault(gv_maxTimeSecondsEditBox, gv_benchmarkMaxSupplyatTimeSecondsKey, lp_sectionKey, gv_benchmarkMaxSupplySeconds);
    if ((BankValueGetAsInt(gv_benchmarkerBank, lp_sectionKey, gv_benchmarkEndBuildSelectionKey) > 0)) {
        DialogControlSelectItem(gv_endBuildPulldown, PlayerGroupAll(), BankValueGetAsInt(gv_benchmarkerBank, lp_sectionKey, gv_benchmarkEndBuildSelectionKey));
    }
    else {
        DialogControlSelectItem(gv_endBuildPulldown, PlayerGroupAll(), gv_endBuildPulldownSelection);
    }
    gf_LoadIntFromBankIfKeyisSetElseDefault(gv_endBuildMinutesEditBox, gv_benchmarkEndBuildMinutesKey, lp_sectionKey, gv_benchmarkEndBuildatGameTimeMinutes);
    gf_LoadIntFromBankIfKeyisSetElseDefault(gv_endBuildSecondsEditBox, gv_benchmarkEndBuildSecondsKey, lp_sectionKey, gv_benchmarkEndBuildatGameTimeSeconds);
    gf_LoadIntFromBankIfKeyisSetElseDefault(gv_finalSupplyAtGameTimeEditBox, gv_benchmarkFinalSupplyatGameTimeKey, lp_sectionKey, gv_benchmarkFinalSupplyatGameTimeValue);
}

void gf_LoadBenchmarkBuildMenuConfiguration (string lp_sectionKey) {
    // Implementation
    if ((gf_DoesSavedBuildOrderExistForCurrentMatchup() == true)) {
        gf_EnablePracticeAgainstBenchmarkBuildOrderOptions();
    }
    else {
        gf_DisablePracticeAgainstBenchmarkBuildOrderOptions();
    }
    gf_LoadBooleanFromBankIfKeyisSetElseDefault(gv_practiceAgainstSavedBuildOrderCheckbox, gv_practiceAgainstBenchmarkBuildOrderKey, lp_sectionKey, false);
    if ((gf_DoesSavedBuildOrderExistForCurrentMatchup() == true)) {
        DialogControlSetEnabled(gv_practiceAgainstSavedBuildOrderClearButton, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetEnabled(gv_practiceAgainstSavedBuildOrderClearButton, PlayerGroupAll(), false);
    }
    gf_LoadBooleanFromBankIfKeyisSetElseDefault(gv_displayBuildOrderHintsCheckbox, gv_displayBuildHintsKey, lp_sectionKey, false);
    gf_LoadBooleanFromBankIfKeyisSetElseDefault(gv_displayBuildOrderPerformanceFeedbackCheckbox, gv_displayPerformanceFeedbackKey, lp_sectionKey, false);
}

void gf_SaveAlertMenuConfiguration () {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertMineralsCheckEnabledEntryKey, gv_alertMineralsEnabled);
    gv_alertMineralsThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[0][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertMineralsThresholdKey, gv_alertMineralsThreshold);
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertGasCheckEnabledEntryKey, gv_alertGasEnabled);
    gv_alertGasThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[1][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertGasThresholdKey, gv_alertGasThreshold);
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockCheckEnabledEntryKey, gv_alertSupplyBlockEnabled);
    gv_alertSupplyBlockWithinCapThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[2][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockWithinCapKey, gv_alertSupplyBlockWithinCapThreshold);
    gv_alertSupplyBlockStart = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[2][4]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockStartKey, gv_alertSupplyBlockStart);
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertMacroEnergyCheckEnabledEntryKey, gv_alertMacroEnergyEnabled);
    gv_alertSelectedMacroEnergyThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[3][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertMacroEnergyThresholdKey, gv_alertSelectedMacroEnergyThreshold);
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertUpgradeGapCheckEnabledEntryKey, gv_alertUpgradeGapEnabled);
    gv_alertUpgradeGapThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[4][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertUpgradeGapThresholdKey, gv_alertUpgradeGapThreshold);
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertProductionIdleCheckEnabledEntryKey, gv_productionIdleAlertEnabled);
    gv_productionIdleAlertSecondsThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[5][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertProductionIdleThresholdKey, gv_productionIdleAlertSecondsThreshold);
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertAPMBelowThresholdCheckEnabledEntryKey, gv_aPMBelowThresholdEnabled);
    gv_aPMThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[6][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertAPMThresholdKey, gv_aPMThreshold);
    gv_aPMThresholdDuration = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[6][4]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertAPMThresholdDurationKey, gv_aPMThresholdDuration);
    BankSave(gv_benchmarkerBank);
}

void gf_LoadAlertMenuConfiguration () {
    // Implementation
    gf_LoadAlertRowConfiguration(gv_alertMineralsCheckEnabledEntryKey, gv_alertMineralsThresholdKey, gv_mineralAboveThresholdAlertCheckbox, gv_alertMenuDialogItemGrid[0][2], gv_alertMineralsThreshold, 0);
    gv_alertMineralsEnabled = libNtve_gf_DialogItemIsChecked(gv_mineralAboveThresholdAlertCheckbox, 1);
    gv_alertMineralsThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[0][2]);
    gf_LoadAlertRowConfiguration(gv_alertGasCheckEnabledEntryKey, gv_alertGasThresholdKey, gv_gasAboveThresholdAlertCheckbox, gv_alertMenuDialogItemGrid[1][2], gv_alertGasThreshold, 1);
    gv_alertGasEnabled = libNtve_gf_DialogItemIsChecked(gv_gasAboveThresholdAlertCheckbox, 1);
    gv_alertGasThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[1][2]);
    if ((BankKeyExists(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockCheckEnabledEntryKey) == true)) {
        if ((BankValueGetAsFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockCheckEnabledEntryKey) == true)) {
            gv_alertSupplyBlockEnabled = true;
        }
        else {
            gv_alertSupplyBlockEnabled = false;
        }
        gv_alertSupplyBlockWithinCapThreshold = BankValueGetAsInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockWithinCapKey);
        gv_alertSupplyBlockStart = BankValueGetAsInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockStartKey);
    }
    else {
    }
    gf_SetAlertCheckboxState(gv_alertSupplyBlockEnabled, gv_supplyBlockImminentAlertCheckbox);
    gf_EnableDisableAlertRow(gv_alertSupplyBlockEnabled, 2, 0);
    libNtve_gf_SetDialogItemEditorValue(gv_alertMenuDialogItemGrid[2][2], IntToString(gv_alertSupplyBlockWithinCapThreshold), PlayerGroupAll());
    libNtve_gf_SetDialogItemEditorValue(gv_alertMenuDialogItemGrid[2][4], IntToString(gv_alertSupplyBlockStart), PlayerGroupAll());
    gf_LoadAlertRowConfiguration(gv_alertMacroEnergyCheckEnabledEntryKey, gv_alertMacroEnergyThresholdKey, gv_macroEnergyAboveThresholdAlertCheckbox, gv_alertMenuDialogItemGrid[3][2], gf_GetDefaultMacroEnergyThreshold(), 3);
    gv_alertMacroEnergyEnabled = libNtve_gf_DialogItemIsChecked(gv_macroEnergyAboveThresholdAlertCheckbox, 1);
    gv_alertSelectedMacroEnergyThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[3][2]);
    gf_LoadAlertRowConfiguration(gv_alertUpgradeGapCheckEnabledEntryKey, gv_alertUpgradeGapThresholdKey, gv_upgradeGapAboveThresholdAlertCheckbox, gv_alertMenuDialogItemGrid[4][2], gv_alertUpgradeGapThreshold, 4);
    gv_alertUpgradeGapEnabled = libNtve_gf_DialogItemIsChecked(gv_upgradeGapAboveThresholdAlertCheckbox, 1);
    gv_alertSelectedMacroEnergyThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[4][2]);
    gf_LoadAlertRowConfiguration(gv_alertProductionIdleCheckEnabledEntryKey, gv_alertProductionIdleThresholdKey, gv_productionIdleAboveThresholdAlertCheckbox, gv_alertMenuDialogItemGrid[5][2], gv_productionIdleAlertSecondsThreshold, 5);
    gv_productionIdleAlertEnabled = libNtve_gf_DialogItemIsChecked(gv_productionIdleAboveThresholdAlertCheckbox, 1);
    gv_productionIdleAlertSecondsThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[5][2]);
    gf_LoadAlertRowConfiguration(gv_alertAPMBelowThresholdCheckEnabledEntryKey, gv_alertAPMThresholdKey, gv_aPMBelowThresholdAlertCheckbox, gv_alertMenuDialogItemGrid[6][2], gv_aPMThreshold, 6);
    gv_aPMBelowThresholdEnabled = libNtve_gf_DialogItemIsChecked(gv_aPMBelowThresholdAlertCheckbox, 1);
    gv_aPMThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[6][2]);
    if (((BankKeyExists(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertAPMBelowThresholdCheckEnabledEntryKey) == true) && (BankKeyExists(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertAPMThresholdDurationKey) == true))) {
        gv_aPMThresholdDuration = BankValueGetAsInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertAPMThresholdDurationKey);
    }
    else {
    }
    libNtve_gf_SetDialogItemEditorValue(gv_alertMenuDialogItemGrid[6][4], IntToString(gv_aPMThresholdDuration), PlayerGroupAll());
}

void gf_LoadAlertRowConfiguration (string lp_alertEnabledKey, string lp_alertThresholdKey, int lp_alertCheckbox, int lp_alertEditBox, int lp_defaultThresholdValue, int lp_rowNumber) {
    // Variable Declarations
    bool lv_checkEnabled;
    int lv_threshold;

    // Variable Initialization
    lv_checkEnabled = true;

    // Implementation
    if ((BankKeyExists(gv_benchmarkerBank, gv_alertConfigurationSectionKey, lp_alertEnabledKey) == true)) {
        if ((BankValueGetAsFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, lp_alertEnabledKey) == true)) {
            lv_checkEnabled = true;
        }
        else {
            lv_checkEnabled = false;
        }
        lv_threshold = BankValueGetAsInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, lp_alertThresholdKey);
    }
    else {
        lv_threshold = lp_defaultThresholdValue;
    }
    gf_SetAlertCheckboxState(lv_checkEnabled, lp_alertCheckbox);
    gf_EnableDisableAlertRow(lv_checkEnabled, lp_rowNumber, 0);
    libNtve_gf_SetDialogItemEditorValue(lp_alertEditBox, IntToString(lv_threshold), PlayerGroupAll());
}

void gf_SaveCurrentBuildAsBenchmarkBuildOrderForCurrentMatchup () {
    int auto895F190E_ae;
    int auto895F190E_ai;

    // Variable Declarations
    int lv_numCurrentBuildSteps;
    int lv_currentStepNum;

    // Variable Initialization

    // Implementation
    gf_LogTextMessage(gv_debugBankEnabled, StringExternal("Param/Value/EE33C8C1"));
    lv_numCurrentBuildSteps = gv_currentBuildOrderStepCursor;
    auto895F190E_ae = (lv_numCurrentBuildSteps-1);
    auto895F190E_ai = 1;
    lv_currentStepNum = 0;
    for ( ; ( (auto895F190E_ai >= 0 && lv_currentStepNum <= auto895F190E_ae) || (auto895F190E_ai <= 0 && lv_currentStepNum >= auto895F190E_ae) ) ; lv_currentStepNum += auto895F190E_ai ) {
        gf_SaveBenchmarkBuildStep(lv_currentStepNum);
        TextExpressionSetToken("Param/Expression/ABAFD438", "A", gf_GetCurrentBuildOrderStepText(lv_currentStepNum));
        TextExpressionSetToken("Param/Expression/ABAFD438", "B", IntToText(lv_currentStepNum));
        gf_LogTextMessage(gv_debugBankEnabled, TextExpressionAssemble("Param/Expression/ABAFD438"));
    }
    BankValueSetFromInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_numBenchmarkBuildOrderStepsEntryKey, lv_numCurrentBuildSteps);
    TextExpressionSetToken("Param/Expression/1DC37812", "A", IntToText(gv_currentBuildOrderStepCursor));
    gf_LogTextMessage(gv_debugBankEnabled, TextExpressionAssemble("Param/Expression/1DC37812"));
    BankValueSetFromInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_benchmarkBuildOrderTimeKey, FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer)));
    TextExpressionSetToken("Param/Expression/49DC8CAF", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer))));
    gf_LogTextMessage(gv_debugBankEnabled, TextExpressionAssemble("Param/Expression/49DC8CAF"));
    BankValueSetFromInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_benchmarkBuildOrderSupplyBenchmarksMetKey, gv_numBenchmarksMetThisBuild);
    TextExpressionSetToken("Param/Expression/49EB79CE", "A", IntToText(gv_numBenchmarksMetThisBuild));
    gf_LogTextMessage(gv_debugBankEnabled, TextExpressionAssemble("Param/Expression/49EB79CE"));
    BankSave(gv_benchmarkerBank);
}

void gf_LoadBenchmarkBuildOrderforCurrentMatchup () {
    int auto8F962F3E_ae;
    int auto8F962F3E_ai;

    // Variable Declarations
    int lv_entryKeyPrefix;
    int lv_currentStepNum;

    // Variable Initialization

    // Implementation
    gv_totalNumBenchmarkBuildOrderSteps = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_numBenchmarkBuildOrderStepsEntryKey);
    TextExpressionSetToken("Param/Expression/E4B95466", "A", IntToText(gv_totalNumBenchmarkBuildOrderSteps));
    TextExpressionSetToken("Param/Expression/E4B95466", "B", gf_GetCurrentlySelectedMatchupasText());
    gf_LogTextMessage(gv_debugBankEnabled, TextExpressionAssemble("Param/Expression/E4B95466"));
    if ((gv_totalNumBenchmarkBuildOrderSteps > 0)) {
        auto8F962F3E_ae = (gv_totalNumBenchmarkBuildOrderSteps-1);
        auto8F962F3E_ai = 1;
        lv_currentStepNum = 0;
        for ( ; ( (auto8F962F3E_ai >= 0 && lv_currentStepNum <= auto8F962F3E_ae) || (auto8F962F3E_ai <= 0 && lv_currentStepNum >= auto8F962F3E_ae) ) ; lv_currentStepNum += auto8F962F3E_ai ) {
            gf_LoadBenchmarkBuildStep(lv_currentStepNum);
        }
        gf_LogTextMessage(gv_debugBankEnabled, TextExpressionAssemble("Param/Expression/0A79CDD8"));
        gv_benchmarkBuildOrderTimeSeconds = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_benchmarkBuildOrderTimeKey);
        gv_benchmarkBuildOrderSupplyBenchmarksMet = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_benchmarkBuildOrderSupplyBenchmarksMetKey);
    }
    else {
        gf_LogTextMessage(gv_debugBankEnabled, TextExpressionAssemble("Param/Expression/DCA924E4"));
    }
}

void gf_ClearBenchmarkBuildOrderforCurrentMatchup () {
    int autoD5F67844_ae;
    int autoD5F67844_ai;

    // Variable Declarations
    int lv_currentStepNum;

    // Variable Initialization

    // Implementation
    if ((gv_debugBankEnabled == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F1506C2B"));
    }
    else {
    }
    autoD5F67844_ae = (gv_currentBuildOrderStepCursor-1);
    autoD5F67844_ai = 1;
    lv_currentStepNum = 0;
    for ( ; ( (autoD5F67844_ai >= 0 && lv_currentStepNum <= autoD5F67844_ae) || (autoD5F67844_ai <= 0 && lv_currentStepNum >= autoD5F67844_ae) ) ; lv_currentStepNum += autoD5F67844_ai ) {
        gf_ClearBenchmarkBuildStep(lv_currentStepNum);
    }
    BankKeyRemove(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_numBenchmarkBuildOrderStepsEntryKey);
    BankValueSetFromFlag(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_practiceAgainstBenchmarkBuildOrderKey, false);
    BankValueSetFromFlag(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_displayBuildHintsKey, false);
    BankSave(gv_benchmarkerBank);
}

void gf_SaveBenchmarkBuildStep (int lp_stepNumber) {
    // Implementation
    BankValueSetFromString(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_stepTypeBuildOrderStepEntryKey), gv_currentBuildOrderSteps[lp_stepNumber].lv_stepType);
    BankValueSetFromString(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_unitTypeBuildOrderStepEntryKey), (gv_currentBuildOrderSteps[lp_stepNumber].lv_unitType));
    BankValueSetFromString(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_upgradeBuildOrderStepEntryKey), (gv_currentBuildOrderSteps[lp_stepNumber].lv_upgrade));
    BankValueSetFromString(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_abilityBuildOrderStepEntryKey), (gv_currentBuildOrderSteps[lp_stepNumber].lv_ability));
    BankValueSetFromInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_supplyBuildOrderStepEntryKey), gv_currentBuildOrderSteps[lp_stepNumber].lv_supply);
    BankValueSetFromInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_amountBuildOrderStepEntryKey), gv_currentBuildOrderSteps[lp_stepNumber].lv_amount);
    BankValueSetFromInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_elapsedSecondsBuildOrderStepEntryKey), gv_currentBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds);
}

void gf_LoadBenchmarkBuildStep (int lp_stepNumber) {
    // Implementation
    gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_stepType = BankValueGetAsString(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_stepTypeBuildOrderStepEntryKey));
    gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_unitType = (BankValueGetAsString(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_unitTypeBuildOrderStepEntryKey)));
    gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_upgrade = (BankValueGetAsString(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_upgradeBuildOrderStepEntryKey)));
    gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_ability = (BankValueGetAsString(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_abilityBuildOrderStepEntryKey)));
    gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supply = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_supplyBuildOrderStepEntryKey));
    gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_amount = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_amountBuildOrderStepEntryKey));
    gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_elapsedSecondsBuildOrderStepEntryKey));
}

void gf_ClearBenchmarkBuildStep (int lp_stepNumber) {
    // Implementation
    BankKeyRemove(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_stepTypeBuildOrderStepEntryKey));
    BankKeyRemove(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_unitTypeBuildOrderStepEntryKey));
    BankKeyRemove(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_upgradeBuildOrderStepEntryKey));
    BankKeyRemove(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_supplyBuildOrderStepEntryKey));
    BankKeyRemove(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_amountBuildOrderStepEntryKey));
    BankKeyRemove(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_elapsedSecondsBuildOrderStepEntryKey));
}

void gf_SaveCurrentBuildStatsAsBenchmarkBuildStats () {
    // Implementation
    gf_SaveRealAsBuildBenchmark(gf_CalculateSpendingQuotient(), gv_bestSpendingQuotientEntryKey);
    gf_SaveIntForCurrentMatchup(gv_workersCreated, gv_bestTotalWorkersCreatedEntryKey);
    gf_SaveIntForCurrentMatchup(gf_GetTotalArmySupply(), gv_bestTotalArmySupplyEntryKey);
    gf_SaveIntForCurrentMatchup(gf_GetTotalArmyValueMinerals(), gv_bestTotalArmyValueMineralsEntryKey);
    gf_SaveIntForCurrentMatchup(gf_GetTotalArmyValueGas(), gv_bestTotalArmyValueGasEntryKey);
    gf_SaveIntForCurrentMatchup(gf_GetNumUpgradesResearched(), gv_bestNumUpgradesResearchedEntryKey);
    gf_SaveIntForCurrentMatchup(gf_GetTotalMineralsCollected(), gv_bestTotalMineralsCollectedEntryKey);
    gf_SaveIntForCurrentMatchup(gf_GetTotalGasCollected(), gv_bestTotalGasCollectedEntryKey);
    gf_SaveIntForCurrentMatchup(gf_GetTimeSupplyBlocked(), gv_bestTimeSupplyBlockedEntryKey);
    gf_SaveIntForCurrentMatchup(gf_GetIdleProductionTime(), gv_bestIdleProductionTimeEntryKey);
    gf_SaveIntForCurrentMatchup(gf_GetAverageUnspentMinerals(), gv_bestAverageUnspentMineralsEntryKey);
    gf_SaveIntForCurrentMatchup(gf_GetAverageUnspentGas(), gv_bestAverageUnspentGasEntryKey);
    gf_SaveRealAsBuildBenchmark(gf_GetAverageBuildAPM(), gv_bestAverageAPMEntryKey);
    BankSave(gv_benchmarkerBank);
}

void gf_ClearBenchmarkBuildStatsForCurrentMatchup () {
    // Implementation
    gf_SaveRealAsBuildBenchmark(0.0, gv_bestSpendingQuotientEntryKey);
    gf_SaveIntForCurrentMatchup(0, gv_bestTotalWorkersCreatedEntryKey);
    gf_SaveIntForCurrentMatchup(0, gv_bestTotalArmySupplyEntryKey);
    gf_SaveIntForCurrentMatchup(0, gv_bestTotalArmyValueMineralsEntryKey);
    gf_SaveIntForCurrentMatchup(0, gv_bestTotalArmyValueGasEntryKey);
    gf_SaveIntForCurrentMatchup(0, gv_bestNumUpgradesResearchedEntryKey);
    gf_SaveIntForCurrentMatchup(0, gv_bestTotalMineralsCollectedEntryKey);
    gf_SaveIntForCurrentMatchup(0, gv_bestTotalGasCollectedEntryKey);
    gf_SaveIntForCurrentMatchup(0, gv_bestTimeSupplyBlockedEntryKey);
    gf_SaveIntForCurrentMatchup(0, gv_bestIdleProductionTimeEntryKey);
    gf_SaveIntForCurrentMatchup(0, gv_bestAverageUnspentMineralsEntryKey);
    gf_SaveIntForCurrentMatchup(0, gv_bestAverageUnspentGasEntryKey);
    gf_SaveRealAsBuildBenchmark(0.0, gv_bestAverageAPMEntryKey);
}

void gf_SaveIntForCurrentMatchup (int lp_value, string lp_entryKey) {
    // Implementation
    BankValueSetFromInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), lp_entryKey, lp_value);
}

void gf_LoadIntFromBankIfKeyisSetElseDefault (int lp_dialogItem, string lp_entryKey, string lp_sectionKey, int lp_defaultValue) {
    // Implementation
    if (((BankKeyExists(gv_benchmarkerBank, lp_sectionKey, lp_entryKey) == true) && (BankValueGetAsInt(gv_benchmarkerBank, lp_sectionKey, lp_entryKey) > -1))) {
        libNtve_gf_SetDialogItemEditorValue(lp_dialogItem, IntToString(BankValueGetAsInt(gv_benchmarkerBank, lp_sectionKey, lp_entryKey)), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemEditorValue(lp_dialogItem, IntToString(lp_defaultValue), PlayerGroupAll());
    }
}

void gf_LoadBooleanFromBankIfKeyisSetElseDefault (int lp_dialogItem, string lp_entryKey, string lp_sectionKey, bool lp_defaultValue) {
    // Variable Declarations
    bool lv_loadedValue;

    // Variable Initialization

    // Implementation
    if ((BankKeyExists(gv_benchmarkerBank, lp_sectionKey, lp_entryKey) == true)) {
        lv_loadedValue = BankValueGetAsFlag(gv_benchmarkerBank, lp_sectionKey, lp_entryKey);
    }
    else {
    }
    if ((lv_loadedValue == true)) {
        libNtve_gf_SetDialogItemChecked(lp_dialogItem, true, PlayerGroupAll());
    }
    else {
        if ((lp_defaultValue == true)) {
            libNtve_gf_SetDialogItemChecked(lp_dialogItem, true, PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemChecked(lp_dialogItem, false, PlayerGroupAll());
        }
    }
    if ((gv_debugBankEnabled == true)) {
        TextExpressionSetToken("Param/Expression/CF0AC666", "A", StringToText(lp_entryKey));
        TextExpressionSetToken("Param/Expression/CF0AC666", "B", StringToText(lp_sectionKey));
        TextExpressionSetToken("Param/Expression/CF0AC666", "C", libNtve_gf_ConvertBooleanToText(lv_loadedValue));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/CF0AC666"));
    }
    else {
    }
}

void gf_SaveRealAsBuildBenchmark (fixed lp_value, string lp_entryKey) {
    // Implementation
    BankValueSetFromFixed(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), lp_entryKey, lp_value);
}

void gf_CompleteFinalBenchmarkObjective () {
    // Implementation
    if ((ObjectiveGetState(gv_benchmarkFinalBenchmarkObjective) == c_objectiveStateActive)) {
        ObjectiveSetState(gv_benchmarkFinalBenchmarkObjective, c_objectiveStateCompleted);
        TextExpressionSetToken("Param/Expression/739A89F7", "A", ObjectiveGetName(gv_benchmarkFinalBenchmarkObjective));
        TextExpressionSetToken("Param/Expression/739A89F7", "B", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer))));
        ObjectiveSetName(gv_benchmarkFinalBenchmarkObjective, TextExpressionAssemble("Param/Expression/739A89F7"));
        gv_numBenchmarksMetThisBuild += 1;
    }
    else {
    }
}

void gf_FailFinalBenchmarkObjective () {
    // Implementation
    if ((ObjectiveGetState(gv_benchmarkFinalBenchmarkObjective) == c_objectiveStateActive)) {
        ObjectiveSetState(gv_benchmarkFinalBenchmarkObjective, c_objectiveStateFailed);
        TextExpressionSetToken("Param/Expression/186AFB36", "A", ObjectiveGetName(gv_benchmarkFinalBenchmarkObjective));
        TextExpressionSetToken("Param/Expression/186AFB36", "B", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer))));
        ObjectiveSetName(gv_benchmarkFinalBenchmarkObjective, TextExpressionAssemble("Param/Expression/186AFB36"));
    }
    else {
    }
}

void gf_CreateHiddenBenchmarkSupplyObjectives () {
    int auto672AD999_ae;
    int auto672AD999_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto672AD999_ae = 2;
    auto672AD999_ai = 1;
    lv_i = 0;
    for ( ; ( (auto672AD999_ai >= 0 && lv_i <= auto672AD999_ae) || (auto672AD999_ai <= 0 && lv_i >= auto672AD999_ae) ) ; lv_i += auto672AD999_ai ) {
        ObjectiveCreate(StringExternal("Param/Value/7196AAC4"), StringExternal("Param/Value/D6D94F6E"), c_objectiveStateHidden, true);
        gv_benchmarkSupplyObjectives[lv_i] = ObjectiveLastCreated();
    }
    ObjectiveCreate(StringExternal("Param/Value/A11C3A0B"), StringExternal("Param/Value/BC9BE74F"), c_objectiveStateHidden, true);
    gv_benchmarkFinalBenchmarkObjective = ObjectiveLastCreated();
}

void gf_ShowBenchmarkSupplyObjectives () {
    int auto0FC1EE86_ae;
    int auto0FC1EE86_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto0FC1EE86_ae = 2;
    auto0FC1EE86_ai = 1;
    lv_i = 0;
    for ( ; ( (auto0FC1EE86_ai >= 0 && lv_i <= auto0FC1EE86_ae) || (auto0FC1EE86_ai <= 0 && lv_i >= auto0FC1EE86_ae) ) ; lv_i += auto0FC1EE86_ai ) {
        ObjectiveShow(gv_benchmarkSupplyObjectives[lv_i], PlayerGroupAll(), true);
    }
    ObjectiveShow(gv_benchmarkFinalBenchmarkObjective, PlayerGroupAll(), true);
}

void gf_HideBenchmarkSupplyObjectives () {
    int autoA3763877_ae;
    int autoA3763877_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoA3763877_ae = 2;
    autoA3763877_ai = 1;
    lv_i = 0;
    for ( ; ( (autoA3763877_ai >= 0 && lv_i <= autoA3763877_ae) || (autoA3763877_ai <= 0 && lv_i >= autoA3763877_ae) ) ; lv_i += autoA3763877_ai ) {
        ObjectiveShow(gv_benchmarkSupplyObjectives[lv_i], PlayerGroupAll(), false);
    }
    ObjectiveShow(gv_benchmarkFinalBenchmarkObjective, PlayerGroupAll(), false);
}

void gf_StartBenchmarkTimers () {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    TimerStart(gv_benchmark1Timer, gf_GetTotalSecondsforMinSeconds(gv_supplyBenchmarks[0].lv_benchmarkTimeMin, gv_supplyBenchmarks[0].lv_benchmarkTimeSeconds), false, c_timeGame);
    TimerStart(gv_benchmark2Timer, gf_GetTotalSecondsforMinSeconds(gv_supplyBenchmarks[1].lv_benchmarkTimeMin, gv_supplyBenchmarks[1].lv_benchmarkTimeSeconds), false, c_timeGame);
    TimerStart(gv_benchmark3Timer, gf_GetTotalSecondsforMinSeconds(gv_supplyBenchmarks[2].lv_benchmarkTimeMin, gv_supplyBenchmarks[2].lv_benchmarkTimeSeconds), false, c_timeGame);
    if ((gf_IsEndBuildatMaxSupplySelected() == true)) {
        TimerStart(gv_finalBenchmarkTimer, gv_benchmarkMaxSupplyTotalSeconds, false, c_timeGame);
    }
    else {
        TimerStart(gv_finalBenchmarkTimer, gv_benchmarkEndBuildatGameTimeTotalSeconds, false, c_timeGame);
    }
}

void gf_CreateBenchmarkBuildOrderObjectives () {
    int auto98326FC4_ae;
    int auto98326FC4_ai;

    // Variable Declarations
    int lv_firstStep;
    int lv_i;

    // Variable Initialization

    // Implementation
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/A1F4609D"));
    auto98326FC4_ae = gv_maxDisplayedBuildOrderObjectives1;
    auto98326FC4_ai = 1;
    lv_i = 0;
    for ( ; ( (auto98326FC4_ai >= 0 && lv_i <= auto98326FC4_ae) || (auto98326FC4_ai <= 0 && lv_i >= auto98326FC4_ae) ) ; lv_i += auto98326FC4_ai ) {
        if ((lv_i < gv_totalNumBenchmarkBuildOrderSteps)) {
            gf_CreateBenchmarkBuildOrderStepasSecondaryObjective(lv_i);
            gv_benchmarkBuildOrderStepObjectives[lv_i] = ObjectiveLastCreated();
        }
        else {
        }
    }
    libNtve_gf_DisplayScreenButton(gv_forkScreenButtonID, StringExternal("Param/Value/4265F0EA"), 105, 35, c_anchorTopLeft, 160, 198, gt_ForkBuildOrder);
    libNtve_gf_SetDialogItemTooltip(libNtve_gf_ScreenButton(gv_forkScreenButtonID), StringExternal("Param/Value/D99E1BC8"), PlayerGroupAll());
    gf_HighlightBenchmarkBuildOrderObjective(lv_firstStep);
}

void gf_CreateBenchmarkBuildOrderStepasSecondaryObjective (int lp_buildStep) {
    // Variable Declarations
    text lv_stepObjectiveText;

    // Variable Initialization

    // Implementation
    lv_stepObjectiveText = gf_GetBenchmarkBuildOrderStepText(lp_buildStep);
    ObjectiveCreate(lv_stepObjectiveText, StringExternal("Param/Value/63BE4A54"), c_objectiveStateActive, false);
}

void gf_CompleteObjectiveForBenchmarkBuildOrderStep (int lp_currentStep, int lp_benchmarkStep) {
    // Variable Declarations
    int lv_previousBenchmarkStep;
    text lv_objectiveText;

    // Variable Initialization

    // Implementation
    lv_previousBenchmarkStep = (lp_benchmarkStep - 1);
    if (((lp_benchmarkStep > 0) && (ObjectiveGetState(gv_benchmarkBuildOrderStepObjectives[gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lv_previousBenchmarkStep)]) == c_objectiveStateActive))) {
        TextExpressionSetToken("Param/Expression/AA9B4DC6", "A", IntToText(lv_previousBenchmarkStep));
        TextExpressionSetToken("Param/Expression/AA9B4DC6", "B", IntToText(gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lp_benchmarkStep)));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/AA9B4DC6"));
        gf_FailObjectiveForBenchmarkBuildOrderStep(lp_currentStep, lv_previousBenchmarkStep, false);
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/5CCA6BB6", "A", IntToText(lp_benchmarkStep));
    TextExpressionSetToken("Param/Expression/5CCA6BB6", "B", IntToText(gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lp_benchmarkStep)));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/5CCA6BB6"));
    lv_objectiveText = gf_GetFormattedCompleteBenchmarkBuildOrderStepText(lp_currentStep, lp_benchmarkStep);
    ObjectiveSetName(gv_benchmarkBuildOrderStepObjectives[gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lp_benchmarkStep)], lv_objectiveText);
    ObjectiveSetState(gv_benchmarkBuildOrderStepObjectives[gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lp_benchmarkStep)], c_objectiveStateCompleted);
    gv_numCompletedBenchmarkBuildOrderSteps += 1;
    gv_currentBuildOrderSteps[lp_currentStep].lv_finishedBenchmarkStepReference = lp_benchmarkStep;
}

void gf_FailObjectiveForBenchmarkBuildOrderStep (int lp_currentStep, int lp_benchmarkStep, bool lp_timerExpired) {
    // Variable Declarations
    text lv_incorrectUnitText;

    // Variable Initialization

    // Implementation
    if ((lp_timerExpired == true)) {
        lv_incorrectUnitText = StringExternal("Param/Value/26EB1C7A");
    }
    else {
        lv_incorrectUnitText = gf_GetTypeTextForCurrentBuildOrderStep(lp_currentStep);
    }
    TextExpressionSetToken("Param/Expression/E3F2B274", "A", IntToText(lp_benchmarkStep));
    TextExpressionSetToken("Param/Expression/E3F2B274", "B", IntToText(gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lp_benchmarkStep)));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/E3F2B274"));
    TextExpressionSetToken("Param/Expression/C89BB602", "A", gf_GetBenchmarkBuildOrderStepText(lp_benchmarkStep));
    TextExpressionSetToken("Param/Expression/C89BB602", "B", lv_incorrectUnitText);
    ObjectiveSetName(gv_benchmarkBuildOrderStepObjectives[gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lp_benchmarkStep)], TextExpressionAssemble("Param/Expression/C89BB602"));
    ObjectiveSetState(gv_benchmarkBuildOrderStepObjectives[gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lp_benchmarkStep)], c_objectiveStateFailed);
    gv_numFailedBenchmarkBuildOrderSteps += 1;
    gv_currentBuildOrderSteps[lp_currentStep].lv_finishedBenchmarkStepReference = lp_benchmarkStep;
}

void gf_ResetObjectiveForBenchmarkBuildOrderStep (int lp_benchmarkStep) {
    // Variable Declarations
    int lv_objectiveIndex;

    // Variable Initialization

    // Implementation
    lv_objectiveIndex = gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lp_benchmarkStep);
    ObjectiveSetState(gv_benchmarkBuildOrderStepObjectives[lv_objectiveIndex], c_objectiveStateActive);
    ObjectiveSetName(gv_benchmarkBuildOrderStepObjectives[lv_objectiveIndex], gf_GetBenchmarkBuildOrderStepText(lp_benchmarkStep));
}

void gf_CycleBenchmarkBuildOrderObjectives (int lp_currentStep, int lp_benchmarkStep) {
    // Variable Declarations
    int lv_firstObjective;
    int lv_nextDisplayedBuildStepIndex;

    // Variable Initialization

    // Implementation
    lv_nextDisplayedBuildStepIndex = (lp_benchmarkStep + gv_benchmarkBuildOrderObjectiveCycleThreshold - 1);
    gf_LogStringMessage(gv_debugBuildOrderEnabled, ("Benchmark step: " + IntToString(lp_benchmarkStep) + " , cycle threshold: " + IntToString(gv_benchmarkBuildOrderObjectiveCycleThreshold) + " and hasNext is = " + libNtve_gf_ConvertBooleanToString(gf_DoesBuildHaveAnotherStepToDisplay(lp_currentStep))));
    if ((((lp_benchmarkStep) > gv_benchmarkBuildOrderObjectiveCycleThreshold) && (gf_DoesBuildHaveAnotherStepToDisplay(lp_currentStep) == true))) {
        gf_CreateBenchmarkBuildOrderStepasSecondaryObjective(lv_nextDisplayedBuildStepIndex);
        TextExpressionSetToken("Param/Expression/B1D812BC", "A", IntToText(lv_nextDisplayedBuildStepIndex));
        TextExpressionSetToken("Param/Expression/B1D812BC", "B", gf_GetBenchmarkBuildOrderStepText(lv_nextDisplayedBuildStepIndex));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/B1D812BC"));
        ObjectiveDestroy(gv_benchmarkBuildOrderStepObjectives[lv_firstObjective]);
        gf_AdjustAllBenchmarkBuildOrderObjectivePositionsUpby1();
        gv_benchmarkBuildOrderStepObjectives[gv_maxDisplayedBuildOrderObjectives1] = ObjectiveLastCreated();
        gv_buildOrderCycleOffset += 1;
    }
    else {
        TextExpressionSetToken("Param/Expression/1C68CA1F", "A", IntToText(lp_currentStep));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/1C68CA1F"));
    }
}

void gf_AdjustAllBenchmarkBuildOrderObjectivePositionsUpby1 () {
    int autoA714F11A_ae;
    int autoA714F11A_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoA714F11A_ae = (gv_maxDisplayedBuildOrderObjectives1 - 1);
    autoA714F11A_ai = 1;
    lv_i = 0;
    for ( ; ( (autoA714F11A_ai >= 0 && lv_i <= autoA714F11A_ae) || (autoA714F11A_ai <= 0 && lv_i >= autoA714F11A_ae) ) ; lv_i += autoA714F11A_ai ) {
        gv_benchmarkBuildOrderStepObjectives[lv_i] = gv_benchmarkBuildOrderStepObjectives[(lv_i+1)];
    }
}

void gf_DestroyBenchmarkBuildOrderObjectives () {
    int auto8EFD539D_ae;
    int auto8EFD539D_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto8EFD539D_ae = gv_maxDisplayedBuildOrderObjectives1;
    auto8EFD539D_ai = 1;
    lv_i = 0;
    for ( ; ( (auto8EFD539D_ai >= 0 && lv_i <= auto8EFD539D_ae) || (auto8EFD539D_ai <= 0 && lv_i >= auto8EFD539D_ae) ) ; lv_i += auto8EFD539D_ai ) {
        ObjectiveDestroy(gv_benchmarkBuildOrderStepObjectives[lv_i]);
    }
    libNtve_gf_HideScreenButton(false, gv_forkScreenButtonID);
}

void gf_HighlightBenchmarkBuildOrderObjective (int lp_step) {
    // Variable Declarations
    int lv_objectiveIndex;

    // Variable Initialization

    // Implementation
    lv_objectiveIndex = gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lp_step);
    TextExpressionSetToken("Param/Expression/4FF3063D", "A", null);
    TextExpressionSetToken("Param/Expression/4FF3063D", "B", IntToText(lp_step));
    gf_LogTextMessage(gv_debugMapMechanicsEnabled, TextExpressionAssemble("Param/Expression/4FF3063D"));
    TextExpressionSetToken("Param/Expression/F715B5A3", "A", ObjectiveGetName(gv_benchmarkBuildOrderStepObjectives[gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lp_step)]));
    ObjectiveSetName(gv_benchmarkBuildOrderStepObjectives[lv_objectiveIndex], TextExpressionAssemble("Param/Expression/F715B5A3"));
}

void gf_UnHighlightBenchmarkBuildOrderObjective (int lp_step) {
    // Variable Declarations
    int lv_objectiveIndex;

    // Variable Initialization

    // Implementation
    lv_objectiveIndex = gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lp_step);
    ObjectiveSetName(gv_benchmarkBuildOrderStepObjectives[lv_objectiveIndex], gf_GetBenchmarkBuildOrderStepText(lp_step));
}

void gf_InitializeBenchmarkBuildOrder () {
    // Implementation
    if ((gv_practiceAgainstBenchmarkBuildOrder == true)) {
        gf_LoadBenchmarkBuildOrderforCurrentMatchup();
        if ((gv_totalNumBenchmarkBuildOrderSteps > 0)) {
            gf_CreateBenchmarkBuildOrderObjectives();
        }
        else {
        }
    }
    else {
    }
}

void gf_AddUnitBuildOrderStep (int lp_currentStep, unit lp_triggeringUnit, string lp_triggeringUnitType) {
    // Variable Declarations
    int lv_buildOrderStepSupplyCount;

    // Variable Initialization

    // Implementation
    gv_currentBuildOrderSteps[lp_currentStep].lv_stepType = gv_unitStepType;
    gv_currentBuildOrderSteps[lp_currentStep].lv_unitType = lp_triggeringUnitType;
    gv_currentBuildOrderSteps[lp_currentStep].lv_amount = 1;
    gv_currentBuildOrderSteps[lp_currentStep].lv_supply = gf_GetSupplyforCurrentBuildOrderStep(lp_currentStep);
    gv_currentBuildOrderSteps[lp_currentStep].lv_elapsedSeconds = FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer));
    UnitGroupAdd(gv_currentBuildOrderSteps[lp_currentStep].lv_completingUnits, lp_triggeringUnit);
    TextExpressionSetToken("Param/Expression/08B35931", "A", gf_GetCurrentBuildOrderStepText(lp_currentStep));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/08B35931"));
}

void gf_AddUpgradeBuildOrderStep (int lp_currentStep, string lp_buildStepUpgrade) {
    // Implementation
    gv_currentBuildOrderSteps[lp_currentStep].lv_stepType = gv_upgradeStepType;
    gv_currentBuildOrderSteps[lp_currentStep].lv_upgrade = lp_buildStepUpgrade;
    gv_currentBuildOrderSteps[lp_currentStep].lv_amount = 1;
    gv_currentBuildOrderSteps[lp_currentStep].lv_supply = PlayerScoreValueGetAsInt(1, "FoodUsed");
    gv_currentBuildOrderSteps[lp_currentStep].lv_elapsedSeconds = FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer));
    gv_currentBuildOrderSteps[lp_currentStep].lv_completingUpgrade = lp_buildStepUpgrade;
    TextExpressionSetToken("Param/Expression/2B969709", "A", gf_GetCurrentBuildOrderStepText(lp_currentStep));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/2B969709"));
}

void gf_AddAbilityBuildOrderStep (int lp_currentStep, abilcmd lp_triggerringAbilityCommand) {
    // Variable Declarations
    string lv_triggeringAbilityType;

    // Variable Initialization

    // Implementation
    lv_triggeringAbilityType = AbilityCommandGetAbility(lp_triggerringAbilityCommand);
    gv_currentBuildOrderSteps[lp_currentStep].lv_stepType = gv_abilityStepType;
    gv_currentBuildOrderSteps[lp_currentStep].lv_ability = lv_triggeringAbilityType;
    gv_currentBuildOrderSteps[lp_currentStep].lv_amount = 1;
    gv_currentBuildOrderSteps[lp_currentStep].lv_supply = PlayerScoreValueGetAsInt(1, "FoodUsed");
    gv_currentBuildOrderSteps[lp_currentStep].lv_elapsedSeconds = FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer));
    gv_currentBuildOrderSteps[lp_currentStep].lv_completingAbility = lp_triggerringAbilityCommand;
    TextExpressionSetToken("Param/Expression/736976D0", "A", gf_GetCurrentBuildOrderStepText(lp_currentStep));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/736976D0"));
}

void gf_RemoveUnitBuildOrderStep (int lp_step) {
    // Implementation
    TextExpressionSetToken("Param/Expression/4C41831F", "A", gf_GetCurrentBuildOrderStepText(lp_step));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/4C41831F"));
    gv_currentBuildOrderSteps[lp_step].lv_stepType = "";
    gv_currentBuildOrderSteps[lp_step].lv_unitType = null;
    gv_currentBuildOrderSteps[lp_step].lv_amount = 0;
    gv_currentBuildOrderSteps[lp_step].lv_supply = 0;
    gv_currentBuildOrderSteps[lp_step].lv_elapsedSeconds = 0;
    UnitGroupClear(gv_currentBuildOrderSteps[lp_step].lv_completingUnits);
    gv_currentBuildOrderSteps[lp_step].lv_finishedBenchmarkStepReference = -1;
}

void gf_RemoveUpgradeBuildOrderStep (int lp_step) {
    // Implementation
    TextExpressionSetToken("Param/Expression/BE4D1BC9", "A", gf_GetCurrentBuildOrderStepText(lp_step));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/BE4D1BC9"));
    gv_currentBuildOrderSteps[lp_step].lv_stepType = "";
    gv_currentBuildOrderSteps[lp_step].lv_upgrade = null;
    gv_currentBuildOrderSteps[lp_step].lv_amount = 0;
    gv_currentBuildOrderSteps[lp_step].lv_supply = 0;
    gv_currentBuildOrderSteps[lp_step].lv_elapsedSeconds = 0;
    gv_currentBuildOrderSteps[lp_step].lv_completingUpgrade = null;
    gv_currentBuildOrderSteps[lp_step].lv_finishedBenchmarkStepReference = -1;
}

void gf_RemoveAbilityBuildOrderStep (int lp_step) {
    // Implementation
    TextExpressionSetToken("Param/Expression/9029C20E", "A", gf_GetCurrentBuildOrderStepText(lp_step));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/9029C20E"));
    gv_currentBuildOrderSteps[lp_step].lv_stepType = "";
    gv_currentBuildOrderSteps[lp_step].lv_ability = null;
    gv_currentBuildOrderSteps[lp_step].lv_amount = 0;
    gv_currentBuildOrderSteps[lp_step].lv_supply = 0;
    gv_currentBuildOrderSteps[lp_step].lv_elapsedSeconds = 0;
    gv_currentBuildOrderSteps[lp_step].lv_completingAbility = null;
    gv_currentBuildOrderSteps[lp_step].lv_finishedBenchmarkStepReference = -1;
}

void gf_EvaluateUnitTypeForBenchmarkBuildOrderStep (string lp_unitType, int lp_currentStep, int lp_benchmarkStep) {
    // Variable Declarations
    int lv_currentAmountForStep;
    int lv_evalStepCurrent;
    int lv_evalStepBenchmark;

    // Variable Initialization

    // Implementation
    lv_evalStepCurrent = lp_currentStep;
    lv_evalStepBenchmark = lp_benchmarkStep;
    while (true) {
        lv_currentAmountForStep = gv_currentBuildOrderSteps[lv_evalStepCurrent].lv_amount;
        if (((gv_benchmarkBuildOrderSteps[lv_evalStepBenchmark].lv_stepType == gv_unitStepType) && (gf_IsUnitTypeCorrectForBenchmarkBuildOrderStep(lp_unitType, lv_evalStepBenchmark) == true))) {
            TextExpressionSetToken("Param/Expression/B1051469", "C", UnitTypeGetName(lp_unitType));
            TextExpressionSetToken("Param/Expression/B1051469", "A", IntToText(lv_evalStepCurrent));
            TextExpressionSetToken("Param/Expression/B1051469", "B", IntToText(lp_benchmarkStep));
            gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/B1051469"));
            if (((gf_IsAmountCorrectForBenchmarkBuildOrderStep(lv_currentAmountForStep, lv_evalStepBenchmark) == true))) {
                gf_CompleteBenchmarkStepObjectiveStepAndCycle(lv_evalStepCurrent, lv_evalStepBenchmark);
                if (((TimerIsPaused(gv_benchmarkBuildOrderSteps[lv_evalStepBenchmark].lv_multipleUnitFailureTimer) == false) && ((TimerGetDuration(gv_benchmarkBuildOrderSteps[lv_evalStepBenchmark].lv_multipleUnitFailureTimer) >= 0) && (TimerGetDuration(gv_benchmarkBuildOrderSteps[lv_evalStepBenchmark].lv_multipleUnitFailureTimer) <= gv_multipleUnitFailureThreshold)))) {
                    TextExpressionSetToken("Param/Expression/F6401EA7", "A", IntToText(lv_evalStepBenchmark));
                    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/F6401EA7"));
                    TimerStart(gv_benchmarkBuildOrderSteps[lv_evalStepBenchmark].lv_multipleUnitFailureTimer, gv_neverexpires, false, c_timeGame);
                    TimerPause(gv_benchmarkBuildOrderSteps[lv_evalStepBenchmark].lv_multipleUnitFailureTimer, true);
                }
                else {
                }
            }
            else {
                TextExpressionSetToken("Param/Expression/00348550", "A", IntToText(lv_currentAmountForStep));
                TextExpressionSetToken("Param/Expression/00348550", "B", IntToText(gv_benchmarkBuildOrderSteps[lv_evalStepBenchmark].lv_amount));
                gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/00348550"));
                if (((TimerIsPaused(gv_benchmarkBuildOrderSteps[lv_evalStepBenchmark].lv_multipleUnitFailureTimer) == true) && ((TimerGetRemaining(gv_benchmarkBuildOrderSteps[lv_evalStepBenchmark].lv_multipleUnitFailureTimer) == 0.0) || (TimerGetRemaining(gv_benchmarkBuildOrderSteps[lv_evalStepBenchmark].lv_multipleUnitFailureTimer) == gv_neverexpires)))) {
                    if (((gv_debugBuildOrderEnabled == true) && (TimerGetRemaining(gv_benchmarkBuildOrderSteps[lv_evalStepBenchmark].lv_multipleUnitFailureTimer) == 0.0))) {
                        TextExpressionSetToken("Param/Expression/2DA3C1EA", "B", IntToText(gv_benchmarkBuildOrderSteps[lv_evalStepBenchmark].lv_amount));
                        TextExpressionSetToken("Param/Expression/2DA3C1EA", "A", UnitTypeGetName(gv_benchmarkBuildOrderSteps[lv_evalStepBenchmark].lv_unitType));
                        gf_AddDebugTimerWindow(gv_benchmarkBuildOrderSteps[lv_evalStepBenchmark].lv_multipleUnitFailureTimer, TextExpressionAssemble("Param/Expression/2DA3C1EA"));
                    }
                    else {
                        gf_LogTextMessage(gv_debugBuildOrderEnabled, StringExternal("Param/Value/3476367F"));
                    }
                    TextExpressionSetToken("Param/Expression/8A069115", "A", IntToText(gv_multipleUnitFailureThreshold));
                    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/8A069115"));
                    TimerStart(gv_benchmarkBuildOrderSteps[lv_evalStepBenchmark].lv_multipleUnitFailureTimer, IntToFixed(gv_multipleUnitFailureThreshold), false, c_timeGame);
                }
                else {
                }
            }
        }
        else {
        }
    }
    gf_FailBenchmarkStepObjectiveAndCycle(lp_currentStep, lp_benchmarkStep, false);
}

void gf_EvaluateUpgradeForBenchmarkBuildOrderStep (string lp_upgrade, int lp_currentStep, int lp_benchmarkStep) {
    // Implementation
    TextExpressionSetToken("Param/Expression/AD04FA36", "A", gf_GetFormattedUpgradeNameasText(lp_upgrade));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/AD04FA36"));
    if ((gf_IsUpgradeTypeCorrectForBenchmarkBuildOrderStep(lp_upgrade, lp_benchmarkStep) == true)) {
        TextExpressionSetToken("Param/Expression/39828E9D", "A", gf_GetFormattedUpgradeNameasText(lp_upgrade));
        TextExpressionSetToken("Param/Expression/39828E9D", "B", IntToText(lp_currentStep));
        TextExpressionSetToken("Param/Expression/39828E9D", "C", IntToText(lp_benchmarkStep));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/39828E9D"));
        gf_CompleteBenchmarkStepObjectiveStepAndCycle(lp_currentStep, lp_benchmarkStep);
    }
    else {
        TextExpressionSetToken("Param/Expression/6BCF5D11", "A", gf_GetFormattedUpgradeNameasText(lp_upgrade));
        TextExpressionSetToken("Param/Expression/6BCF5D11", "B", IntToText(lp_currentStep));
        TextExpressionSetToken("Param/Expression/6BCF5D11", "C", IntToText(lp_benchmarkStep));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/6BCF5D11"));
        gf_FailBenchmarkStepObjectiveAndCycle(lp_currentStep, lp_benchmarkStep, false);
    }
}

void gf_EvaluateAbilityForBenchmarkBuildOrderStep (string lp_ability, int lp_currentStep, int lp_benchmarkStep) {
    // Implementation
    TextExpressionSetToken("Param/Expression/78265908", "A", gf_GetFormattedAbilityNameasText(lp_ability));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/78265908"));
    if ((gf_IsAbilityTypeCorrectForBenchmarkBuildOrderStep(lp_ability, lp_benchmarkStep) == true)) {
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/651DF3CD"));
        gf_CompleteBenchmarkStepObjectiveStepAndCycle(lp_currentStep, lp_benchmarkStep);
    }
    else {
        TextExpressionSetToken("Param/Expression/7E18F04E", "A", IntToText(lp_currentStep));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/7E18F04E"));
        gf_FailBenchmarkStepObjectiveAndCycle(lp_currentStep, lp_benchmarkStep, false);
    }
}

void gf_CompleteBenchmarkStepObjectiveStepAndCycle (int lp_currentStep, int lp_benchmarkStep) {
    // Implementation
    gf_CompleteObjectiveForBenchmarkBuildOrderStep(lp_currentStep, lp_benchmarkStep);
    if ((gv_displayPerformanceFeedback == true)) {
        gf_DisplayPerformanceFeedbackForCorrectStep(lp_currentStep, lp_benchmarkStep);
    }
    else {
    }
    gf_CycleBenchmarkBuildOrderObjectives(lp_currentStep, lp_benchmarkStep);
    gf_UpdateBenchmarkBuildOrderStepCursor();
}

void gf_FailBenchmarkStepObjectiveAndCycle (int lp_currentStep, int lp_benchmarkStep, bool lp_timerExpired) {
    // Implementation
    gf_FailObjectiveForBenchmarkBuildOrderStep(lp_currentStep, lp_benchmarkStep, lp_timerExpired);
    if ((gv_displayPerformanceFeedback == true)) {
        gf_DisplayPerformanceFeedbackForFailedStep(lp_currentStep, lp_timerExpired);
    }
    else {
    }
    gf_CycleBenchmarkBuildOrderObjectives(lp_currentStep, lp_benchmarkStep);
    gf_UpdateBenchmarkBuildOrderStepCursor();
}

void gf_ResetObjectiveForBenchmarkBuildOrderStepAndUncycle (int lp_benchmarkStep) {
    // Implementation
    TextExpressionSetToken("Param/Expression/F9AD5447", "A", IntToText(lp_benchmarkStep));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/F9AD5447"));
    gf_ResetObjectiveForBenchmarkBuildOrderStep(lp_benchmarkStep);
    if ((gv_benchmarkBuildOrderStepCursor > 0)) {
        gf_UnHighlightBenchmarkBuildOrderObjective(gv_benchmarkBuildOrderStepCursor);
        gv_benchmarkBuildOrderStepCursor -= 1;
        gf_HighlightBenchmarkBuildOrderObjective(gv_benchmarkBuildOrderStepCursor);
    }
    else {
        gf_HighlightBenchmarkBuildOrderObjective(gv_benchmarkBuildOrderStepCursor);
    }
}

trigger auto_gf_DisplayPerformanceFeedbackForCorrectStep_Trigger = null;
int auto_gf_DisplayPerformanceFeedbackForCorrectStep_lp_currentIndex;
int auto_gf_DisplayPerformanceFeedbackForCorrectStep_lp_benchmarkIndex;

void gf_DisplayPerformanceFeedbackForCorrectStep (int lp_currentIndex, int lp_benchmarkIndex) {
    auto_gf_DisplayPerformanceFeedbackForCorrectStep_lp_currentIndex = lp_currentIndex;
    auto_gf_DisplayPerformanceFeedbackForCorrectStep_lp_benchmarkIndex = lp_benchmarkIndex;

    if (auto_gf_DisplayPerformanceFeedbackForCorrectStep_Trigger == null) {
        auto_gf_DisplayPerformanceFeedbackForCorrectStep_Trigger = TriggerCreate("auto_gf_DisplayPerformanceFeedbackForCorrectStep_TriggerFunc");
    }

    TriggerExecute(auto_gf_DisplayPerformanceFeedbackForCorrectStep_Trigger, false, false);
}

bool auto_gf_DisplayPerformanceFeedbackForCorrectStep_TriggerFunc (bool testConds, bool runActions) {
    int lp_currentIndex = auto_gf_DisplayPerformanceFeedbackForCorrectStep_lp_currentIndex;
    int lp_benchmarkIndex = auto_gf_DisplayPerformanceFeedbackForCorrectStep_lp_benchmarkIndex;

    // Variable Declarations
    int lv_supplyDifference;
    int lv_secondsDifference;
    text lv_judgementText;
    text lv_secondsAndSupplyText;
    text lv_displayText;
    int lv_waitTime;
    int lv_perfectSecondsThreshold;
    int lv_greatSecondsThreshold;
    int lv_goodSecondsThreshold;
    int lv_almostSecondsThreshold;

    // Variable Initialization
    lv_waitTime = 4;
    lv_greatSecondsThreshold = 5;
    lv_goodSecondsThreshold = 10;
    lv_almostSecondsThreshold = 15;

    // Implementation
    lv_secondsDifference = (gv_currentBuildOrderSteps[lp_currentIndex].lv_elapsedSeconds-gv_benchmarkBuildOrderSteps[lp_benchmarkIndex].lv_elapsedSeconds);
    lv_supplyDifference = (gv_currentBuildOrderSteps[lp_currentIndex].lv_supply-gv_benchmarkBuildOrderSteps[lp_benchmarkIndex].lv_supply);
    if ((lv_secondsDifference < lv_perfectSecondsThreshold)) {
        lv_judgementText = gv_performanceFeedbackMarvelousText;
    }
    else if ((lv_secondsDifference == lv_perfectSecondsThreshold)) {
        lv_judgementText = gv_performanceFeedbackPerfectText;
    }
    else if (((lv_secondsDifference >= (lv_perfectSecondsThreshold+1)) && (lv_secondsDifference <= lv_greatSecondsThreshold))) {
        lv_judgementText = gv_performanceFeedbackGreatText;
    }
    else if (((lv_secondsDifference >= (lv_greatSecondsThreshold+1)) && (lv_secondsDifference <= lv_goodSecondsThreshold))) {
        lv_judgementText = gv_performanceFeedbackGoodText;
    }
    else if (((lv_secondsDifference >= (lv_goodSecondsThreshold+1)) && (lv_secondsDifference <= lv_almostSecondsThreshold))) {
        lv_judgementText = gv_performanceFeedbackAlmostText;
    }
    else if ((lv_secondsDifference > (lv_almostSecondsThreshold+1))) {
        lv_judgementText = gv_performanceFeedbackBooText;
    }
    TextExpressionSetToken("Param/Expression/1B21CC80", "A", gf_ConvertInttoTextWithPlusSignifPositive(lv_supplyDifference));
    TextExpressionSetToken("Param/Expression/1B21CC80", "B", gf_ConvertInttoTimeTextWithPlusSignifPositive(lv_secondsDifference));
    lv_secondsAndSupplyText = TextExpressionAssemble("Param/Expression/1B21CC80");
    TextExpressionSetToken("Param/Expression/3A1BC0E8", "A", lv_judgementText);
    TextExpressionSetToken("Param/Expression/3A1BC0E8", "B", lv_secondsAndSupplyText);
    lv_displayText = TextExpressionAssemble("Param/Expression/3A1BC0E8");
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lv_displayText);
    Wait(lv_waitTime, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

trigger auto_gf_DisplayPerformanceFeedbackForFailedStep_Trigger = null;
int auto_gf_DisplayPerformanceFeedbackForFailedStep_lp_currentStep;
bool auto_gf_DisplayPerformanceFeedbackForFailedStep_lp_timerExpired;

void gf_DisplayPerformanceFeedbackForFailedStep (int lp_currentStep, bool lp_timerExpired) {
    auto_gf_DisplayPerformanceFeedbackForFailedStep_lp_currentStep = lp_currentStep;
    auto_gf_DisplayPerformanceFeedbackForFailedStep_lp_timerExpired = lp_timerExpired;

    if (auto_gf_DisplayPerformanceFeedbackForFailedStep_Trigger == null) {
        auto_gf_DisplayPerformanceFeedbackForFailedStep_Trigger = TriggerCreate("auto_gf_DisplayPerformanceFeedbackForFailedStep_TriggerFunc");
    }

    TriggerExecute(auto_gf_DisplayPerformanceFeedbackForFailedStep_Trigger, false, false);
}

bool auto_gf_DisplayPerformanceFeedbackForFailedStep_TriggerFunc (bool testConds, bool runActions) {
    int lp_currentStep = auto_gf_DisplayPerformanceFeedbackForFailedStep_lp_currentStep;
    bool lp_timerExpired = auto_gf_DisplayPerformanceFeedbackForFailedStep_lp_timerExpired;

    // Variable Declarations
    text lv_judgementText;
    text lv_failureText;
    text lv_displayText;
    int lv_waitTime;
    int lv_perfectSecondsThreshold;
    int lv_greatSecondsThreshold;
    int lv_goodSecondsThreshold;
    int lv_almostSecondsThreshold;

    // Variable Initialization
    lv_waitTime = 4;
    lv_greatSecondsThreshold = 5;
    lv_goodSecondsThreshold = 10;
    lv_almostSecondsThreshold = 15;

    // Implementation
    lv_judgementText = gv_performanceFeedbackMissText;
    if ((lp_timerExpired == true)) {
        lv_failureText = StringExternal("Param/Value/43FA7647");
    }
    else {
        TextExpressionSetToken("Param/Expression/484F7C30", "A", gf_GetTypeTextForCurrentBuildOrderStep(lp_currentStep));
        lv_failureText = TextExpressionAssemble("Param/Expression/484F7C30");
    }
    TextExpressionSetToken("Param/Expression/A76B73DD", "A", lv_judgementText);
    TextExpressionSetToken("Param/Expression/A76B73DD", "B", lv_failureText);
    lv_displayText = TextExpressionAssemble("Param/Expression/A76B73DD");
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lv_displayText);
    Wait(lv_waitTime, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

void gf_UpdateBenchmarkBuildOrderStepCursor () {
    // Implementation
    gv_benchmarkBuildOrderStepCursor = gf_GetNextIncompleteBenchmarkBuildOrderStep(gv_currentBuildOrderStepCursor);
    gf_HighlightBenchmarkBuildOrderObjective(gv_benchmarkBuildOrderStepCursor);
}

void gf_CreateAlertMenuDialog () {
    // Variable Declarations
    int lv_rowNum;

    // Variable Initialization

    // Implementation
    DialogCreate(gv_benchmarkDialogWidth, gv_benchmarkDialogHeight, c_anchorCenter, 0, -150, true);
    gv_alertMenuDialog = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), gv_benchmarkDialogTitle);
    DialogSetTransparency(DialogLastCreated(), 0.0);
    gf_CreateMenuSelectButtons(1);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_benchmarkMenuSectionLabelNudge), StringExternal("Param/Value/563148FB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gf_CreateAlertMenuCheckbox(lv_rowNum);
    gv_mineralAboveThresholdAlertCheckbox = DialogControlLastCreated();
    gf_CreateAlertMenuLabel(StringExternal("Param/Value/99232652"), lv_rowNum);
    gf_CreateAlertMenuThresholdEditBox(gv__4DigitEditBoxWidth, lv_rowNum);
    lv_rowNum += 1;
    gf_CreateAlertMenuCheckbox(lv_rowNum);
    gv_gasAboveThresholdAlertCheckbox = DialogControlLastCreated();
    gf_CreateAlertMenuLabel(StringExternal("Param/Value/A472485E"), lv_rowNum);
    gf_CreateAlertMenuThresholdEditBox(gv__4DigitEditBoxWidth, lv_rowNum);
    lv_rowNum += 1;
    gf_CreateAlertMenuCheckbox(lv_rowNum);
    gv_supplyBlockImminentAlertCheckbox = DialogControlLastCreated();
    gf_CreateAlertMenuLabel(StringExternal("Param/Value/31BD0349"), lv_rowNum);
    gf_CreateAlertMenuThresholdEditBox(gv__2DigitEditBoxWidth, lv_rowNum);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_alertRowLabelWidths[2][1], gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[2][0]+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_labelAlignmentSpacer+gv_sectionLabelHeight+2*gv_menuItemHeight), StringExternal("Param/Value/22895B11"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_alertMenuDialogItemGrid[lv_rowNum][3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__2DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[lv_rowNum][0]+gv__2DigitEditBoxWidth+gv_alertRowLabelWidths[lv_rowNum][1]), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight+lv_rowNum*gv_menuItemHeight));
    gv_alertMenuDialogItemGrid[lv_rowNum][4] = DialogControlLastCreated();
    lv_rowNum += 1;
    gf_CreateAlertMenuCheckbox(lv_rowNum);
    gv_macroEnergyAboveThresholdAlertCheckbox = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/F5D99818", "A", gf_GetRaceMacroUnitName());
    gf_CreateAlertMenuLabel(TextExpressionAssemble("Param/Expression/F5D99818"), lv_rowNum);
    gf_CreateAlertMenuThresholdEditBox(gv__2DigitEditBoxWidth, lv_rowNum);
    lv_rowNum += 1;
    gf_CreateAlertMenuCheckbox(lv_rowNum);
    gv_upgradeGapAboveThresholdAlertCheckbox = DialogControlLastCreated();
    gf_CreateAlertMenuLabel(StringExternal("Param/Value/CAFE4A70"), lv_rowNum);
    gf_CreateAlertMenuThresholdEditBox(gv__2DigitEditBoxWidth, lv_rowNum);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_alertRowLabelWidths[lv_rowNum][1], gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[lv_rowNum][0]+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_labelAlignmentSpacer+gv_sectionLabelHeight+lv_rowNum*gv_menuItemHeight), StringExternal("Param/Value/0F44E262"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_alertMenuDialogItemGrid[lv_rowNum][3] = DialogControlLastCreated();
    lv_rowNum += 1;
    gf_CreateAlertMenuCheckbox(lv_rowNum);
    gv_productionIdleAboveThresholdAlertCheckbox = DialogControlLastCreated();
    gf_CreateAlertMenuLabel(StringExternal("Param/Value/683144D7"), lv_rowNum);
    gf_CreateAlertMenuThresholdEditBox(gv__2DigitEditBoxWidth, lv_rowNum);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_alertRowLabelWidths[lv_rowNum][1], gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[lv_rowNum][0]+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_labelAlignmentSpacer+gv_sectionLabelHeight+lv_rowNum*gv_menuItemHeight), StringExternal("Param/Value/C235BC69"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_alertMenuDialogItemGrid[lv_rowNum][3] = DialogControlLastCreated();
    lv_rowNum += 1;
    gf_CreateAlertMenuCheckbox(lv_rowNum);
    gv_aPMBelowThresholdAlertCheckbox = DialogControlLastCreated();
    gf_CreateAlertMenuLabel(StringExternal("Param/Value/7979A668"), lv_rowNum);
    gf_CreateAlertMenuThresholdEditBox(gv__3DigitEditBoxWidth, lv_rowNum);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_alertRowLabelWidths[lv_rowNum][2], gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[lv_rowNum][0]+gv__3DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_labelAlignmentSpacer+gv_sectionLabelHeight+lv_rowNum*gv_menuItemHeight), StringExternal("Param/Value/F05BB8B3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_alertMenuDialogItemGrid[lv_rowNum][3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__2DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[lv_rowNum][0]+gv__3DigitEditBoxWidth+gv_alertRowLabelWidths[lv_rowNum][1]), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight+lv_rowNum*gv_menuItemHeight));
    gv_alertMenuDialogItemGrid[lv_rowNum][4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_alertRowLabelWidths[lv_rowNum][2], gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[lv_rowNum][0]+gv__3DigitEditBoxWidth+gv_alertRowLabelWidths[lv_rowNum][1]+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_labelAlignmentSpacer+gv_sectionLabelHeight+lv_rowNum*gv_menuItemHeight), StringExternal("Param/Value/92B1D26F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_alertMenuDialogItemGrid[lv_rowNum][5] = DialogControlLastCreated();
    lv_rowNum += 1;
    libNtve_gf_CreateDialogItemButton(gv_alertMenuDialog, gv_startButtonWidth, gv_startButtonHeight, c_anchorBottom, 0, gv_menuPadding, StringExternal("Param/Value/CD009FD2"), StringExternal("Param/Value/699F29D6"), "");
    gv_startButton[1] = DialogControlLastCreated();
}

void gf_CreateAlertMenuCheckbox (int lp_rowNumber) {
    // Implementation
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), gv_checkboxWidth, gv_checkboxHeight, c_anchorTopLeft, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight+lp_rowNumber*gv_checkboxHeight), StringExternal("Param/Value/85D3414C"), true);
    gv_alertMenuDialogItemGrid[lp_rowNumber][0] = DialogControlLastCreated();
}

void gf_CreateAlertMenuLabel (text lp_labelText, int lp_rowNum) {
    // Implementation
    TextExpressionSetToken("Param/Expression/539425D0", "A", lp_labelText);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_alertRowLabelWidths[lp_rowNum][0], gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_labelAlignmentSpacer+gv_sectionLabelHeight+lp_rowNum*gv_menuItemHeight), TextExpressionAssemble("Param/Expression/539425D0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_alertMenuDialogItemGrid[lp_rowNum][1] = DialogControlLastCreated();
}

void gf_CreateAlertMenuThresholdEditBox (int lp_editBoxWidth, int lp_rowNum) {
    // Implementation
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lp_editBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[lp_rowNum][0]), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight+lp_rowNum*gv_menuItemHeight));
    gv_alertMenuDialogItemGrid[lp_rowNum][2] = DialogControlLastCreated();
}

void gf_SetAlertCheckboxState (bool lp_markChecked, int lp_checkbox) {
    // Implementation
    if ((lp_markChecked == true)) {
        libNtve_gf_SetDialogItemChecked(lp_checkbox, true, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemChecked(lp_checkbox, false, PlayerGroupAll());
    }
}

void gf_EnableDisableAlertRow (bool lp_checked, int lp_rowNum, int lp_numRowItems) {
    int auto6C54BDE2_ae;
    int auto6C54BDE2_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto6C54BDE2_ae = lp_numRowItems;
    auto6C54BDE2_ai = 1;
    lv_i = 1;
    for ( ; ( (auto6C54BDE2_ai >= 0 && lv_i <= auto6C54BDE2_ae) || (auto6C54BDE2_ai <= 0 && lv_i >= auto6C54BDE2_ae) ) ; lv_i += auto6C54BDE2_ai ) {
        if ((lp_checked == true)) {
            DialogControlSetEnabled(gv_alertMenuDialogItemGrid[lp_rowNum][lv_i], PlayerGroupAll(), true);
        }
        else {
            DialogControlSetEnabled(gv_alertMenuDialogItemGrid[lp_rowNum][lv_i], PlayerGroupAll(), false);
        }
    }
}

void gf_InitializeBenchmarkDialog () {
    // Variable Declarations
    int lv_mainMenuIndex;

    // Variable Initialization

    // Implementation
    gf_BenchmarkDialogCreateDialogFrame();
    gf_CreateMenuSelectButtons(lv_mainMenuIndex);
    gf_BenchmarkDialogInitializeMatchupSelectionRow();
    gf_BenchmarkDialogInitializeBenchmarkSupplySection();
    gf_BenchmarkDialogInitializeBuildCompletionOptionsSection();
    gf_InitializeBenchmarkBuildOrderSection();
    gf_BenchmarkDialogCreateStartButton();
}

void gf_ShowBenchmarkDialog () {
    // Implementation
    DialogSetVisible(gv_benchmarkDialog, PlayerGroupAll(), true);
    gv_isBenchmarkAlertDialogOpen = true;
}

void gf_HideBenchmarkDialog () {
    // Implementation
    DialogSetVisible(gv_benchmarkDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_alertMenuDialog, PlayerGroupAll(), false);
    gv_isBenchmarkAlertDialogOpen = false;
}

void gf_UpdateFinalSupplyatGameTime () {
    // Variable Declarations
    int lv_minutes;
    int lv_seconds;

    // Variable Initialization

}

void gf_OpenBenchmarkDialogMainMenu () {
    // Implementation
    gv_isBenchmarkAlertDialogOpen = true;
    CinematicFade(false, 0.5, c_fadeStyleSquareRoot, Color(0.00, 0.00, 0.00), 0.0, false);
    gf_SelectBenchmarkMenu();
    gf_HideBenchmarkSupplyObjectives();
    gf_DestroyBenchmarkBuildOrderObjectives();
    DialogSetVisible(gv_helpDialog, PlayerGroupAll(), false);
    gv_isHelpDialogOpen = false;
    DialogSetVisible(gv_statsDialog, PlayerGroupAll(), false);
    gv_isStatsDialogOpen = false;
    DialogSetVisible(gv_postBuildReportDialog, PlayerGroupAll(), false);
    Wait(0.25, c_timeGame);
    gf_LoadBenchmarkMenuConfiguration(gf_GetCurrentlySelectedMatchupasBankSectionKey());
    gf_LoadAlertMenuConfiguration();
    if ((gf_DoesSavedBuildOrderExistForCurrentMatchup() == true)) {
        gf_EnablePracticeAgainstBenchmarkBuildOrderOptions();
    }
    else {
        gf_DisablePracticeAgainstBenchmarkBuildOrderOptions();
    }
    DialogSetVisible(gv_benchmarkDialog, PlayerGroupAll(), true);
    Wait(0.25, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    TimerRestart(gv_currentBuildBuildTimer);
    gf_ResetBenchmarkTimers();
    gf_PauseGame();
}

void gf_BenchmarkDialogCreateDialogFrame () {
    // Implementation
    DialogCreate(gv_benchmarkDialogWidth, gv_benchmarkDialogHeight, c_anchorCenter, 0, -150, true);
    gv_benchmarkDialog = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), gv_benchmarkDialogTitle);
    DialogSetTransparency(DialogLastCreated(), 0.0);
}

void gf_BenchmarkDialogCreateStartButton () {
    // Implementation
    libNtve_gf_CreateDialogItemButton(gv_benchmarkDialog, gv_startButtonWidth, gv_startButtonHeight, c_anchorBottom, 0, gv_menuPadding, StringExternal("Param/Value/84760B8B"), StringExternal("Param/Value/49A63E54"), "");
    gv_startButton[0] = DialogControlLastCreated();
}

void gf_BenchmarkDialogInitializeMatchupSelectionRow () {
    string auto524A68DE_val;

    // Variable Declarations
    text lv_x;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_benchmarkMenuSectionLabelNudge), StringExternal("Param/Value/2D3C7DC9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    auto524A68DE_val = PlayerRace(1);
    if (auto524A68DE_val == "Zerg") {
        lv_x = StringExternal("Param/Value/99F5183D");
    }
    else if (auto524A68DE_val == "Terr") {
        lv_x = StringExternal("Param/Value/DFC52DBF");
    }
    else if (auto524A68DE_val == "Prot") {
        lv_x = StringExternal("Param/Value/2400A4EF");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/FE359903", "A", lv_x);
    gf_CreateMatchupSelectionButton(TextExpressionAssemble("Param/Expression/FE359903"), -1);
    gv_matchupSelectionButtons[0] = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/0892D77F", "A", lv_x);
    gf_CreateMatchupSelectionButton(TextExpressionAssemble("Param/Expression/0892D77F"), 0);
    gv_matchupSelectionButtons[1] = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/9AC37339", "A", lv_x);
    gf_CreateMatchupSelectionButton(TextExpressionAssemble("Param/Expression/9AC37339"), 1);
    gv_matchupSelectionButtons[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemToggled(gv_matchupSelectionButtons[0], true, PlayerGroupAll());
}

void gf_CreateMatchupSelectionButton (text lp_buttonText, int lp_offsetPositionVariable) {
    // Variable Declarations
    text lv_formattedButtonText;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/28EB8F86", "A", lp_buttonText);
    lv_formattedButtonText = TextExpressionAssemble("Param/Expression/28EB8F86");
    libNtve_gf_CreateDialogItemButton(gv_benchmarkDialog, gv_matchupButtonWidth, gv_matchupButtonHeight, c_anchorTop, (lp_offsetPositionVariable*(gv_matchupButtonWidth+gv_matchupButtonSpacing)), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+8), StringExternal("Param/Value/4B6A2C26"), lv_formattedButtonText, "");
    libNtve_gf_SetDialogItemClickOnDown(DialogControlLastCreated(), true, PlayerGroupAll());
}

void gf_UpdateCurrentlySelectedMatchup () {
    int auto31D15147_ae;
    int auto31D15147_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto31D15147_ae = 2;
    auto31D15147_ai = 1;
    lv_i = 0;
    for ( ; ( (auto31D15147_ai >= 0 && lv_i <= auto31D15147_ae) || (auto31D15147_ai <= 0 && lv_i >= auto31D15147_ae) ) ; lv_i += auto31D15147_ai ) {
        if ((gv_matchupSelectionButtons[lv_i] != EventDialogControl())) {
            libNtve_gf_SetDialogItemToggled(gv_matchupSelectionButtons[lv_i], false, PlayerGroupAll());
        }
        else {
            gv_currentlySelectedMatchupIndex = lv_i;
            gv_currentlySelectedMatchupButton = gv_matchupSelectionButtons[lv_i];
        }
    }
}

void gf_BenchmarkDialogInitializeBenchmarkSupplySection () {
    int autoE8B15B54_ae;
    int autoE8B15B54_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_benchmarkMenuSectionLabelNudge+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer), StringExternal("Param/Value/507082F5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    autoE8B15B54_ae = 2;
    autoE8B15B54_ai = 1;
    lv_i = 0;
    for ( ; ( (autoE8B15B54_ai >= 0 && lv_i <= autoE8B15B54_ae) || (autoE8B15B54_ai <= 0 && lv_i >= autoE8B15B54_ae) ) ; lv_i += autoE8B15B54_ai ) {
        TextExpressionSetToken("Param/Expression/86EE8952", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gf_GetTotalSecondsforMinSeconds(gv_supplyBenchmarks[lv_i].lv_benchmarkTimeMin, gv_supplyBenchmarks[lv_i].lv_benchmarkTimeSeconds)));
        gf_CreateSupplyValueEditBox(TextExpressionAssemble("Param/Expression/86EE8952"), lv_i, gv_benchmarkSupplyDefaults[lv_i]);
    }
}

void gf_CreateSupplyValueEditBox (text lp_labelText, int lp_rowNumber, int lp_defaultValue) {
    // Implementation
    DialogControlCreate(gv_benchmarkDialog, c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__3DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+(lp_rowNumber+1)*gv_benchmarkEditBoxHeight));
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(lp_defaultValue), PlayerGroupAll());
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 200.0, PlayerGroupAll());
    gv_benchmarkSupplyEditBoxes[lp_rowNumber] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_benchmarkDialog, gv_benchmarkSupplyValueLabelWidth, gv_benchmarkSupplyValueLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv__3DigitEditBoxWidth+gv_benchmarkSupplyValueSpacing+gv_menuItemRowIndent), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+(1+lp_rowNumber)*gv_benchmarkSupplyValueLabelHeight), lp_labelText, ColorWithAlpha(0,0,0,0), false, 2.0);
}

void gf_BenchmarkDialogInitializeBuildCompletionOptionsSection () {
    // Variable Declarations
    int lv_endBuildAtSectionLabelYPadding;
    int lv_endBuildAtPulldownYPadding;

    // Variable Initialization
    lv_endBuildAtSectionLabelYPadding = (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_sectionLabelHeight+gv_benchmarkMenuSectionLabelNudge+gv_labelAlignmentSpacer+3*gv_benchmarkSupplyValueLabelHeight);
    lv_endBuildAtPulldownYPadding = (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+4*gv_benchmarkEditBoxHeight+gv_sectionLabelHeight);

    // Implementation
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, gv_menuPadding, lv_endBuildAtSectionLabelYPadding, StringExternal("Param/Value/E23A8A3F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_endBuildLabelWidth, gv_benchmarkSupplyValueLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent), (lv_endBuildAtPulldownYPadding+gv_labelAlignmentSpacer), StringExternal("Param/Value/0F376BB5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_endBuildPulldown = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_endBuildPulldownWidth, gv_menuItemHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent+gv_endBuildLabelWidth), lv_endBuildAtPulldownYPadding);
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F1EFDEA1"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/AD584A2F"));
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__2DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent+gv_endBuildLabelWidth+gv_endBuildPulldownWidth), lv_endBuildAtPulldownYPadding);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_benchmarkEndBuildatGameTimeMinutes), PlayerGroupAll());
    gv_endBuildMinutesEditBox = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_minutesLabelWidth, gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent+gv_endBuildLabelWidth+gv_endBuildPulldownWidth+gv__2DigitEditBoxWidth), (lv_endBuildAtPulldownYPadding+gv_labelAlignmentSpacer), StringExternal("Param/Value/36CC771D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_endBuildMinutesLabel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__2DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent+gv_endBuildLabelWidth+gv_endBuildPulldownWidth+gv__2DigitEditBoxWidth+gv_minutesLabelWidth), lv_endBuildAtPulldownYPadding);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_benchmarkEndBuildatGameTimeSeconds), PlayerGroupAll());
    gv_endBuildSecondsEditBox = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_secondsLabelWidth, gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent+gv_endBuildLabelWidth+gv_endBuildPulldownWidth+gv__2DigitEditBoxWidth+gv_minutesLabelWidth+gv__2DigitEditBoxWidth), (lv_endBuildAtPulldownYPadding+gv_labelAlignmentSpacer), StringExternal("Param/Value/3513F291"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_endBuildSecondsLabel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gf_BenchmarkDialogCreateMaxSupplyatTimeRow();
    gf_BenchmarkDialogCreateFinalSupplyatGameTimeRow();
}

void gf_BenchmarkDialogCreateMaxSupplyatTimeRow () {
    // Variable Declarations
    int lv_maxTimeRowYPadding;

    // Variable Initialization
    lv_maxTimeRowYPadding = (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_sectionLabelHeight+5*gv_benchmarkEditBoxHeight);

    // Implementation
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_maxTimeLabelWidth, gv_benchmarkSupplyValueLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent), (lv_maxTimeRowYPadding+gv_labelAlignmentSpacer), StringExternal("Param/Value/6B6F2419"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_maxTimeEndBuildLabel = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__2DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent+gv_maxTimeLabelWidth), lv_maxTimeRowYPadding);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_benchmarkMaxSupplyMinutes), PlayerGroupAll());
    gv_maxTimeMinutesEditBox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_minutesLabelWidth, gv_benchmarkSupplyValueLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent+gv_maxTimeLabelWidth+gv__2DigitEditBoxWidth), (lv_maxTimeRowYPadding+gv_labelAlignmentSpacer), StringExternal("Param/Value/B80AD986"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_maxTimeMinutesLabel = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__2DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent+gv_maxTimeLabelWidth+gv__2DigitEditBoxWidth+gv_minutesLabelWidth), lv_maxTimeRowYPadding);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_benchmarkMaxSupplySeconds), PlayerGroupAll());
    gv_maxTimeSecondsEditBox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_benchmarkDialog, gv_secondsLabelWidth, gv_benchmarkSupplyValueLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent+gv_maxTimeLabelWidth+gv__2DigitEditBoxWidth+gv_minutesLabelWidth+gv__2DigitEditBoxWidth), (lv_maxTimeRowYPadding+gv_labelAlignmentSpacer), StringExternal("Param/Value/76739197"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_maxTimeSecondsLabel = DialogControlLastCreated();
}

void gf_BenchmarkDialogCreateFinalSupplyatGameTimeRow () {
    // Variable Declarations
    int lv_supplyAtTimeRowYPadding;

    // Variable Initialization
    lv_supplyAtTimeRowYPadding = (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_sectionLabelHeight+5*gv_benchmarkEditBoxHeight);

    // Implementation
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_finalSupplyAtGameTimeLabelWidth, gv_benchmarkSupplyValueLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent), (lv_supplyAtTimeRowYPadding+gv_labelAlignmentSpacer), StringExternal("Param/Value/EBB038EE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_finalSupplyAtGameTimeLabel = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__3DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent+gv_finalSupplyAtGameTimeLabelWidth), lv_supplyAtTimeRowYPadding);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_benchmarkMaxSupplyMinutes), PlayerGroupAll());
    gv_finalSupplyAtGameTimeEditBox = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/515E5E9E", "A", IntToText(0));
    TextExpressionSetToken("Param/Expression/515E5E9E", "B", IntToText(0));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, gv_benchmarkSupplyValueLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent+gv_finalSupplyAtGameTimeLabelWidth+gv__3DigitEditBoxWidth), (lv_supplyAtTimeRowYPadding+gv_labelAlignmentSpacer), TextExpressionAssemble("Param/Expression/515E5E9E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_finalSupplyAtGameTimeTimeTextLabel = DialogControlLastCreated();
}

void gf_BenchmarkDialogToggleMaxSupplyatTimeRowVisible () {
    // Implementation
    DialogControlSetVisible(gv_finalSupplyAtGameTimeLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_finalSupplyAtGameTimeEditBox, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_finalSupplyAtGameTimeTimeTextLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_maxTimeEndBuildLabel, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_maxTimeMinutesEditBox, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_maxTimeMinutesLabel, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_maxTimeSecondsEditBox, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_maxTimeSecondsLabel, PlayerGroupAll(), true);
}

void gf_BenchmarkDialogToggleFinalSupplyatGameTimeRowVisible () {
    // Implementation
    DialogControlSetVisible(gv_maxTimeEndBuildLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_maxTimeMinutesEditBox, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_maxTimeMinutesLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_maxTimeSecondsEditBox, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_maxTimeSecondsLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_finalSupplyAtGameTimeLabel, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_finalSupplyAtGameTimeEditBox, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_finalSupplyAtGameTimeTimeTextLabel, PlayerGroupAll(), true);
}

void gf_InitializeBenchmarkBuildOrderSection () {
    // Variable Declarations
    int lv_rowNum;
    int lv_benchmarkBuildOrderSectionEditBoxYPadding;
    int lv_benchmarkBuildOrderSectionLabelYPadding;

    // Variable Initialization
    lv_rowNum = 6;
    lv_benchmarkBuildOrderSectionEditBoxYPadding = (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+lv_rowNum*gv_benchmarkEditBoxHeight+gv_sectionLabelHeight);
    lv_benchmarkBuildOrderSectionLabelYPadding = (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+lv_rowNum*gv_benchmarkSupplyValueLabelHeight+gv_sectionLabelHeight+gv_labelAlignmentSpacer);

    // Implementation
    gf_CreatePracticeAgainstBuildOrderRow();
    gf_CreateDisplayBuildOrderHintsRow();
    gf_CreateDisplayPerformanceFeedbackRow();
    if ((gf_DoesSavedBuildOrderExistForCurrentMatchup() == true)) {
        gf_EnablePracticeAgainstBenchmarkBuildOrderOptions();
    }
    else {
        gf_DisablePracticeAgainstBenchmarkBuildOrderOptions();
    }
}

void gf_CreatePracticeAgainstBuildOrderRow () {
    // Variable Declarations
    int lv_rowNum;
    int lv_benchmarkBuildOrderSectionEditBoxYPadding;
    int lv_benchmarkBuildOrderSectionLabelYPadding;

    // Variable Initialization
    lv_rowNum = 6;
    lv_benchmarkBuildOrderSectionEditBoxYPadding = (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+lv_rowNum*gv_benchmarkEditBoxHeight+gv_sectionLabelHeight);
    lv_benchmarkBuildOrderSectionLabelYPadding = (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+lv_rowNum*gv_benchmarkSupplyValueLabelHeight+gv_sectionLabelHeight+gv_labelAlignmentSpacer);

    // Implementation
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCheckBox);
    gv_practiceAgainstSavedBuildOrderCheckbox = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_checkboxWidth, gv_menuItemHeight);
    libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent), lv_benchmarkBuildOrderSectionEditBoxYPadding);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/7FDBA57B"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_practiceAgainstSavedBuildOrderLabelWidth, gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent+gv_checkboxWidth), lv_benchmarkBuildOrderSectionLabelYPadding, StringExternal("Param/Value/C981768C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_practiceAgainstSavedBuildOrderLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_practiceAgainstSavedBuildOrderClearButtonWidth, gv_practiceAgainstSavedBuildOrderClearButtonHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent+gv_checkboxWidth+gv_practiceAgainstSavedBuildOrderLabelWidth-5), (lv_benchmarkBuildOrderSectionEditBoxYPadding+6), StringExternal("Param/Value/F6915731"), StringExternal("Param/Value/36C3443F"), "");
    gv_practiceAgainstSavedBuildOrderClearButton = DialogControlLastCreated();
}

void gf_CreateDisplayBuildOrderHintsRow () {
    // Implementation
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCheckBox);
    gv_displayBuildOrderHintsCheckbox = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_checkboxWidth, gv_menuItemHeight);
    libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+7*gv_benchmarkEditBoxHeight+gv_sectionLabelHeight));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/5777D4C2"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_displayBuildOrderHintsLabelWidth, gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent+gv_checkboxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+7*gv_benchmarkSupplyValueLabelHeight+gv_sectionLabelHeight), StringExternal("Param/Value/1BB4532B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_displayBuildOrderHintsLabel = DialogControlLastCreated();
}

void gf_CreateDisplayPerformanceFeedbackRow () {
    // Variable Declarations
    int lv_rowNum;

    // Variable Initialization
    lv_rowNum = 8;

    // Implementation
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCheckBox);
    gv_displayBuildOrderPerformanceFeedbackCheckbox = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_checkboxWidth, gv_menuItemHeight);
    libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+lv_rowNum*gv_benchmarkEditBoxHeight+gv_sectionLabelHeight));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/92BB2FB9"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_displayBuildOrderPerformanceFeedbackLabelWidth, gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent+gv_checkboxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+lv_rowNum*gv_benchmarkSupplyValueLabelHeight+gv_sectionLabelHeight), StringExternal("Param/Value/3BB83C21"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_displayBuildOrderPerformanceFeedbackLabel = DialogControlLastCreated();
}

void gf_EnablePracticeAgainstBenchmarkBuildOrderOptions () {
    // Implementation
    DialogControlSetEnabled(gv_practiceAgainstSavedBuildOrderCheckbox, PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_practiceAgainstSavedBuildOrderLabel, PlayerGroupAll(), true);
    gf_EvaluateAndDisableEnableBuildHintsOptions();
}

void gf_DisablePracticeAgainstBenchmarkBuildOrderOptions () {
    // Implementation
    DialogControlSetEnabled(gv_practiceAgainstSavedBuildOrderCheckbox, PlayerGroupAll(), false);
    DialogControlSetEnabled(gv_practiceAgainstSavedBuildOrderLabel, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemChecked(gv_practiceAgainstSavedBuildOrderCheckbox, false, PlayerGroupAll());
    gf_EvaluateAndDisableEnableBuildHintsOptions();
}

void gf_EvaluateAndDisableEnableBuildHintsOptions () {
    // Implementation
    if ((libNtve_gf_DialogItemIsChecked(gv_practiceAgainstSavedBuildOrderCheckbox, 1) == true)) {
        DialogControlSetEnabled(gv_displayBuildOrderHintsCheckbox, PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_displayBuildOrderHintsLabel, PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_displayBuildOrderPerformanceFeedbackCheckbox, PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_displayBuildOrderPerformanceFeedbackLabel, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetEnabled(gv_displayBuildOrderHintsCheckbox, PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_displayBuildOrderHintsLabel, PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_displayBuildOrderPerformanceFeedbackCheckbox, PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_displayBuildOrderPerformanceFeedbackLabel, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemChecked(gv_displayBuildOrderHintsCheckbox, false, PlayerGroupAll());
        libNtve_gf_SetDialogItemChecked(gv_displayBuildOrderPerformanceFeedbackCheckbox, false, PlayerGroupAll());
    }
}

void gf_SelectAlertMenu () {
    int auto2BD4AF57_ae;
    int auto2BD4AF57_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto2BD4AF57_ae = 1;
    auto2BD4AF57_ai = 1;
    lv_i = 0;
    for ( ; ( (auto2BD4AF57_ai >= 0 && lv_i <= auto2BD4AF57_ae) || (auto2BD4AF57_ai <= 0 && lv_i >= auto2BD4AF57_ae) ) ; lv_i += auto2BD4AF57_ai ) {
        libNtve_gf_SetDialogItemToggled(gv_benchmarksMenuButton[lv_i], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_alertMenuButton[lv_i], true, PlayerGroupAll());
    }
    DialogSetVisible(gv_benchmarkDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_alertMenuDialog, PlayerGroupAll(), true);
}

void gf_SelectBenchmarkMenu () {
    int auto1FD49190_ae;
    int auto1FD49190_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto1FD49190_ae = 1;
    auto1FD49190_ai = 1;
    lv_i = 0;
    for ( ; ( (auto1FD49190_ai >= 0 && lv_i <= auto1FD49190_ae) || (auto1FD49190_ai <= 0 && lv_i >= auto1FD49190_ae) ) ; lv_i += auto1FD49190_ai ) {
        libNtve_gf_SetDialogItemToggled(gv_alertMenuButton[lv_i], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_benchmarksMenuButton[lv_i], true, PlayerGroupAll());
    }
    DialogSetVisible(gv_alertMenuDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_benchmarkDialog, PlayerGroupAll(), true);
}

void gf_CreateMenuSelectButtons (int lp_menuIndex) {
    // Implementation
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_menuSelectButtonWidth, gv_menuSelectButtonHeight, c_anchorTop, (-(gv_menuSelectButtonWidth/2)), 0, StringExternal("Param/Value/5B6E2BC7"), StringExternal("Param/Value/2773FF33"), "");
    libNtve_gf_SetDialogItemClickOnDown(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemToggled(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_benchmarksMenuButton[lp_menuIndex] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_menuSelectButtonWidth, gv_menuSelectButtonHeight, c_anchorTop, (gv_menuSelectButtonWidth/2), 0, StringExternal("Param/Value/9DD48295"), StringExternal("Param/Value/54E2AB67"), "");
    libNtve_gf_SetDialogItemClickOnDown(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_alertMenuButton[lp_menuIndex] = DialogControlLastCreated();
}

void gf_ResetBuildOrderListBox (int lp_listBox) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    DialogControlRemoveAllItems(lp_listBox, PlayerGroupAll());
}

void gf_UpdateBuildOrderListBoxwithCurrentBuild (int lp_listBox) {
    int autoF990DA09_ae;
    int autoF990DA09_ai;

    // Variable Declarations
    int lv_maxBuildStepNum;
    int lv_i;

    // Variable Initialization

    // Implementation
    lv_maxBuildStepNum = (gv_currentBuildOrderStepCursor - 1);
    autoF990DA09_ae = lv_maxBuildStepNum;
    autoF990DA09_ai = 1;
    lv_i = 0;
    for ( ; ( (autoF990DA09_ai >= 0 && lv_i <= autoF990DA09_ae) || (autoF990DA09_ai <= 0 && lv_i >= autoF990DA09_ae) ) ; lv_i += autoF990DA09_ai ) {
        DialogControlAddItem(lp_listBox, PlayerGroupAll(), gf_GetCurrentBuildOrderStepText(lv_i));
    }
}

void gf_CreateHelpDialog () {
    // Variable Declarations
    int lv_rowNum;

    // Variable Initialization

    // Implementation
    DialogCreate(gv_benchmarkDialogWidth, gv_benchmarkDialogHeight, c_anchorCenter, 0, -150, true);
    gv_helpDialog = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), gv_helpDialogTitle);
    DialogSetTransparency(DialogLastCreated(), 0.0);
    gf_CreateHelpDialogHeadingRow();
    gf_CreateHelpInfoRow(StringExternal("Param/Value/0D7071BE"), StringExternal("Param/Value/B36B4059"), StringExternal("Param/Value/EFA43440"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreateHelpInfoRow(StringExternal("Param/Value/D498D14D"), StringExternal("Param/Value/D75B7086"), StringExternal("Param/Value/A963FAF3"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreateHelpInfoRow(StringExternal("Param/Value/6639460A"), StringExternal("Param/Value/5AC1BD33"), StringExternal("Param/Value/945362B1"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreateHelpInfoRow(StringExternal("Param/Value/1AD5555E"), StringExternal("Param/Value/F9EACEB5"), StringExternal("Param/Value/93AFCE51"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreateHelpInfoRow(StringExternal("Param/Value/732FD0CC"), StringExternal("Param/Value/E709BC6E"), StringExternal("Param/Value/7A5AB46F"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreateHelpInfoRow(StringExternal("Param/Value/CAABB127"), StringExternal("Param/Value/DF04A6CB"), StringExternal("Param/Value/E45AD521"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreateHelpInfoRow(StringExternal("Param/Value/5C5B6190"), StringExternal("Param/Value/3E7A53DD"), StringExternal("Param/Value/9CD7E854"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreateHelpInfoRow(StringExternal("Param/Value/2EFCFDB5"), StringExternal("Param/Value/1234E292"), StringExternal("Param/Value/62BC3490"), lv_rowNum);
    lv_rowNum += 1;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_startButtonWidth, gv_startButtonHeight, c_anchorBottom, 0, gv_menuPadding, StringExternal("Param/Value/87960E2D"), StringExternal("Param/Value/208CDB48"), "");
    gv_helpOkButton = DialogControlLastCreated();
}

void gf_CreateHelpDialogHeadingRow () {
    // Implementation
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, (gv_menuPadding), (gv_menuPadding+gv_helpDialogTitleSpacer), StringExternal("Param/Value/CBB81B85"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_helpCommandLabelWidth+gv_menuItemRowIndent), (gv_menuPadding+gv_helpDialogTitleSpacer), StringExternal("Param/Value/7A79B9B9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent+gv_helpCommandLabelWidth+gv_helpHotkeyLabelWidth), (gv_menuPadding+gv_helpDialogTitleSpacer), StringExternal("Param/Value/99445BE1"), ColorWithAlpha(0,0,0,0), false, 2.0);
}

void gf_CreateHelpInfoRow (text lp_commandText, text lp_hotkeyText, text lp_descriptionText, int lp_rowNum) {
    // Variable Declarations
    int lv_rowXOffset;
    int lv_rowYOffset;

    // Variable Initialization

    // Implementation
    lv_rowXOffset = (gv_menuPadding+gv_menuItemRowIndent);
    lv_rowYOffset = (gv_menuPadding+gv_helpDialogTitleSpacer+gv_sectionLabelHeight+lp_rowNum*gv_helpDialogItemHeight);
    TextExpressionSetToken("Param/Expression/2D6CF9BC", "A", lp_commandText);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_helpCommandLabelWidth, gv_helpDialogItemHeight, c_anchorTopLeft, lv_rowXOffset, lv_rowYOffset, TextExpressionAssemble("Param/Expression/2D6CF9BC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    TextExpressionSetToken("Param/Expression/D6AE440F", "A", lp_hotkeyText);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_helpHotkeyLabelWidth, gv_helpDialogItemHeight, c_anchorTopLeft, (lv_rowXOffset+gv_helpCommandLabelWidth), lv_rowYOffset, TextExpressionAssemble("Param/Expression/D6AE440F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    TextExpressionSetToken("Param/Expression/0684E3AA", "A", lp_descriptionText);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_helpDescriptionLabelWidth, gv_helpDialogItemHeight, c_anchorTopLeft, (lv_rowXOffset+gv_helpCommandLabelWidth+gv_helpHotkeyLabelWidth), lv_rowYOffset, TextExpressionAssemble("Param/Expression/0684E3AA"), ColorWithAlpha(0,0,0,0), false, 2.0);
}

void gf_CloseHelpDialogandUnpause () {
    // Implementation
    DialogSetVisible(gv_helpDialog, PlayerGroupAll(), false);
    gf_UnpauseGame();
    Wait(0.1, c_timeGame);
    gv_isHelpDialogOpen = false;
}

void gf_InitializePostBuildReportDialog () {
    // Variable Declarations
    int lv_labelHeightOffset;

    // Variable Initialization
    lv_labelHeightOffset = (gv_menuPadding+gv_benchmarkDialogTitleSpacer);

    // Implementation
    gf_CreatePostBuildReportDialog();
    gf_CreatePostBuildReportBuildOverviewLabels();
    gf_CreatePostBuildReportSupplyBenchmarkSection();
    gf_CreatePostBuildReportStatsSection();
    gf_CreatePostBuildReportBuildOrderListBox();
    gf_CreatePostBuildReportMuteCheckbox();
}

void gf_CreatePostBuildReportDialog () {
    // Implementation
    DialogCreate(gv_postBuildReportDialogWidth, gv_benchmarkDialogHeight, c_anchorCenter, 0, -150, true);
    gv_postBuildReportDialog = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), gv_postBuildReportDialogTitle);
    DialogSetTransparency(DialogLastCreated(), 0.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportMatchupLabelWidth, gv_postBuildReportMatchupLabelHeight, c_anchorTopLeft, gv_postBuildReportMatchupLabelXOffset, gv_postBuildReportMatchupLabelYOffset, StringExternal("Param/Value/CAB58423"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportMatchupLabels[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportMatchupLabelWidth, gv_postBuildReportMatchupLabelHeight, c_anchorTopRight, (gv_postBuildReportMatchupLabelXOffset), gv_postBuildReportMatchupLabelYOffset, StringExternal("Param/Value/392C1E2D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportMatchupLabels[1] = DialogControlLastCreated();
}

void gf_CreatePostBuildReportBuildOverviewLabels () {
    // Variable Declarations
    int lv_overviewSectionXPadding;
    int lv_overviewSectionYPadding;

    // Variable Initialization
    lv_overviewSectionXPadding = (gv_menuPadding);
    lv_overviewSectionYPadding = (gv_menuPadding+gv_postBuildReportDialogTitleSpacer);

    // Implementation
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportBuildOverviewLabelNameWidth, gv_sectionLabelHeight, c_anchorTopLeft, lv_overviewSectionXPadding, lv_overviewSectionYPadding, StringExternal("Param/Value/1E1892EE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gf_CreatePostBuildReportBuildOverviewAnalysisRow(TextExpressionAssemble("Param/Expression/25AF69B7"), 0);
    gv_postBuildReportBuildOverviewTimeLabel = DialogControlLastCreated();
    gf_CreatePostBuildReportBuildOverviewAnalysisRow(TextExpressionAssemble("Param/Expression/0F620834"), 1);
    gv_postBuildReportBuildOverviewBenchmarkCompletionLabel = DialogControlLastCreated();
    gf_CreatePostBuildReportBuildOverviewAnalysisRow(TextExpressionAssemble("Param/Expression/BF49CC8A"), 2);
    gv_postBuildReportBuildOverviewBuildStepNumLabel = DialogControlLastCreated();
}

void gf_CreatePostBuildReportBuildOverviewAnalysisRow (text lp_rowLabelName, int lp_rowNum) {
    // Variable Declarations
    int lv_overviewSectionRowXPadding;
    int lv_overviewSectionRowYPadding;

    // Variable Initialization
    lv_overviewSectionRowXPadding = (gv_menuPadding);
    lv_overviewSectionRowYPadding = (gv_menuPadding+gv_postBuildReportDialogTitleSpacer+(lp_rowNum*gv_postBuildReportBuildOverviewLabelHeight)+10+gv_sectionLabelHeight);

    // Implementation
    TextExpressionSetToken("Param/Expression/39BDFB1A", "A", lp_rowLabelName);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportBuildOverviewLabelNameWidth, gv_postBuildReportBuildOverviewLabelHeight, c_anchorTopLeft, (lv_overviewSectionRowXPadding+gv_menuItemRowIndent), lv_overviewSectionRowYPadding, TextExpressionAssemble("Param/Expression/39BDFB1A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportBuildOverviewLabelValueWidth, gv_postBuildReportBuildOverviewLabelHeight, c_anchorTopLeft, (lv_overviewSectionRowXPadding+gv_menuItemRowIndent+gv_postBuildReportBuildOverviewLabelNameWidth), lv_overviewSectionRowYPadding, StringExternal("Param/Value/30A72DE2"), ColorWithAlpha(0,0,0,0), false, 2.0);
}

void gf_CreatePostBuildReportSupplyBenchmarkSection () {
    // Variable Declarations
    int lv_benchmarkSectionXPadding;
    int lv_benchmarkSectionYPadding;

    // Variable Initialization
    lv_benchmarkSectionXPadding = ((gv_postBuildReportDialogWidth/2));
    lv_benchmarkSectionYPadding = (gv_menuPadding+gv_postBuildReportDialogTitleSpacer);

    // Implementation
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, lv_benchmarkSectionXPadding, lv_benchmarkSectionYPadding, StringExternal("Param/Value/528A76A8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportBenchmarksSupplyHeadingWidth, gv_postBuildReportStatLabelHeight, c_anchorTopLeft, (lv_benchmarkSectionXPadding+gv_postBuildReportBenchmarkHeadingWidth), (lv_benchmarkSectionYPadding+10), StringExternal("Param/Value/ABBB9795"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_postBuildReportButtonWidth, gv_postBuildReportButtonHeight, c_anchorTopRight, gv_menuPadding, (lv_benchmarkSectionYPadding), StringExternal("Param/Value/6651D325"), StringExternal("Param/Value/1A352483"), "");
    gv_postBuildReportBenchmarkUpdateButton = DialogControlLastCreated();
    gf_CreatePostBuildReportSupplyBenchmarkAnalysisRow(0);
    gf_CreatePostBuildReportSupplyBenchmarkAnalysisRow(1);
    gf_CreatePostBuildReportSupplyBenchmarkAnalysisRow(2);
    gf_CreatePostBuildReportSupplyBenchmarkAnalysisRow(3);
}

void gf_CreatePostBuildReportSupplyBenchmarkAnalysisRow (int lp_rowNumber) {
    // Variable Declarations
    int lv_benchmarkSectionRowXPadding;
    int lv_benchmarkSectionRowYPadding;

    // Variable Initialization
    lv_benchmarkSectionRowXPadding = ((gv_postBuildReportDialogWidth/2)+gv_menuItemRowIndent+45);
    lv_benchmarkSectionRowYPadding = (gv_menuPadding+gv_postBuildReportDialogTitleSpacer+gv_sectionLabelHeight+5);

    // Implementation
    TextExpressionSetToken("Param/Expression/03085794", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gf_GetTotalSecondsforMinSeconds(gv_supplyBenchmarks[lp_rowNumber].lv_benchmarkTimeMin, gv_supplyBenchmarks[lp_rowNumber].lv_benchmarkTimeSeconds)));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportBenchmarksSupplyHeadingWidth, gv_postBuildReportStatLabelHeight, c_anchorTopLeft, (lv_benchmarkSectionRowXPadding), (lv_benchmarkSectionRowYPadding+(lp_rowNumber*gv_postBuildReportBenchmarkAnalysisRowHeight)), TextExpressionAssemble("Param/Expression/03085794"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportDialogItems[gv_postBuildReportBenchmarksIndex][lp_rowNumber][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportBenchmarkAnalysisRowLabelWidth, gv_postBuildReportStatLabelHeight, c_anchorTopLeft, (lv_benchmarkSectionRowXPadding+gv_postBuildReportBenchmarksSupplyHeadingWidth), (lv_benchmarkSectionRowYPadding+(lp_rowNumber*gv_postBuildReportBenchmarkAnalysisRowHeight)), StringExternal("Param/Value/2FE0F67D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportDialogItems[gv_postBuildReportBenchmarksIndex][lp_rowNumber][1] = DialogControlLastCreated();
}

void gf_CreatePostBuildReportStatsSection () {
    int auto1CAE5652_ae;
    int auto1CAE5652_ai;

    // Variable Declarations
    int lv_rowNum;

    // Variable Initialization

    // Implementation
    gf_CreatePostBuildReportStatSectionHeaderLabels();
    auto1CAE5652_ae = 10;
    auto1CAE5652_ai = 1;
    lv_rowNum = 0;
    for ( ; ( (auto1CAE5652_ai >= 0 && lv_rowNum <= auto1CAE5652_ae) || (auto1CAE5652_ai <= 0 && lv_rowNum >= auto1CAE5652_ae) ) ; lv_rowNum += auto1CAE5652_ai ) {
        gf_CreatePostBuildReportStatAnalysisRow(lv_rowNum);
    }
}

void gf_CreatePostBuildReportStatSectionHeaderLabels () {
    // Variable Declarations
    int lv_labelHeightOffset;

    // Variable Initialization
    lv_labelHeightOffset = (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_postBuildReportBuildOverviewSectionHeight);

    // Implementation
    TextExpressionSetToken("Param/Expression/14A9E66D", "A", StringExternal("Param/Value/F716237B"));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatLabelWidth, gv_postBuildReportStatLabelHeight, c_anchorTopLeft, gv_menuPadding, (lv_labelHeightOffset-10), TextExpressionAssemble("Param/Expression/14A9E66D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatValueWidth, gv_postBuildReportStatLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth), lv_labelHeightOffset, StringExternal("Param/Value/F5E658E8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatBestWidth, gv_postBuildReportStatLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth+gv_postBuildReportStatValueWidth), lv_labelHeightOffset, StringExternal("Param/Value/F85B1717"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatPercentDifferenceWidth, gv_postBuildReportStatLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth+gv_postBuildReportStatValueWidth+gv_postBuildReportStatBestWidth), lv_labelHeightOffset, StringExternal("Param/Value/E400253A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_buildOrderListBoxWidth, gv_postBuildReportStatLabelHeight, c_anchorTopRight, (gv_menuPadding), lv_labelHeightOffset, StringExternal("Param/Value/C9C07C6F"), ColorWithAlpha(0,0,0,0), false, 2.0);
}

void gf_CreatePostBuildReportStatAnalysisRow (int lp_rowOffset) {
    // Variable Declarations
    int lv_yOffset;

    // Variable Initialization
    lv_yOffset = (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_postBuildReportBuildOverviewSectionHeight+gv_sectionLabelHeight+lp_rowOffset*gv_postBuildReportStatLabelHeight);

    // Implementation
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatLabelWidth, gv_postBuildReportStatLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuItemRowIndent), lv_yOffset, StringExternal("Param/Value/90E834B6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportDialogItems[gv_postBuildReportStatsIndex][lp_rowOffset][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatValueWidth, gv_postBuildReportStatLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth), lv_yOffset, StringExternal("Param/Value/DE7D7FEB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportDialogItems[gv_postBuildReportStatsIndex][lp_rowOffset][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatBestWidth, gv_postBuildReportStatLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth+gv_postBuildReportStatValueWidth), lv_yOffset, StringExternal("Param/Value/B3580BC2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportDialogItems[gv_postBuildReportStatsIndex][lp_rowOffset][2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatPercentDifferenceWidth, gv_postBuildReportStatLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth+gv_postBuildReportStatValueWidth+gv_postBuildReportStatBestWidth), lv_yOffset, StringExternal("Param/Value/A474714C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportDialogItems[gv_postBuildReportStatsIndex][lp_rowOffset][3] = DialogControlLastCreated();
}

void gf_CreatePostBuildReportBuildOrderListBox () {
    // Implementation
    gf_CreatePostBuildReportBuildOrderSaveClearButtons();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_postBuildReportBuildOrderListBoxWidth, gv_postBuildReportBuildOrderListBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_postBuildReportBuildOverviewSectionHeight+gv_sectionLabelHeight));
    gv_postBuildReportBuildOrderListBox = DialogControlLastCreated();
}

void gf_CreatePostBuildReportBuildOrderSaveClearButtons () {
    // Variable Declarations
    int lv_buttonXPadding;
    int lv_buttonYPadding;

    // Variable Initialization
    lv_buttonXPadding = gv_menuPadding;
    lv_buttonYPadding = (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_postBuildReportBuildOverviewSectionHeight-15);

    // Implementation
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_postBuildReportButtonWidth, gv_postBuildReportButtonHeight, c_anchorTopRight, (lv_buttonXPadding+gv_postBuildReportButtonWidth
), lv_buttonYPadding, StringExternal("Param/Value/6781271F"), StringExternal("Param/Value/81D36081"), "");
    gv_postBuildReportSaveBuildButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_postBuildReportButtonWidth, gv_postBuildReportButtonHeight, c_anchorTopRight, lv_buttonXPadding, lv_buttonYPadding, StringExternal("Param/Value/F104DC19"), StringExternal("Param/Value/755A8EDF"), "");
    gv_postBuildReportClearBuildButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_startButtonWidth, gv_startButtonHeight, c_anchorBottom, 0, gv_menuPadding, StringExternal("Param/Value/2C18426B"), StringExternal("Param/Value/12E7CB88"), "");
    gv_backToMenuButton = DialogControlLastCreated();
}

void gf_CreatePostBuildReportMuteCheckbox () {
    // Variable Declarations
    int lv_xPadding;
    int lv_yPadding;

    // Variable Initialization
    lv_xPadding = 10;
    lv_yPadding = 18;

    // Implementation
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), gv_checkboxWidth, gv_checkboxHeight, c_anchorBottomRight, (lv_xPadding+gv_postBuildReportMuteButtonLabelWidth-6), (lv_yPadding), StringExternal("Param/Value/27DF60F3"), false);
    gv_postBuildReportMuteButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportMuteButtonLabelWidth, gv_postBuildReportMuteButtonLabelHeight, c_anchorBottomRight, lv_xPadding, (lv_yPadding-1), StringExternal("Param/Value/77F25FDB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gf_LoadBooleanFromBankIfKeyisSetElseDefault(gv_postBuildReportMuteButton, gv_postBuildReportMuteButtonKey, gv_configurationOptionsSectionKey, false);
    if ((libNtve_gf_DialogItemIsChecked(gv_postBuildReportMuteButton, 1) == true)) {
        gv_muteVictoryFanfare = true;
    }
    else {
        gv_muteVictoryFanfare = false;
    }
}

void gf_UpdatePostBuildMatchupText () {
    // Implementation
    libNtve_gf_SetDialogItemTextWriteout(gv_postBuildReportMatchupLabels[0], true, PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteoutDuration(gv_postBuildReportMatchupLabels[0], 0.3, PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/35C1E315", "A", gf_GetCurrentlySelectedMatchupasText());
    libNtve_gf_SetDialogItemText(gv_postBuildReportMatchupLabels[0], TextExpressionAssemble("Param/Expression/35C1E315"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteout(gv_postBuildReportMatchupLabels[1], true, PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteoutDuration(gv_postBuildReportMatchupLabels[1], 0.3, PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/58FC614E", "A", gf_GetCurrentlySelectedMatchupasText());
    libNtve_gf_SetDialogItemText(gv_postBuildReportMatchupLabels[1], TextExpressionAssemble("Param/Expression/58FC614E"), PlayerGroupAll());
}

void gf_UpdatePostBuildReportDialogValues (bool lp_updateBuildOrderListBox) {
    // Implementation
    gf_UpdatePostBuildReportOverviewSection();
    gf_UpdatePostBuildReportBenchmarkSection();
    gf_UpdatePostBuildReportStatsSection();
    if ((lp_updateBuildOrderListBox == true)) {
        gf_ResetBuildOrderListBox(gv_postBuildReportBuildOrderListBox);
        gf_UpdateBuildOrderListBoxwithCurrentBuild(gv_postBuildReportBuildOrderListBox);
    }
    else {
    }
}

void gf_UpdatePostBuildReportOverviewSection () {
    // Variable Declarations
    text lv_supplyBenchmarksMetText;
    text lv_buildTimeText;
    text lv_benchmarkStepsText;

    // Variable Initialization

    // Implementation
    if (((gv_practiceAgainstBenchmarkBuildOrder == true))) {
        TextExpressionSetToken("Param/Expression/48512523", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer))));
        TextExpressionSetToken("Param/Expression/48512523", "B", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_benchmarkBuildOrderTimeSeconds));
        lv_buildTimeText = TextExpressionAssemble("Param/Expression/48512523");
        TextExpressionSetToken("Param/Expression/423A89C7", "A", IntToText(gv_numBenchmarksMetThisBuild));
        TextExpressionSetToken("Param/Expression/423A89C7", "B", IntToText(gv_benchmarkBuildOrderSupplyBenchmarksMet));
        lv_supplyBenchmarksMetText = TextExpressionAssemble("Param/Expression/423A89C7");
        TextExpressionSetToken("Param/Expression/DA3A6761", "A", IntToText(gv_numCompletedBenchmarkBuildOrderSteps));
        TextExpressionSetToken("Param/Expression/DA3A6761", "B", IntToText(gv_totalNumBenchmarkBuildOrderSteps));
        lv_benchmarkStepsText = TextExpressionAssemble("Param/Expression/DA3A6761");
    }
    else {
        lv_buildTimeText = TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer)));
        TextExpressionSetToken("Param/Expression/14C275AD", "A", IntToText(gv_numBenchmarksMetThisBuild));
        lv_supplyBenchmarksMetText = TextExpressionAssemble("Param/Expression/14C275AD");
        lv_benchmarkStepsText = IntToText(gv_currentBuildOrderStepCursor);
    }
    TextExpressionSetToken("Param/Expression/D2FEAD6E", "A", lv_buildTimeText);
    libNtve_gf_SetDialogItemText(gv_postBuildReportBuildOverviewTimeLabel, TextExpressionAssemble("Param/Expression/D2FEAD6E"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/24ED9FE0", "A", lv_supplyBenchmarksMetText);
    libNtve_gf_SetDialogItemText(gv_postBuildReportBuildOverviewBenchmarkCompletionLabel, TextExpressionAssemble("Param/Expression/24ED9FE0"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/60AFE4E0", "A", lv_benchmarkStepsText);
    libNtve_gf_SetDialogItemText(gv_postBuildReportBuildOverviewBuildStepNumLabel, TextExpressionAssemble("Param/Expression/60AFE4E0"), PlayerGroupAll());
}

void gf_UpdatePostBuildReportBenchmarkSection () {
    int auto4B009C04_ae;
    int auto4B009C04_ai;

    // Variable Declarations
    int lv_rowNum;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/3BCA4D33", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gf_GetTotalSecondsforMinSeconds(gv_supplyBenchmarks[3].lv_benchmarkTimeMin, gv_supplyBenchmarks[3].lv_benchmarkTimeSeconds)));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[gv_postBuildReportBenchmarksIndex][3][0], TextExpressionAssemble("Param/Expression/3BCA4D33"), PlayerGroupAll());
    auto4B009C04_ae = 3;
    auto4B009C04_ai = 1;
    lv_rowNum = 0;
    for ( ; ( (auto4B009C04_ai >= 0 && lv_rowNum <= auto4B009C04_ae) || (auto4B009C04_ai <= 0 && lv_rowNum >= auto4B009C04_ae) ) ; lv_rowNum += auto4B009C04_ai ) {
        gf_UpdatePostBuildReportBenchmarkAnalysisRow(lv_rowNum);
    }
}

void gf_UpdatePostBuildReportBenchmarkAnalysisRow (int lp_rowNumber) {
    // Implementation
    TextExpressionSetToken("Param/Expression/F2C7E9FD", "A", IntToText(gv_supplyBenchmarks[lp_rowNumber].lv_actualSupplyatBenchmarkTime));
    TextExpressionSetToken("Param/Expression/F2C7E9FD", "B", IntToText(gv_supplyBenchmarks[lp_rowNumber].lv_benchmarkSupply));
    TextExpressionSetToken("Param/Expression/F2C7E9FD", "C", gf_GetSupplyDifferenceasFormattedText(gv_supplyBenchmarks[lp_rowNumber].lv_actualSupplyatBenchmarkTime, gv_supplyBenchmarks[lp_rowNumber].lv_benchmarkSupply));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[gv_postBuildReportBenchmarksIndex][lp_rowNumber][1], TextExpressionAssemble("Param/Expression/F2C7E9FD"), PlayerGroupAll());
}

void gf_UpdatePostBuildReportStatsSection () {
    // Variable Declarations
    int lv_statRowNum;

    // Variable Initialization

    // Implementation
    gf_UpdatePostBuildStatRowValueasInt(StringExternal("Param/Value/D3C083D3"), gv_workersCreated, gv_bestTotalWorkersCreatedEntryKey, lv_statRowNum, true, false);
    lv_statRowNum += 1;
    gf_UpdatePostBuildStatRowValueasTime(StringExternal("Param/Value/F52DAACD"), gf_GetTimeSupplyBlocked(), gv_bestTimeSupplyBlockedEntryKey, lv_statRowNum, false, false);
    lv_statRowNum += 1;
    gf_UpdatePostBuildStatRowValueasTime(StringExternal("Param/Value/E59E74B8"), gf_GetIdleProductionTime(), gv_bestIdleProductionTimeEntryKey, lv_statRowNum, false, false);
    lv_statRowNum += 1;
    gf_UpdatePostBuildStatRowValueasInt(StringExternal("Param/Value/F9CF4469"), gf_GetTotalMineralsCollected(), gv_bestTotalMineralsCollectedEntryKey, lv_statRowNum, true, true);
    lv_statRowNum += 1;
    gf_UpdatePostBuildStatRowValueasInt(StringExternal("Param/Value/B88570A5"), gf_GetTotalGasCollected(), gv_bestTotalGasCollectedEntryKey, lv_statRowNum, true, true);
    lv_statRowNum += 1;
    gf_UpdatePostBuildStatRowValueasInt(StringExternal("Param/Value/89E5DE2C"), gf_GetTotalArmySupply(), gv_bestTotalArmySupplyEntryKey, lv_statRowNum, true, false);
    lv_statRowNum += 1;
    gf_UpdatePostBuildStatRowValueasInt(StringExternal("Param/Value/EBB3E7BB"), gf_GetTotalArmyValueMinerals(), gv_bestTotalArmyValueMineralsEntryKey, lv_statRowNum, true, true);
    lv_statRowNum += 1;
    gf_UpdatePostBuildStatRowValueasInt(StringExternal("Param/Value/87426EC9"), gf_GetTotalArmyValueGas(), gv_bestTotalArmyValueGasEntryKey, lv_statRowNum, true, true);
    lv_statRowNum += 1;
    gf_UpdatePostBuildStatRowValueasReal(StringExternal("Param/Value/14A329F0"), gf_GetAverageBuildAPM(), gv_bestAverageAPMEntryKey, lv_statRowNum, true);
    lv_statRowNum += 1;
}

void gf_UpdatePostBuildStatRowValueasInt (text lp_label, int lp_value, string lp_benchmarkEntryKey, int lp_rowNumber, bool lp_higherIsBetter, bool lp_differenceAsPercentage) {
    // Variable Declarations
    int lv_benchmarkValue;
    text lv_differenceText;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/B465A6FA", "A", lp_label);
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[gv_postBuildReportStatsIndex][lp_rowNumber][0], TextExpressionAssemble("Param/Expression/B465A6FA"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/F0E2DCFF", "A", IntToText(lp_value));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[gv_postBuildReportStatsIndex][lp_rowNumber][1], TextExpressionAssemble("Param/Expression/F0E2DCFF"), PlayerGroupAll());
    lv_benchmarkValue = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), lp_benchmarkEntryKey);
    TextExpressionSetToken("Param/Expression/F6BAF499", "A", IntToText(lv_benchmarkValue));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[gv_postBuildReportStatsIndex][lp_rowNumber][2], TextExpressionAssemble("Param/Expression/F6BAF499"), PlayerGroupAll());
    lv_differenceText = gf_GetIntDifferenceasText(lp_value, lv_benchmarkValue, lp_higherIsBetter, lp_differenceAsPercentage);
    TextExpressionSetToken("Param/Expression/CBC6EA6A", "A", lv_differenceText);
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[gv_postBuildReportStatsIndex][lp_rowNumber][3], TextExpressionAssemble("Param/Expression/CBC6EA6A"), PlayerGroupAll());
}

void gf_UpdatePostBuildStatRowValueasReal (text lp_label, fixed lp_value, string lp_benchmarkEntryKey, int lp_rowNumber, bool lp_higherIsBetter) {
    // Variable Declarations
    fixed lv_benchmarkValue;
    text lv_diffText;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/C43A814E", "A", lp_label);
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[gv_postBuildReportStatsIndex][lp_rowNumber][0], TextExpressionAssemble("Param/Expression/C43A814E"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/58FC52E5", "A", FixedToText(lp_value, 0));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[gv_postBuildReportStatsIndex][lp_rowNumber][1], TextExpressionAssemble("Param/Expression/58FC52E5"), PlayerGroupAll());
    lv_benchmarkValue = BankValueGetAsFixed(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), lp_benchmarkEntryKey);
    TextExpressionSetToken("Param/Expression/11DCA616", "A", FixedToText(lv_benchmarkValue, 0));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[gv_postBuildReportStatsIndex][lp_rowNumber][2], TextExpressionAssemble("Param/Expression/11DCA616"), PlayerGroupAll());
    lv_diffText = gf_GetRealDifferenceasText(lp_value, lv_benchmarkValue, lp_higherIsBetter);
    TextExpressionSetToken("Param/Expression/7E060849", "A", lv_diffText);
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[gv_postBuildReportStatsIndex][lp_rowNumber][3], TextExpressionAssemble("Param/Expression/7E060849"), PlayerGroupAll());
}

void gf_UpdatePostBuildStatRowValueasTime (text lp_label, int lp_value, string lp_benchmarkEntryKey, int lp_rowNumber, bool lp_higherIsBetter, bool lp_displayasPercentage) {
    // Variable Declarations
    text lv_diffText;
    int lv_benchmarkValue;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/9E619A01", "A", lp_label);
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[gv_postBuildReportStatsIndex][lp_rowNumber][0], TextExpressionAssemble("Param/Expression/9E619A01"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/47991026", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_value));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[gv_postBuildReportStatsIndex][lp_rowNumber][1], TextExpressionAssemble("Param/Expression/47991026"), PlayerGroupAll());
    lv_benchmarkValue = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), lp_benchmarkEntryKey);
    TextExpressionSetToken("Param/Expression/430A1346", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_benchmarkValue));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[gv_postBuildReportStatsIndex][lp_rowNumber][2], TextExpressionAssemble("Param/Expression/430A1346"), PlayerGroupAll());
    lv_diffText = gf_GetTimeDifferenceasText(lp_value, lv_benchmarkValue, lp_higherIsBetter, lp_displayasPercentage);
    TextExpressionSetToken("Param/Expression/F7F5AD3C", "A", lv_diffText);
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[gv_postBuildReportStatsIndex][lp_rowNumber][3], TextExpressionAssemble("Param/Expression/F7F5AD3C"), PlayerGroupAll());
}

void gf_CreateStatsDialog () {
    int autoF8DF752B_ae;
    int autoF8DF752B_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    DialogCreate(gv_statsDialogWidth, gv_benchmarkDialogHeight, c_anchorCenter, 0, -150, true);
    gv_statsDialog = DialogLastCreated();
    DialogSetTransparency(DialogLastCreated(), 0.0);
    DialogSetTitle(gv_statsDialog, gv_statsDialogTitle);
    gf_CreateStatsDialogHeaderRowLabels();
    autoF8DF752B_ae = gv_statsDialogMaxItems;
    autoF8DF752B_ai = 1;
    lv_i = 0;
    for ( ; ( (autoF8DF752B_ai >= 0 && lv_i <= autoF8DF752B_ae) || (autoF8DF752B_ai <= 0 && lv_i >= autoF8DF752B_ae) ) ; lv_i += autoF8DF752B_ai ) {
        gf_CreateStatsDialogRow(lv_i);
    }
    gf_CreateStatsBuildOrderListBox();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_startButtonWidth, gv_startButtonHeight, c_anchorBottom, 0, gv_menuPadding, StringExternal("Param/Value/5BF28F50"), StringExternal("Param/Value/35192382"), "");
    gv_statsOkButton = DialogControlLastCreated();
}

void gf_CreateStatsDialogHeaderRowLabels () {
    // Variable Declarations
    int lv_labelHeightOffset;

    // Variable Initialization
    lv_labelHeightOffset = (gv_menuPadding+gv_statsDialogTitleSpacer);

    // Implementation
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_statLabelWidth, gv_postBuildReportStatLabelHeight, c_anchorTopLeft, gv_menuPadding, (lv_labelHeightOffset-10), TextExpressionAssemble("Param/Expression/CC2AD512"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_statValueWidth, gv_postBuildReportStatLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_statLabelWidth), lv_labelHeightOffset, StringExternal("Param/Value/469EC4F5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_buildOrderListBoxWidth, gv_postBuildReportStatLabelHeight, c_anchorTopRight, (gv_menuPadding), lv_labelHeightOffset, StringExternal("Param/Value/527AE2D2"), ColorWithAlpha(0,0,0,0), false, 2.0);
}

void gf_CreateStatsDialogRow (int lp_rowOffset) {
    // Variable Declarations
    int lv_xOffset;
    int lv_yOffset;

    // Variable Initialization
    lv_xOffset = gv_menuPadding;
    lv_yOffset = (gv_menuPadding+gv_statsDialogTitleSpacer+gv_sectionLabelHeight+lp_rowOffset*gv_postBuildReportStatLabelHeight);

    // Implementation
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_statLabelWidth, gv_menuItemHeight, c_anchorTopLeft, lv_xOffset, lv_yOffset, StringExternal("Param/Value/0D0D4C72"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_statValueDialogItems[lp_rowOffset][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_statValueWidth, gv_menuItemHeight, c_anchorTopLeft, (gv_statLabelWidth+lv_xOffset), lv_yOffset, StringExternal("Param/Value/FA90A0B2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_statValueDialogItems[lp_rowOffset][1] = DialogControlLastCreated();
}

void gf_CreateStatsBuildOrderListBox () {
    // Variable Declarations
    int lv_yOffset;

    // Variable Initialization
    lv_yOffset = (gv_menuPadding+gv_statsDialogTitleSpacer+gv_sectionLabelHeight+0*gv_postBuildReportStatLabelHeight);

    // Implementation
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_buildOrderListBoxWidth, gv_buildOrderListBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, gv_menuPadding, lv_yOffset);
    gv_statsDialogBuildOrderListBox = DialogControlLastCreated();
}

void gf_RefreshStatsDialog () {
    // Variable Declarations
    int lv_rowNum;

    // Variable Initialization

    // Implementation
    gf_RefreshStatsDialogRow(lv_rowNum, StringExternal("Param/Value/79A57BD9"), IntToText(gv_workersCreated));
    lv_rowNum += 1;
    gf_RefreshStatsDialogRow(lv_rowNum, StringExternal("Param/Value/67D50843"), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gf_GetIdleProductionTime()));
    lv_rowNum += 1;
    gf_RefreshStatsDialogRow(lv_rowNum, StringExternal("Param/Value/C1F8724A"), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gf_GetTimeSupplyBlocked()));
    lv_rowNum += 1;
    gf_RefreshStatsDialogRow(lv_rowNum, StringExternal("Param/Value/1D3859A8"), IntToText(gf_GetAverageBuildAPM()));
    lv_rowNum += 1;
    gf_ResetBuildOrderListBox(gv_statsDialogBuildOrderListBox);
    gf_UpdateBuildOrderListBoxwithCurrentBuild(gv_statsDialogBuildOrderListBox);
}

void gf_RefreshStatsDialogRow (int lp_rowOffset, text lp_labelText, text lp_statValueText) {
    // Implementation
    TextExpressionSetToken("Param/Expression/AFE69EE0", "A", lp_labelText);
    libNtve_gf_SetDialogItemText(gv_statValueDialogItems[lp_rowOffset][0], TextExpressionAssemble("Param/Expression/AFE69EE0"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/2A19E61D", "A", lp_statValueText);
    libNtve_gf_SetDialogItemText(gv_statValueDialogItems[lp_rowOffset][1], TextExpressionAssemble("Param/Expression/2A19E61D"), PlayerGroupAll());
}

void gf_CloseStatsDialogandUnpause () {
    // Implementation
    DialogSetVisible(gv_statsDialog, PlayerGroupAll(), false);
    gf_UnpauseGame();
    Wait(0.1, c_timeGame);
    gv_isStatsDialogOpen = false;
}

void gf_LogStringMessage (bool lp_alertTypeFlag, string lp_message) {
    // Implementation
    gf_LogTextMessage(lp_alertTypeFlag, StringToText(lp_message));
}

void gf_LogTextMessage (bool lp_alertTypeFlag, text lp_message) {
    // Implementation
    if ((lp_alertTypeFlag == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, lp_message);
    }
    else {
    }
}

void gf_DisplayDebugTimerWindowsForExistingAlertTimers () {
    int auto8A5DEB39_ae;
    int auto8A5DEB39_ai;
    int autoED27A46B_ae;
    int autoED27A46B_ai;

    // Variable Declarations
    int lv_upgradeIndex;
    int lv_unitTypeIndex;

    // Variable Initialization

    // Implementation
    auto8A5DEB39_ae = gv_alertUpgradeGapNumUpgrades;
    auto8A5DEB39_ai = 1;
    lv_upgradeIndex = 0;
    for ( ; ( (auto8A5DEB39_ai >= 0 && lv_upgradeIndex <= auto8A5DEB39_ae) || (auto8A5DEB39_ai <= 0 && lv_upgradeIndex >= auto8A5DEB39_ae) ) ; lv_upgradeIndex += auto8A5DEB39_ai ) {
        if ((gv_upgradeGapAlerts[lv_upgradeIndex].lv_delayedUpgrade != null)) {
            TextExpressionSetToken("Param/Expression/72D8D8AB", "A", gf_GetFormattedUpgradeNameasText(gv_upgradeGapAlerts[lv_upgradeIndex].lv_delayedUpgrade));
            gf_AddDebugTimerWindow(gv_upgradeGapAlerts[lv_upgradeIndex].lv_alertTimer, TextExpressionAssemble("Param/Expression/72D8D8AB"));
            TextExpressionSetToken("Param/Expression/DC7938B5", "A", gf_GetFormattedUpgradeNameasText(gv_upgradeGapAlerts[lv_upgradeIndex].lv_delayedUpgrade));
            gf_AddDebugTimerWindow(gv_upgradeGapAlerts[lv_upgradeIndex].lv_cooldownTimer, TextExpressionAssemble("Param/Expression/DC7938B5"));
        }
        else {
        }
    }
    autoED27A46B_ae = gv_productionIdleNumProductionUnitTypes;
    autoED27A46B_ai = 1;
    lv_unitTypeIndex = 0;
    for ( ; ( (autoED27A46B_ai >= 0 && lv_unitTypeIndex <= autoED27A46B_ae) || (autoED27A46B_ai <= 0 && lv_unitTypeIndex >= autoED27A46B_ae) ) ; lv_unitTypeIndex += autoED27A46B_ai ) {
        if ((gv_productionIdleAlerts[lv_unitTypeIndex].lv_unitType != null)) {
            TextExpressionSetToken("Param/Expression/B24E8ABD", "A", UnitTypeGetName(gv_productionIdleAlerts[lv_unitTypeIndex].lv_unitType));
            gf_AddDebugTimerWindow(gv_productionIdleAlerts[lv_unitTypeIndex].lv_alertTimer, TextExpressionAssemble("Param/Expression/B24E8ABD"));
            TextExpressionSetToken("Param/Expression/2FEBDEE6", "A", UnitTypeGetName(gv_productionIdleAlerts[lv_unitTypeIndex].lv_unitType));
            gf_AddDebugTimerWindow(gv_productionIdleAlerts[lv_unitTypeIndex].lv_cooldownTimer, TextExpressionAssemble("Param/Expression/2FEBDEE6"));
        }
        else {
        }
    }
}

void gf_DisplayDebugTimerWindowsForExistingMultipleUnitFailureTimers () {
    int auto6DD605DA_ae;
    int auto6DD605DA_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto6DD605DA_ae = gv_benchmarkBuildOrderStepCursor;
    auto6DD605DA_ai = 1;
    lv_i = 0;
    for ( ; ( (auto6DD605DA_ai >= 0 && lv_i <= auto6DD605DA_ae) || (auto6DD605DA_ai <= 0 && lv_i >= auto6DD605DA_ae) ) ; lv_i += auto6DD605DA_ai ) {
        if ((TimerGetElapsed(gv_benchmarkBuildOrderSteps[lv_i].lv_multipleUnitFailureTimer) > 0.0)) {
            TextExpressionSetToken("Param/Expression/6E9BC307", "B", IntToText(gv_benchmarkBuildOrderSteps[lv_i].lv_amount));
            TextExpressionSetToken("Param/Expression/6E9BC307", "A", UnitTypeGetName(gv_benchmarkBuildOrderSteps[lv_i].lv_unitType));
            gf_AddDebugTimerWindow(gv_benchmarkBuildOrderSteps[lv_i].lv_multipleUnitFailureTimer, TextExpressionAssemble("Param/Expression/6E9BC307"));
        }
        else {
        }
    }
}

void gf_AddDebugTimerWindow (timer lp_timer, text lp_windowName) {
    // Implementation
    TimerWindowCreate(lp_timer, lp_windowName, true, false);
    gv_debugTimerWindows[gv_numDebugTimerWindows] = TimerWindowLastCreated();
    gv_numDebugTimerWindows += 1;
}

void gf_ClearDebugTimerWindows () {
    int auto507A3A19_ae;
    int auto507A3A19_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto507A3A19_ae = gv_numDebugTimerWindows;
    auto507A3A19_ai = 1;
    lv_i = 0;
    for ( ; ( (auto507A3A19_ai >= 0 && lv_i <= auto507A3A19_ae) || (auto507A3A19_ai <= 0 && lv_i >= auto507A3A19_ae) ) ; lv_i += auto507A3A19_ai ) {
        TimerWindowDestroy(gv_debugTimerWindows[lv_i]);
    }
    gv_numDebugTimerWindows = 0;
}

void gf_InitializeBankDefaults () {
    string auto12733010_val;

    // Implementation
    gv_benchmarkSupplyEntryKeys[0] = "supplyBenchmark1";
    gv_benchmarkSupplyEntryKeys[1] = "supplyBenchmark2";
    gv_benchmarkSupplyEntryKeys[2] = "supplyBenchmark3";
    auto12733010_val = PlayerRace(1);
    if (auto12733010_val == "Zerg") {
        gv_currentMatchupSectionKeys[0] = gv_zvZMatchupSectionKey;
        gv_currentMatchupSectionKeys[1] = gv_zvTMatchupSectionKey;
        gv_currentMatchupSectionKeys[2] = gv_zvPMatchupSectionKey;
    }
    else if (auto12733010_val == "Terr") {
        gv_currentMatchupSectionKeys[0] = gv_tvZMatchupSectionKey;
        gv_currentMatchupSectionKeys[1] = gv_tvTMatchupSectionKey;
        gv_currentMatchupSectionKeys[2] = gv_tvPMatchupSectionKey;
    }
    else if (auto12733010_val == "Prot") {
        gv_currentMatchupSectionKeys[0] = gv_pvZMatchupSectionKey;
        gv_currentMatchupSectionKeys[1] = gv_pvTMatchupSectionKey;
        gv_currentMatchupSectionKeys[2] = gv_pvPMatchupSectionKey;
    }
    else {
    }
    gv_currentlySelectedMatchupIndex = 0;
    gv_alertConfigurationSectionKey = ((PlayerRace(1)) + "AlertConfigurations");
}

void gf_InitializeDialogDefaults () {
    string auto6EDFB34C_val;

    // Implementation
    gv_alertRowLabelWidths[0][0] = 335;
    gv_alertRowLabelWidths[1][0] = 292;
    gv_alertRowLabelWidths[2][0] = 317;
    gv_alertRowLabelWidths[2][1] = 252;
    auto6EDFB34C_val = PlayerRace(1);
    if (auto6EDFB34C_val == "Prot") {
        gv_alertRowLabelWidths[3][0] = (gv_alertMenuSupplyBlockBaseWidth+gv_alertMenuNexusNameWidth);
    }
    else if (auto6EDFB34C_val == "Terr") {
        gv_alertRowLabelWidths[3][0] = (gv_alertMenuSupplyBlockBaseWidth+gv_alertMenuOrbitalNameWidth);
    }
    else if (auto6EDFB34C_val == "Zerg") {
        gv_alertRowLabelWidths[3][0] = (gv_alertMenuSupplyBlockBaseWidth+gv_alertMenuQueenNameWidth);
    }
    else {
    }
    gv_alertRowLabelWidths[4][0] = 400;
    gv_alertRowLabelWidths[4][1] = 161;
    gv_alertRowLabelWidths[4][2] = 17;
    gv_alertRowLabelWidths[5][0] = 483;
    gv_alertRowLabelWidths[5][1] = gv_secondsLabelWidth;
    gv_alertRowLabelWidths[6][0] = 300;
    gv_alertRowLabelWidths[6][1] = 40;
    gv_alertRowLabelWidths[6][2] = gv_secondsLabelWidth;
}

void gf_InitializeGameDefaults () {
    // Implementation
    gv_overlordMorphDuration = 25;
    gv_warningPingCooldownSeconds = 2.0;
    gv_alertCooldownSeconds = 15;
    gv_alertMineralsThreshold = 800;
    gv_alertGasThreshold = 400;
    gv_alertSupplyBlockStart = 50;
    gv_alertUpgradeGapThreshold = 20;
    gv_productionIdleAlertSecondsThreshold = 20;
    gv_alertSupplyBlockWithinCapThreshold = 6;
    gv_alertZergDefaultMacroEnergyThreshold = 55;
    gv_alertTerranDefaultMacroEnergyThreshold = 80;
    gv_alertProtossDefaultMacroEnergyThreshold = 55;
    gv_aPMThreshold = 100;
    gv_aPMThresholdDuration = 10;
    gv_benchmarkMaxSupplyMinutes = 15;
    gv_benchmarkMaxSupplySeconds = 0;
    gv_benchmarkEndBuildatGameTimeMinutes = 12;
    gv_benchmarkEndBuildatGameTimeSeconds = 30;
    gv_benchmarkFinalSupplyatGameTimeValue = 130;
    gv_supplyBenchmarks[0].lv_benchmarkTimeMin = 6;
    gv_supplyBenchmarks[0].lv_benchmarkTimeSeconds = 0;
    gv_supplyBenchmarks[1].lv_benchmarkTimeMin = 8;
    gv_supplyBenchmarks[1].lv_benchmarkTimeSeconds = 0;
    gv_supplyBenchmarks[2].lv_benchmarkTimeMin = 10;
    gv_supplyBenchmarks[2].lv_benchmarkTimeSeconds = 0;
    gv_trackSupplyUnitsAsSteps = true;
    gv_multipleUnitFailureThreshold = 15;
    gv_trackSupplyUnitAsStepSupplyLimit = 40;
    gv_trackQueensAsStepSupplyLimit = 40;
    gv_buildOrderMaxGasSupply = 60;
    gv_buildHintTimeThreshold = 10.0;
    gv_maxDisplayedBuildOrderObjectives1 = 9;
    gv_benchmarkBuildOrderObjectiveCycleThreshold = 5;
    gv_benchmarkSupplyDefaults[0] = 30;
    gv_benchmarkSupplyDefaults[1] = 55;
    gv_benchmarkSupplyDefaults[2] = 80;
}

void gf_InitializeGameState () {
    // Implementation
    gf_InitializeBuildConfiguration();
    gf_LogTextMessage(gv_debugMapMechanicsEnabled, StringExternal("Param/Value/10A5A2AE"));
    gf_ResetUnits();
    gf_ResetCreep();
    gf_InitializeUnitsAndStartingResources();
    gf_ResetCamera();
}

void gf_InitializeMapResources () {
    unitgroup auto59129081_g;
    int auto59129081_u;
    unitgroup autoAECA9D28_g;
    int autoAECA9D28_u;

    // Variable Declarations
    unit lv_currentResource;

    // Variable Initialization

    // Implementation
    auto59129081_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, 0, 0), 0);
    auto59129081_u = 1;
    for ( ; auto59129081_u <= UnitGroupCount(auto59129081_g, c_unitCountAll) ; auto59129081_u += BoolToInt(lv_currentResource == UnitGroupUnit(auto59129081_g, auto59129081_u)) ) {
        lv_currentResource = UnitGroupUnit(auto59129081_g, auto59129081_u);
        gf_AddResourceToMapResources(lv_currentResource);
    }
    autoAECA9D28_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRawResource), 0, 0, 0), 0);
    autoAECA9D28_u = 1;
    for ( ; autoAECA9D28_u <= UnitGroupCount(autoAECA9D28_g, c_unitCountAll) ; autoAECA9D28_u += BoolToInt(lv_currentResource == UnitGroupUnit(autoAECA9D28_g, autoAECA9D28_u)) ) {
        lv_currentResource = UnitGroupUnit(autoAECA9D28_g, autoAECA9D28_u);
        gf_AddResourceToMapResources(lv_currentResource);
    }
    TextExpressionSetToken("Param/Expression/EA97869B", "A", IntToText(gv_numMapResources));
    gf_LogTextMessage(gv_debugMapMechanicsEnabled, TextExpressionAssemble("Param/Expression/EA97869B"));
}

void gf_InitializeUnitsAndStartingResources () {
    // Implementation
    MeleeInitUnitsForPlayer(1, PlayerRace(1), PlayerStartLocation(1));
    if ((PlayerRace(1) == "Zerg")) {
        CreepModify(PlayerStartLocation(1), gv_zergHatcheryCreepRadius, true, false);
    }
    else {
    }
    if ((gf_GetCurrentlySelectedMatchupOpponentRace() == "Zerg")) {
        CreepModify(PlayerStartLocation(2), gv_zergHatcheryCreepRadius, true, false);
    }
    else {
    }
    MeleeInitUnitsForPlayer(2, gf_GetCurrentlySelectedMatchupOpponentRace(), PlayerStartLocation(2));
    MeleeInitResources();
    gf_WaitForRaceAssetsToLoadIfNecessary();
}

void gf_WaitForRaceAssetsToLoadIfNecessary () {
    // Implementation
    if (((PlayerRace(1) == "Zerg") || (PlayerRace(2) == "Zerg") || (gf_GetCurrentlySelectedMatchupOpponentRace() == "Zerg"))) {
        gv_haveZergAssetsBeenLoaded = true;
    }
    else if (((PlayerRace(1) == "Terr") || (PlayerRace(2) == "Terr") || (gf_GetCurrentlySelectedMatchupOpponentRace() == "Terr"))) {
        gv_haveTerranAssetsBeenLoaded = true;
    }
    else if (((PlayerRace(1) == "Prot") || (PlayerRace(2) == "Prot") || (gf_GetCurrentlySelectedMatchupOpponentRace() == "Prot"))) {
        gv_haveProtossAssetsBeenLoaded = true;
    }
    if (((gv_isFirstBuild == false) && (((gf_GetCurrentlySelectedMatchupOpponentRace() == "Zerg") && (gv_haveZergAssetsBeenLoaded == false)) || ((gf_GetCurrentlySelectedMatchupOpponentRace() == "Terr") && (gv_haveTerranAssetsBeenLoaded == false)) || ((gf_GetCurrentlySelectedMatchupOpponentRace() == "Prot") && (gv_haveProtossAssetsBeenLoaded == false))))) {
        Wait(1.0, c_timeGame);
    }
    else {
    }
}

void gf_AddResourceToMapResources (unit lp_unit) {
    // Implementation
    gv_mapResources[gv_numMapResources].lv_unit = lp_unit;
    gv_mapResources[gv_numMapResources].lv_type = UnitGetType(lp_unit);
    gv_mapResources[gv_numMapResources].lv_position = UnitGetPosition(lp_unit);
    gv_mapResources[gv_numMapResources].lv_isMinedOut = false;
    gv_numMapResources += 1;
}

void gf_InitializeBank () {
    // Implementation
    BankLoad("benchmarker", 1);
    gv_benchmarkerBank = BankLastCreated();
    gf_CreateMatchupBankSections();
}

void gf_InitializeBuildConfiguration () {
    // Implementation
    gf_InitializeBenchmarkBuildOrder();
    gf_InitializeBenchmarkSupplyObjectives();
    gf_ShowBenchmarkSupplyObjectives();
}

void gf_InitializeBenchmarkSupplyObjectives () {
    int auto5072DD98_ae;
    int auto5072DD98_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto5072DD98_ae = 2;
    auto5072DD98_ai = 1;
    lv_i = 0;
    for ( ; ( (auto5072DD98_ai >= 0 && lv_i <= auto5072DD98_ae) || (auto5072DD98_ai <= 0 && lv_i >= auto5072DD98_ae) ) ; lv_i += auto5072DD98_ai ) {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[lv_i], c_objectiveStateActive);
        TextExpressionSetToken("Param/Expression/FE4CB76C", "C", TextWithColor(IntToText(gv_supplyBenchmarks[lv_i].lv_benchmarkSupply), gv_benchmarkSupplyObjectiveTextColor));
        TextExpressionSetToken("Param/Expression/FE4CB76C", "B", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gf_GetTotalSecondsforMinSeconds(gv_supplyBenchmarks[lv_i].lv_benchmarkTimeMin, gv_supplyBenchmarks[lv_i].lv_benchmarkTimeSeconds)));
        ObjectiveSetName(gv_benchmarkSupplyObjectives[lv_i], TextExpressionAssemble("Param/Expression/FE4CB76C"));
    }
    ObjectiveSetState(gv_benchmarkFinalBenchmarkObjective, c_objectiveStateActive);
    if ((gf_IsEndBuildatMaxSupplySelected() == true)) {
        TextExpressionSetToken("Param/Expression/0E7777EB", "B", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_benchmarkMaxSupplyTotalSeconds), gv_benchmarkSupplyObjectiveTextColor));
        ObjectiveSetName(gv_benchmarkFinalBenchmarkObjective, TextExpressionAssemble("Param/Expression/0E7777EB"));
    }
    else {
        TextExpressionSetToken("Param/Expression/FF78F416", "A", TextWithColor(IntToText(gv_benchmarkFinalSupplyatGameTimeValue), gv_benchmarkSupplyObjectiveTextColor));
        TextExpressionSetToken("Param/Expression/FF78F416", "B", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_benchmarkEndBuildatGameTimeTotalSeconds), gv_benchmarkSupplyObjectiveTextColor));
        ObjectiveSetName(gv_benchmarkFinalBenchmarkObjective, TextExpressionAssemble("Param/Expression/FF78F416"));
    }
}

void gf_CreateMatchupBankSections () {
    // Implementation
    BankSectionCreate(gv_benchmarkerBank, gv_zvZMatchupSectionKey);
    BankSectionCreate(gv_benchmarkerBank, gv_zvTMatchupSectionKey);
    BankSectionCreate(gv_benchmarkerBank, gv_zvPMatchupSectionKey);
    BankSectionCreate(gv_benchmarkerBank, gv_tvZMatchupSectionKey);
    BankSectionCreate(gv_benchmarkerBank, gv_tvTMatchupSectionKey);
    BankSectionCreate(gv_benchmarkerBank, gv_tvPMatchupSectionKey);
    BankSectionCreate(gv_benchmarkerBank, gv_pvZMatchupSectionKey);
    BankSectionCreate(gv_benchmarkerBank, gv_pvTMatchupSectionKey);
    BankSectionCreate(gv_benchmarkerBank, gv_pvPMatchupSectionKey);
}

void gf_ResetGameState () {
    // Variable Declarations
    unitgroup lv_player1Units;

    // Variable Initialization
    lv_player1Units = UnitGroupEmpty();

    // Implementation
    if (((gv_currentBuildWasForked == true))) {
        gv_practiceAgainstBenchmarkBuildOrder = true;
    }
    else {
    }
    gf_ResetGameVariables();
    gf_ResetTechTree();
    gf_ResetUnits();
    gf_ResetMapResources();
    gf_ResetCreep();
    gf_ResetCurrentBuildOrderStepsVariables();
    gf_ResetBenchmarkSupplyObjectives();
    gf_ResetBenchmarkBuildOrderObjectives();
    gf_ResetBenchmarkBuildOrderStepsVariables();
    gf_ResetAlertTimers();
    gf_ResetBenchmarkTimers();
    TimerRestart(gv_currentBuildBuildTimer);
    gf_ResetCamera();
    gf_InitializeBuildConfiguration();
    Wait(0.25, c_timeGame);
    gf_ResetMapVision();
    gf_InitializeUnitsAndStartingResources();
}

void gf_ResetUnits () {
    // Variable Declarations
    unitgroup lv_player1Units;
    unitgroup lv_player2Units;
    int lv_debugGasCounter;

    // Variable Initialization
    lv_player1Units = UnitGroupEmpty();
    lv_player2Units = UnitGroupEmpty();

    // Implementation
    lv_player1Units = gf_GetAllPlayerUnits(1);
    if ((UnitGroupCount(lv_player1Units, c_unitCountAlive) >= 0)) {
        UnitGroupLoopBegin(UnitGroupFilterPlayer(gv_workers, 1, 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitGroupRemove(gv_workers, UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroupFilterPlayer(gf_GetAllGasStructureUnits(), 1, 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
            lv_debugGasCounter += 1;
        }
        UnitGroupLoopEnd();
        TextExpressionSetToken("Param/Expression/96692ECC", "A", IntToText(lv_debugGasCounter));
        gf_LogTextMessage(gv_debugMapMechanicsEnabled, TextExpressionAssemble("Param/Expression/96692ECC"));
        UnitGroupLoopBegin(lv_player1Units);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    lv_player2Units = gf_GetAllPlayerUnits(2);
    if ((UnitGroupCount(lv_player2Units, c_unitCountAlive) >= 0)) {
        UnitGroupLoopBegin(UnitGroupFilterPlayer(gv_workers, 2, 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitGroupRemove(gv_workers, UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroupFilterPlayer(gf_GetAllGasStructureUnits(), 2, 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(lv_player2Units);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    else {
    }
}

void gf_ResetMapResources () {
    int autoF8EF1DFA_ae;
    int autoF8EF1DFA_ai;

    // Variable Declarations
    string lv_currentResourceType;
    point lv_currentPosition;
    unit lv_currentResource;
    int lv_resourcesReplaced;
    int lv_resourcesCreated;
    int lv_i;

    // Variable Initialization

    // Implementation
    autoF8EF1DFA_ae = gv_numMapResources;
    autoF8EF1DFA_ai = 1;
    lv_i = 0;
    for ( ; ( (autoF8EF1DFA_ai >= 0 && lv_i <= autoF8EF1DFA_ae) || (autoF8EF1DFA_ai <= 0 && lv_i >= autoF8EF1DFA_ae) ) ; lv_i += autoF8EF1DFA_ai ) {
        lv_currentResource = gv_mapResources[lv_i].lv_unit;
        lv_currentResourceType = gv_mapResources[lv_i].lv_type;
        lv_currentPosition = gv_mapResources[lv_i].lv_position;
        if (((((lv_currentResourceType == "VespeneGeyser") || (lv_currentResourceType == "RichVespeneGeyser") || (lv_currentResourceType == "ProtossVespeneGeyser") || (lv_currentResourceType == "SpacePlatformGeyser")) && (libNtve_gf_UnitGetPropertyResources(lv_currentResource, c_unitPropCurrent) < 2500)) || (((lv_currentResourceType == "MineralField") || (lv_currentResourceType == "RichMineralField")) && (libNtve_gf_UnitGetPropertyResources(lv_currentResource, c_unitPropCurrent) < 1500)))) {
            UnitRemove(lv_currentResource);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_currentResourceType, 0, 0, lv_currentPosition);
            gv_mapResources[lv_i].lv_unit = UnitLastCreated();
            lv_resourcesReplaced += 1;
        }
        else {
        }
    }
    TextExpressionSetToken("Param/Expression/44F472C2", "A", IntToText(lv_resourcesReplaced));
    TextExpressionSetToken("Param/Expression/44F472C2", "B", IntToText(lv_resourcesCreated));
    gf_LogTextMessage(gv_debugMapMechanicsEnabled, TextExpressionAssemble("Param/Expression/44F472C2"));
}

void gf_ResetTechTree () {
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergGroundArmorsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergGroundArmorsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergGroundArmorsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerArmorsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerArmorsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerArmorsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerWeaponsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerWeaponsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerWeaponsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMeleeWeaponsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMeleeWeaponsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMeleeWeaponsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMissileWeaponsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMissileWeaponsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMissileWeaponsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Burrow", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NeuralParasite", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "InfestorEnergyUpgrade", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "CentrificalHooks", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "LocustLifetimeIncrease", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "hydraliskspeed", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "HydraliskSpeedUpgrade", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "GlialReconstitution", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "OrganicCarapace", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TunnelingClaws", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "overlordspeed", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "overlordtransport", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "zerglingmovementspeed", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "zerglingattackspeed", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ChitinousPlating", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryWeaponsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryWeaponsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryWeaponsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryArmorsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryArmorsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryArmorsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleWeaponsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleWeaponsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleWeaponsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleArmorsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleArmorsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleArmorsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipWeaponsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipWeaponsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipWeaponsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipArmorsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipArmorsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipArmorsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleAndShipWeaponsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleAndShipWeaponsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleAndShipWeaponsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleAndShipArmorsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleAndShipArmorsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleAndShipArmorsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Stimpack", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ShieldWall", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "PunisherGrenades", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "BansheeCloak", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "PersonalCloaking", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "HighCapacityBarrels", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "SiegeTech", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "HunterSeeker", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "RavenCorvidReactor", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "HiSecAutoTracking", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NeosteelFrame", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranBuildingArmor", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirArmorsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirArmorsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirArmorsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundArmorsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundArmorsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundArmorsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossShieldsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossShieldsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossShieldsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirWeaponsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirWeaponsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirWeaponsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundWeaponsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundWeaponsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundWeaponsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "PsiStormTech", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "PhoenixRangeUpgrade", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Charge", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "BlinkTech", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "CarrierLaunchSpeedUpgrade", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "WarpGateResearch", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "GraviticDrive", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ExtendedThermalLance", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ObserverGraviticBooster", 0);
}

void gf_ResetUnitAbilities () {
}

void gf_ResetMapVision () {
    // Implementation
    VisRevealArea(1, RegionEntireMap(), 0.001, false);
    Wait(0.1, c_timeGame);
    VisExploreArea(1, RegionEntireMap(), false, false);
    gf_ResetWatchtowerVision();
}

trigger auto_gf_ResetWatchtowerVision_Trigger = null;

void gf_ResetWatchtowerVision () {
    if (auto_gf_ResetWatchtowerVision_Trigger == null) {
        auto_gf_ResetWatchtowerVision_Trigger = TriggerCreate("auto_gf_ResetWatchtowerVision_TriggerFunc");
    }

    TriggerExecute(auto_gf_ResetWatchtowerVision_Trigger, false, false);
}

bool auto_gf_ResetWatchtowerVision_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    Wait(2.1, c_timeGame);
    VisExploreArea(1, RegionEntireMap(), false, false);
    return true;
}

void gf_ResetCreep () {
    // Implementation
    CreepModify(RegionGetCenter(RegionEntireMap()), 512.0, false, false);
}

void gf_ResetCamera () {
    // Implementation
    CameraRestore(1, 0.75, -1, 10.0);
}

void gf_ResetGameVariables () {
    // Implementation
    gv_workersCreated = 6;
    gv_timeProductionIdleThisBuild = 0;
    gv_timeSupplyBlockedThisBuild = 0;
    gv_cumulativeTotalUnspentMinerals = 0;
    gv_cumulativeTotalUnspentGas = 0;
    gv_numUnspentResourceSamples = 0;
    gv_cumulativeTotalMineralCollectionRate = 0;
    gv_cumulativeTotalGasCollectionRate = 0;
    gv_numResourceCollectionRateSamples = 0;
    gv_cumulativeAPM = 0;
    gv_totalAPMSamplesThisBuild = 0;
    gv_totalMineralsCollected = 0;
    gv_totalGasCollected = 0;
}

void gf_ResetBenchmarkSupplyObjectives () {
    int auto197B812D_ae;
    int auto197B812D_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto197B812D_ae = 2;
    auto197B812D_ai = 1;
    lv_i = 0;
    for ( ; ( (auto197B812D_ai >= 0 && lv_i <= auto197B812D_ae) || (auto197B812D_ai <= 0 && lv_i >= auto197B812D_ae) ) ; lv_i += auto197B812D_ai ) {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[lv_i], c_objectiveStateActive);
    }
    if ((gf_IsEndBuildatMaxSupplySelected() == true)) {
        ObjectiveSetState(gv_benchmarkFinalBenchmarkObjective, c_objectiveStateActive);
    }
    else {
        ObjectiveSetState(gv_benchmarkFinalBenchmarkObjective, c_objectiveStateActive);
    }
    gv_numBenchmarksMetThisBuild = 0;
    gv_supplyBenchmarks[0].lv_actualSupplyatBenchmarkTime = 0;
    gv_supplyBenchmarks[1].lv_actualSupplyatBenchmarkTime = 0;
    gv_supplyBenchmarks[2].lv_actualSupplyatBenchmarkTime = 0;
    gv_supplyBenchmarks[3].lv_actualSupplyatBenchmarkTime = 0;
}

void gf_ResetCurrentBuildOrderStepsVariables () {
    int autoA13422C8_ae;
    int autoA13422C8_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoA13422C8_ae = gv_maxCurrentBuildOrderStepsTracked;
    autoA13422C8_ai = 1;
    lv_i = 0;
    for ( ; ( (autoA13422C8_ai >= 0 && lv_i <= autoA13422C8_ae) || (autoA13422C8_ai <= 0 && lv_i >= autoA13422C8_ae) ) ; lv_i += autoA13422C8_ai ) {
        gv_currentBuildOrderSteps[lv_i].lv_stepType = "";
        gv_currentBuildOrderSteps[lv_i].lv_unitType = null;
        gv_currentBuildOrderSteps[lv_i].lv_upgrade = null;
        gv_currentBuildOrderSteps[lv_i].lv_ability = null;
        gv_currentBuildOrderSteps[lv_i].lv_supply = 0;
        gv_currentBuildOrderSteps[lv_i].lv_amount = 0;
        gv_currentBuildOrderSteps[lv_i].lv_elapsedSeconds = 0;
        gv_currentBuildOrderSteps[lv_i].lv_completingUnits = UnitGroupEmpty();
        gv_currentBuildOrderSteps[lv_i].lv_completingUpgrade = null;
        gv_currentBuildOrderSteps[lv_i].lv_completingAbility = null;
    }
    gv_currentBuildOrderStepCursor = 0;
    gv_buildOrderCycleOffset = 0;
    gv_currentBuildIsGasTaken = false;
    gv_currentBuildWasForked = false;
}

void gf_ResetBenchmarkBuildOrderStepsVariables () {
    int auto488B3271_ae;
    int auto488B3271_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto488B3271_ae = gv_benchmarkBuildOrderStepCursor;
    auto488B3271_ai = 1;
    lv_i = 0;
    for ( ; ( (auto488B3271_ai >= 0 && lv_i <= auto488B3271_ae) || (auto488B3271_ai <= 0 && lv_i >= auto488B3271_ae) ) ; lv_i += auto488B3271_ai ) {
        gv_benchmarkBuildOrderSteps[lv_i].lv_stepType = "";
        gv_benchmarkBuildOrderSteps[lv_i].lv_unitType = null;
        gv_benchmarkBuildOrderSteps[lv_i].lv_upgrade = null;
        gv_benchmarkBuildOrderSteps[lv_i].lv_ability = null;
        gv_benchmarkBuildOrderSteps[lv_i].lv_supply = 0;
        gv_benchmarkBuildOrderSteps[lv_i].lv_amount = 0;
        gv_benchmarkBuildOrderSteps[lv_i].lv_elapsedSeconds = 0;
        TimerStart(gv_benchmarkBuildOrderSteps[lv_i].lv_multipleUnitFailureTimer, gv_neverexpires, false, c_timeGame);
        TimerPause(gv_benchmarkBuildOrderSteps[lv_i].lv_multipleUnitFailureTimer, true);
    }
    gv_benchmarkBuildOrderStepCursor = 0;
    gv_totalNumBenchmarkBuildOrderSteps = 0;
    gv_numCompletedBenchmarkBuildOrderSteps = 0;
    gv_numFailedBenchmarkBuildOrderSteps = 0;
    gv_buildHintCursor = 0;
}

void gf_ResetBenchmarkBuildOrderObjectives () {
    int autoDBD3DAAA_ae;
    int autoDBD3DAAA_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoDBD3DAAA_ae = 9;
    autoDBD3DAAA_ai = 1;
    lv_i = 0;
    for ( ; ( (autoDBD3DAAA_ai >= 0 && lv_i <= autoDBD3DAAA_ae) || (autoDBD3DAAA_ai <= 0 && lv_i >= autoDBD3DAAA_ae) ) ; lv_i += autoDBD3DAAA_ai ) {
        ObjectiveDestroy(gv_benchmarkBuildOrderStepObjectives[lv_i]);
    }
}

void gf_ResetAlertTimers () {
    int auto453C1E1D_ae;
    int auto453C1E1D_ai;
    int auto5984B6EA_ae;
    int auto5984B6EA_ai;

    // Variable Declarations
    int lv_upgradeIndex;
    int lv_unitTypeIndex;

    // Variable Initialization

    // Implementation
    auto453C1E1D_ae = gv_alertUpgradeGapNumUpgrades;
    auto453C1E1D_ai = 1;
    lv_upgradeIndex = 0;
    for ( ; ( (auto453C1E1D_ai >= 0 && lv_upgradeIndex <= auto453C1E1D_ae) || (auto453C1E1D_ai <= 0 && lv_upgradeIndex >= auto453C1E1D_ae) ) ; lv_upgradeIndex += auto453C1E1D_ai ) {
        TextExpressionSetToken("Param/Expression/3C4987E6", "A", gf_GetFormattedUpgradeNameasText(gv_upgradeGapAlerts[lv_upgradeIndex].lv_delayedUpgrade));
        TextExpressionSetToken("Param/Expression/3C4987E6", "B", IntToText(lv_upgradeIndex));
        gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/3C4987E6"));
        TimerStart(gv_upgradeGapAlerts[lv_upgradeIndex].lv_alertTimer, gv_neverexpires, false, c_timeGame);
        TimerPause(gv_upgradeGapAlerts[lv_upgradeIndex].lv_alertTimer, true);
        gf_PauseAndStoreAlertTimerIfActive(gv_upgradeGapAlerts[lv_upgradeIndex].lv_alertTimer);
        TimerStart(gv_upgradeGapAlerts[lv_upgradeIndex].lv_cooldownTimer, gv_neverexpires, false, c_timeGame);
        TimerPause(gv_upgradeGapAlerts[lv_upgradeIndex].lv_cooldownTimer, true);
        gf_PauseAndStoreAlertTimerIfActive(gv_upgradeGapAlerts[lv_upgradeIndex].lv_cooldownTimer);
    }
    auto5984B6EA_ae = gv_productionIdleNumProductionUnitTypes;
    auto5984B6EA_ai = 1;
    lv_unitTypeIndex = 0;
    for ( ; ( (auto5984B6EA_ai >= 0 && lv_unitTypeIndex <= auto5984B6EA_ae) || (auto5984B6EA_ai <= 0 && lv_unitTypeIndex >= auto5984B6EA_ae) ) ; lv_unitTypeIndex += auto5984B6EA_ai ) {
        TextExpressionSetToken("Param/Expression/B0C0E1EF", "A", UnitTypeGetName(gv_productionIdleAlerts[lv_unitTypeIndex].lv_unitType));
        TextExpressionSetToken("Param/Expression/B0C0E1EF", "B", IntToText(lv_unitTypeIndex));
        gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/B0C0E1EF"));
        TimerStart(gv_productionIdleAlerts[lv_unitTypeIndex].lv_alertTimer, gv_neverexpires, false, c_timeGame);
        TimerPause(gv_productionIdleAlerts[lv_unitTypeIndex].lv_alertTimer, true);
        gf_PauseAndStoreAlertTimerIfActive(gv_productionIdleAlerts[lv_unitTypeIndex].lv_alertTimer);
        TimerStart(gv_productionIdleAlerts[lv_unitTypeIndex].lv_cooldownTimer, gv_neverexpires, false, c_timeGame);
        TimerPause(gv_productionIdleAlerts[lv_unitTypeIndex].lv_cooldownTimer, true);
        gf_PauseAndStoreAlertTimerIfActive(gv_productionIdleAlerts[lv_unitTypeIndex].lv_cooldownTimer);
    }
    TextExpressionSetToken("Param/Expression/466A7E42", "A", IntToText(gv_numStoredActiveAlertTimers));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/466A7E42"));
    gf_ClearStoredActiveAlertTimers();
}

void gf_ResetBenchmarkTimers () {
    // Implementation
    TimerRestart(gv_benchmark1Timer);
    TimerRestart(gv_benchmark2Timer);
    TimerRestart(gv_benchmark3Timer);
    TimerRestart(gv_finalBenchmarkTimer);
}

void gf_PauseGame () {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    gv_paused = true;
    gf_PauseAllTimers();
    UnitPauseAll(true);
}

void gf_PauseAllTimers () {
    // Implementation
    TimerPause(gv_currentBuildBuildTimer, true);
    gf_PauseBenchmarkTimers();
    gf_PauseActiveAlertTimers();
    gf_PauseActiveMultiUnitFailureTimers();
}

void gf_PauseBenchmarkTimers () {
    // Implementation
    TimerPause(gv_benchmark1Timer, true);
    TimerPause(gv_benchmark2Timer, true);
    TimerPause(gv_benchmark3Timer, true);
    TimerPause(gv_finalBenchmarkTimer, true);
}

void gf_PauseActiveAlertTimers () {
    int autoC2EA04E2_ae;
    int autoC2EA04E2_ai;
    int auto7D260D51_ae;
    int auto7D260D51_ai;

    // Variable Declarations
    int lv_upgradeIndex;
    int lv_unitTypeIndex;

    // Variable Initialization

    // Implementation
    autoC2EA04E2_ae = gv_alertUpgradeGapNumUpgrades;
    autoC2EA04E2_ai = 1;
    lv_upgradeIndex = 0;
    for ( ; ( (autoC2EA04E2_ai >= 0 && lv_upgradeIndex <= autoC2EA04E2_ae) || (autoC2EA04E2_ai <= 0 && lv_upgradeIndex >= autoC2EA04E2_ae) ) ; lv_upgradeIndex += autoC2EA04E2_ai ) {
        if ((gv_upgradeGapAlerts[lv_upgradeIndex].lv_delayedUpgrade != null)) {
            gf_PauseAndStoreAlertTimerIfActive(gv_upgradeGapAlerts[lv_upgradeIndex].lv_alertTimer);
            gf_PauseAndStoreAlertTimerIfActive(gv_upgradeGapAlerts[lv_upgradeIndex].lv_cooldownTimer);
        }
        else {
        }
    }
    auto7D260D51_ae = gv_productionIdleNumProductionUnitTypes;
    auto7D260D51_ai = 1;
    lv_unitTypeIndex = 0;
    for ( ; ( (auto7D260D51_ai >= 0 && lv_unitTypeIndex <= auto7D260D51_ae) || (auto7D260D51_ai <= 0 && lv_unitTypeIndex >= auto7D260D51_ae) ) ; lv_unitTypeIndex += auto7D260D51_ai ) {
        if ((gv_productionIdleAlerts[lv_unitTypeIndex].lv_unitType != null)) {
            gf_PauseAndStoreAlertTimerIfActive(gv_productionIdleAlerts[lv_unitTypeIndex].lv_alertTimer);
            gf_PauseAndStoreAlertTimerIfActive(gv_productionIdleAlerts[lv_unitTypeIndex].lv_cooldownTimer);
        }
        else {
        }
    }
    TextExpressionSetToken("Param/Expression/D173786C", "A", IntToText(gv_numStoredActiveAlertTimers));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/D173786C"));
}

void gf_PauseAndStoreAlertTimerIfActive (timer lp_timer) {
    // Implementation
    if (((TimerIsPaused(lp_timer) == false) && (TimerGetRemaining(lp_timer) > 0.0))) {
        gv_activeAlertTimers[gv_numStoredActiveAlertTimers] = lp_timer;
        TimerPause(lp_timer, true);
        gv_numStoredActiveAlertTimers += 1;
    }
    else {
    }
}

void gf_PauseActiveMultiUnitFailureTimers () {
    int auto617D7A49_ae;
    int auto617D7A49_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto617D7A49_ae = gv_benchmarkBuildOrderStepCursor;
    auto617D7A49_ai = 1;
    lv_i = 0;
    for ( ; ( (auto617D7A49_ai >= 0 && lv_i <= auto617D7A49_ae) || (auto617D7A49_ai <= 0 && lv_i >= auto617D7A49_ae) ) ; lv_i += auto617D7A49_ai ) {
        if ((gv_benchmarkBuildOrderSteps[lv_i].lv_amount > 1)) {
            gf_PauseAndStoreMultiUnitFailureTimerIfActive(gv_benchmarkBuildOrderSteps[lv_i].lv_multipleUnitFailureTimer);
        }
        else {
        }
    }
    TextExpressionSetToken("Param/Expression/4ED3735D", "A", IntToText(gv_numStoredActiveMultiUnitFailureTimers));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/4ED3735D"));
}

void gf_PauseAndStoreMultiUnitFailureTimerIfActive (timer lp_timer) {
    // Implementation
    if (((TimerIsPaused(lp_timer) == false) && (TimerGetRemaining(lp_timer) > 0.0))) {
        gv_activeMultiUnitFailureTimers[gv_numStoredActiveMultiUnitFailureTimers] = lp_timer;
        TimerPause(lp_timer, true);
        gv_numStoredActiveMultiUnitFailureTimers += 1;
    }
    else {
    }
}

void gf_UnpauseGame () {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    gf_UnpauseAllTimers();
    UnitPauseAll(false);
    gv_paused = false;
}

void gf_UnpauseAllTimers () {
    // Implementation
    gf_UnpauseBenchmarkTimers();
    gf_UnpauseActiveAlertTimers();
    gf_UnpauseActiveMultiUnitFailureTimers();
    gf_ClearStoredActiveAlertTimers();
    gf_ClearStoredActiveMultiUnitFailureTimers();
    TimerPause(gv_currentBuildBuildTimer, false);
}

void gf_UnpauseBenchmarkTimers () {
    // Implementation
    TimerPause(gv_benchmark1Timer, false);
    TimerPause(gv_benchmark2Timer, false);
    TimerPause(gv_benchmark3Timer, false);
    TimerPause(gv_finalBenchmarkTimer, false);
}

void gf_UnpauseActiveAlertTimers () {
    int auto35F4B622_ae;
    int auto35F4B622_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    auto35F4B622_ae = gv_numStoredActiveAlertTimers;
    auto35F4B622_ai = 1;
    lv_index = 0;
    for ( ; ( (auto35F4B622_ai >= 0 && lv_index <= auto35F4B622_ae) || (auto35F4B622_ai <= 0 && lv_index >= auto35F4B622_ae) ) ; lv_index += auto35F4B622_ai ) {
        TimerPause(gv_activeAlertTimers[lv_index], false);
    }
    TextExpressionSetToken("Param/Expression/07449D5C", "A", IntToText(gv_numStoredActiveAlertTimers));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/07449D5C"));
}

void gf_UnpauseActiveMultiUnitFailureTimers () {
    int auto21C7D7EA_ae;
    int auto21C7D7EA_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    auto21C7D7EA_ae = gv_numStoredActiveMultiUnitFailureTimers;
    auto21C7D7EA_ai = 1;
    lv_index = 0;
    for ( ; ( (auto21C7D7EA_ai >= 0 && lv_index <= auto21C7D7EA_ae) || (auto21C7D7EA_ai <= 0 && lv_index >= auto21C7D7EA_ae) ) ; lv_index += auto21C7D7EA_ai ) {
        TimerPause(gv_activeMultiUnitFailureTimers[lv_index], false);
    }
    TextExpressionSetToken("Param/Expression/57B49AF4", "A", IntToText(gv_numStoredActiveMultiUnitFailureTimers));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/57B49AF4"));
}

void gf_ClearStoredActiveAlertTimers () {
    int auto671DADCF_ae;
    int auto671DADCF_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    auto671DADCF_ae = gv_numStoredActiveAlertTimers;
    auto671DADCF_ai = 1;
    lv_index = 0;
    for ( ; ( (auto671DADCF_ai >= 0 && lv_index <= auto671DADCF_ae) || (auto671DADCF_ai <= 0 && lv_index >= auto671DADCF_ae) ) ; lv_index += auto671DADCF_ai ) {
        gv_activeAlertTimers[lv_index] = null;
    }
    TextExpressionSetToken("Param/Expression/C15D3C9B", "A", IntToText(gv_numStoredActiveAlertTimers));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/C15D3C9B"));
    gv_numStoredActiveAlertTimers = 0;
}

void gf_ClearStoredActiveMultiUnitFailureTimers () {
    int autoEE1768E8_ae;
    int autoEE1768E8_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    autoEE1768E8_ae = gv_numStoredActiveMultiUnitFailureTimers;
    autoEE1768E8_ai = 1;
    lv_index = 0;
    for ( ; ( (autoEE1768E8_ai >= 0 && lv_index <= autoEE1768E8_ae) || (autoEE1768E8_ai <= 0 && lv_index >= autoEE1768E8_ae) ) ; lv_index += autoEE1768E8_ai ) {
        gv_activeMultiUnitFailureTimers[lv_index] = null;
    }
    TextExpressionSetToken("Param/Expression/830069E2", "A", IntToText(gv_numStoredActiveMultiUnitFailureTimers));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/830069E2"));
    gv_numStoredActiveMultiUnitFailureTimers = 0;
}

void gf_CreateScreenButtons () {
    // Implementation
    libNtve_gf_DisplayScreenButton(1, StringExternal("Param/Value/91F27B53"), gv_screenButtonWidth, gv_screenButtonHeight, c_anchorTopRight, gv_screenButtonXPadding, gv_screenButtonYPadding, gt_OpenMainMenu);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/B441E0B5"), PlayerGroupAll());
    libNtve_gf_DisplayScreenButton(2, StringExternal("Param/Value/A77D2D5B"), gv_screenButtonWidth, gv_screenButtonHeight, c_anchorTopRight, gv_screenButtonXPadding, (gv_screenButtonYPadding+gv_screenButtonHeight), gt_OpenHelpDialog);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/D2D6DF2E"), PlayerGroupAll());
    libNtve_gf_DisplayScreenButton(3, StringExternal("Param/Value/70C261D0"), gv_screenButtonWidth, gv_screenButtonHeight, c_anchorTopRight, gv_screenButtonXPadding, (gv_screenButtonYPadding+2*gv_screenButtonHeight), gt_OpenStatsDialog);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/E706FEFB"), PlayerGroupAll());
    libNtve_gf_DisplayScreenButton(4, StringExternal("Param/Value/5091C154"), gv_screenButtonWidth, gv_screenButtonHeight, c_anchorTopRight, gv_screenButtonXPadding, (gv_screenButtonYPadding+3*gv_screenButtonHeight), gt_ResetBuild);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/55E832AB"), PlayerGroupAll());
    libNtve_gf_DisplayScreenButton(5, StringExternal("Param/Value/13AB0492"), gv_winButtonWidth, gv_winButtonHeight, c_anchorBottomRight, gv_winButtonXPadding, gf_GetWinButtonYPadding(), gt_EndGame);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/1CABB5B1"), PlayerGroupAll());
}

bool gf_IsOverlordCurrentlyInProgress () {
    // Implementation
    if ((gv_numMorphingOverlords > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsSupplyDepotorPylonUnderConstruction () {
    unitgroup auto54B9016D_g;
    int auto54B9016D_u;

    // Variable Declarations
    unit lv_currentUnit;
    bool lv_result;

    // Variable Initialization

    // Implementation
    auto54B9016D_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), 0, 0), 0);
    auto54B9016D_u = 1;
    for ( ; auto54B9016D_u <= UnitGroupCount(auto54B9016D_g, c_unitCountAll) ; auto54B9016D_u += BoolToInt(lv_currentUnit == UnitGroupUnit(auto54B9016D_g, auto54B9016D_u)) ) {
        lv_currentUnit = UnitGroupUnit(auto54B9016D_g, auto54B9016D_u);
        if (((UnitGetType(lv_currentUnit) == "SupplyDepot") || (UnitGetType(lv_currentUnit) == "Pylon"))) {
            lv_result = true;
        }
        else {
        }
    }
    return lv_result;
}

text gf_GetRaceMacroUnitName () {
    string auto30CFABC8_val;

    // Implementation
    auto30CFABC8_val = PlayerRace(1);
    if (auto30CFABC8_val == "Terr") {
        return UnitTypeGetName("OrbitalCommand");
    }
    else if (auto30CFABC8_val == "Prot") {
        return UnitTypeGetName("Nexus");
    }
    else if (auto30CFABC8_val == "Zerg") {
        return UnitTypeGetName("Queen");
    }
    else {
        return StringExternal("Param/Value/584FC4D9");
    }
}

int gf_GetDefaultMacroEnergyThreshold () {
    string autoBAC892F0_val;

    // Variable Declarations
    int lv_result;

    // Variable Initialization

    // Implementation
    autoBAC892F0_val = PlayerRace(1);
    if (autoBAC892F0_val == "Terr") {
        lv_result = gv_alertTerranDefaultMacroEnergyThreshold;
    }
    else if (autoBAC892F0_val == "Zerg") {
        lv_result = gv_alertZergDefaultMacroEnergyThreshold;
    }
    else if (autoBAC892F0_val == "Prot") {
        lv_result = gv_alertProtossDefaultMacroEnergyThreshold;
    }
    else {
    }
    return lv_result;
}

bool gf_IsRaceMacroEnergyAboveThreshold () {
    unitgroup autoEE6E2050_g;
    int autoEE6E2050_u;

    // Variable Declarations
    bool lv_result;
    unit lv_currentunit;

    // Variable Initialization

    // Implementation
    autoEE6E2050_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEE6E2050_u = 1;
    for ( ; autoEE6E2050_u <= UnitGroupCount(autoEE6E2050_g, c_unitCountAll) ; autoEE6E2050_u += BoolToInt(lv_currentunit == UnitGroupUnit(autoEE6E2050_g, autoEE6E2050_u)) ) {
        lv_currentunit = UnitGroupUnit(autoEE6E2050_g, autoEE6E2050_u);
        if (((UnitGetPropertyFixed(lv_currentunit, c_unitPropEnergy, c_unitPropCurrent) > gv_alertSelectedMacroEnergyThreshold) && ((UnitGetType(lv_currentunit) == "Queen") || (UnitGetType(lv_currentunit) == "QueenBurrowed") || (UnitGetType(lv_currentunit) == "OrbitalCommand") || (UnitGetType(lv_currentunit) == "OrbitalCommandFlying") || (UnitGetType(lv_currentunit) == "Nexus")))) {
            lv_result = true;
        }
        else {
        }
    }
    return lv_result;
}

bool gf_IsTimerAnUpgradeGapTimer (timer lp_timer) {
    int auto46DC4CF0_ae;
    int auto46DC4CF0_ai;

    // Variable Declarations
    int lv_i;
    bool lv_result;

    // Variable Initialization

    // Implementation
    auto46DC4CF0_ae = gv_productionIdleNumProductionUnitTypes;
    auto46DC4CF0_ai = 1;
    lv_i = 0;
    for ( ; ( (auto46DC4CF0_ai >= 0 && lv_i <= auto46DC4CF0_ae) || (auto46DC4CF0_ai <= 0 && lv_i >= auto46DC4CF0_ae) ) ; lv_i += auto46DC4CF0_ai ) {
        if (((lp_timer == gv_upgradeGapAlerts[lv_i].lv_alertTimer) || (lp_timer == gv_upgradeGapAlerts[lv_i].lv_cooldownTimer))) {
            lv_result = true;
        }
        else {
        }
    }
    return lv_result;
}

bool gf_DoesUpgradeGapAlertExistForUpgrade (string lp_upgrade) {
    int auto253CAD9C_ae;
    int auto253CAD9C_ai;

    // Variable Declarations
    int lv_i;
    bool lv_result;

    // Variable Initialization

    // Implementation
    auto253CAD9C_ae = gv_alertUpgradeGapNumUpgrades;
    auto253CAD9C_ai = 1;
    lv_i = 0;
    for ( ; ( (auto253CAD9C_ai >= 0 && lv_i <= auto253CAD9C_ae) || (auto253CAD9C_ai <= 0 && lv_i >= auto253CAD9C_ae) ) ; lv_i += auto253CAD9C_ai ) {
        if ((gv_upgradeGapAlerts[lv_i].lv_delayedUpgrade == lp_upgrade)) {
            lv_result = true;
        }
        else {
        }
    }
    return lv_result;
}

string gf_GetNextUpgrade (string lp_currentUpgrade) {
    string autoB7B7DC32_val;

    // Implementation
    autoB7B7DC32_val = lp_currentUpgrade;
    if (autoB7B7DC32_val == "ProtossAirArmorsLevel1") {
        return "ProtossAirArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "ProtossAirArmorsLevel2") {
        return "ProtossAirArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "ProtossGroundArmorsLevel1") {
        return "ProtossGroundArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "ProtossGroundArmorsLevel2") {
        return "ProtossGroundArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "ProtossShieldsLevel1") {
        return "ProtossShieldsLevel2";
    }
    else if (autoB7B7DC32_val == "ProtossShieldsLevel2") {
        return "ProtossShieldsLevel3";
    }
    else if (autoB7B7DC32_val == "ProtossAirWeaponsLevel1") {
        return "ProtossAirWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "ProtossAirWeaponsLevel2") {
        return "ProtossAirWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "ProtossGroundWeaponsLevel1") {
        return "ProtossGroundWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "ProtossGroundWeaponsLevel2") {
        return "ProtossGroundWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranInfantryArmorsLevel1") {
        return "TerranInfantryArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranInfantryArmorsLevel2") {
        return "TerranInfantryArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranShipArmorsLevel1") {
        return "TerranShipArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranShipArmorsLevel2") {
        return "TerranShipArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranVehicleArmorsLevel1") {
        return "TerranVehicleArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranVehicleArmorsLevel2") {
        return "TerranVehicleArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranVehicleAndShipArmorsLevel1") {
        return "TerranVehicleAndShipArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranVehicleAndShipArmorsLevel2") {
        return "TerranVehicleAndShipArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranInfantryWeaponsLevel1") {
        return "TerranInfantryWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranInfantryWeaponsLevel2") {
        return "TerranInfantryWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranShipWeaponsLevel1") {
        return "TerranShipWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranShipWeaponsLevel2") {
        return "TerranShipWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranVehicleWeaponsLevel1") {
        return "TerranVehicleWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranVehicleWeaponsLevel2") {
        return "TerranVehicleWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranVehicleAndShipWeaponsLevel1") {
        return "TerranVehicleAndShipWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranVehicleAndShipWeaponsLevel2") {
        return "TerranVehicleAndShipWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "ZergFlyerArmorsLevel1") {
        return "ZergFlyerArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "ZergFlyerArmorsLevel2") {
        return "ZergFlyerArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "ZergGroundArmorsLevel1") {
        return "ZergGroundArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "ZergGroundArmorsLevel2") {
        return "ZergGroundArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "ZergFlyerWeaponsLevel1") {
        return "ZergFlyerWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "ZergFlyerWeaponsLevel2") {
        return "ZergFlyerWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "ZergMeleeWeaponsLevel1") {
        return "ZergMeleeWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "ZergMeleeWeaponsLevel2") {
        return "ZergMeleeWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "ZergMissileWeaponsLevel1") {
        return "ZergMissileWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "ZergMissileWeaponsLevel2") {
        return "ZergMissileWeaponsLevel3";
    }
    else {
        return "";
    }
}

bool gf_ShouldUpgradeTypeTriggerStartAlertTimer (string lp_upgrade) {
    // Implementation
    if (((lp_upgrade == "ProtossGroundWeaponsLevel1") || (lp_upgrade == "ProtossGroundWeaponsLevel2") || (lp_upgrade == "ProtossAirWeaponsLevel1") || (lp_upgrade == "ProtossAirWeaponsLevel2") || (lp_upgrade == "ProtossAirArmorsLevel1") || (lp_upgrade == "ProtossAirArmorsLevel2") || (lp_upgrade == "ProtossGroundArmorsLevel1") || (lp_upgrade == "ProtossGroundArmorsLevel2") || (lp_upgrade == "ProtossShieldsLevel1") || (lp_upgrade == "ProtossShieldsLevel2") || (lp_upgrade == "TerranInfantryWeaponsLevel1") || (lp_upgrade == "TerranInfantryWeaponsLevel2") || (lp_upgrade == "TerranShipWeaponsLevel1") || (lp_upgrade == "TerranShipWeaponsLevel2") || (lp_upgrade == "TerranVehicleWeaponsLevel1") || (lp_upgrade == "TerranVehicleWeaponsLevel2") || (lp_upgrade == "TerranVehicleAndShipWeaponsLevel1") || (lp_upgrade == "TerranVehicleAndShipWeaponsLevel2") || (lp_upgrade == "TerranInfantryArmorsLevel1") || (lp_upgrade == "TerranInfantryArmorsLevel2") || (lp_upgrade == "TerranShipArmorsLevel1") || (lp_upgrade == "TerranShipArmorsLevel2") || (lp_upgrade == "TerranVehicleArmorsLevel1") || (lp_upgrade == "TerranVehicleArmorsLevel2") || (lp_upgrade == "TerranVehicleAndShipArmorsLevel1") || (lp_upgrade == "TerranVehicleAndShipArmorsLevel2") || (lp_upgrade == "ZergMeleeWeaponsLevel1") || (lp_upgrade == "ZergMeleeWeaponsLevel2") || (lp_upgrade == "ZergMissileWeaponsLevel1") || (lp_upgrade == "ZergMissileWeaponsLevel2") || (lp_upgrade == "ZergFlyerWeaponsLevel1") || (lp_upgrade == "ZergFlyerWeaponsLevel2") || (lp_upgrade == "ZergGroundArmorsLevel1") || (lp_upgrade == "ZergGroundArmorsLevel2") || (lp_upgrade == "ZergFlyerArmorsLevel1") || (lp_upgrade == "ZergFlyerArmorsLevel2"))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_CanUpgradeBeResearchedRightNow (string lp_upgrade) {
    unitgroup autoECC770B0_g;
    int autoECC770B0_u;

    // Variable Declarations
    bool lv_upgradeCanBeResearched;
    string lv_researchStructureUnitType;
    unitgroup lv_researchStructures;
    unit lv_currentUnit;

    // Variable Initialization
    lv_researchStructures = UnitGroupEmpty();

    // Implementation
    lv_researchStructureUnitType = gf_GetResearchStructureUnitTypeForAttackDefenseUpgrade(lp_upgrade);
    lv_researchStructures = gf_GetAllPlayerUnitsforType(1, lv_researchStructureUnitType);
    autoECC770B0_g = lv_researchStructures;
    autoECC770B0_u = 1;
    for ( ; autoECC770B0_u <= UnitGroupCount(autoECC770B0_g, c_unitCountAll) ; autoECC770B0_u += BoolToInt(lv_currentUnit == UnitGroupUnit(autoECC770B0_g, autoECC770B0_u)) ) {
        lv_currentUnit = UnitGroupUnit(autoECC770B0_g, autoECC770B0_u);
        if (((libNtve_gf_UnitIsUnderConstruction(lv_currentUnit) == false) && (UnitQueueGetProperty(lv_currentUnit, c_unitQueuePropertyUsed) == 0))) {
            lv_upgradeCanBeResearched = true;
            TextExpressionSetToken("Param/Expression/AE9197EA", "A", UnitTypeGetName(lv_researchStructureUnitType));
            TextExpressionSetToken("Param/Expression/AE9197EA", "B", gf_GetFormattedUpgradeNameasText(lp_upgrade));
            gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/AE9197EA"));
        }
        else {
            TextExpressionSetToken("Param/Expression/DE1053B7", "A", UnitTypeGetName(lv_researchStructureUnitType));
            gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/DE1053B7"));
        }
    }
    return lv_upgradeCanBeResearched;
}

bool gf_ShouldUpgradeTypeTriggerStopAlertTimer (string lp_upgrade) {
    // Implementation
    if (((lp_upgrade == "ProtossGroundArmorsLevel2") || (lp_upgrade == "ProtossGroundArmorsLevel3") || (lp_upgrade == "ProtossShieldsLevel2") || (lp_upgrade == "ProtossShieldsLevel3") || (lp_upgrade == "ProtossAirArmorsLevel2") || (lp_upgrade == "ProtossAirArmorsLevel3") || (lp_upgrade == "ProtossGroundWeaponsLevel2") || (lp_upgrade == "ProtossGroundWeaponsLevel3") || (lp_upgrade == "ProtossAirWeaponsLevel2") || (lp_upgrade == "ProtossAirWeaponsLevel3") || (lp_upgrade == "TerranInfantryArmorsLevel2") || (lp_upgrade == "TerranInfantryArmorsLevel3") || (lp_upgrade == "TerranShipArmorsLevel2") || (lp_upgrade == "TerranShipArmorsLevel3") || (lp_upgrade == "TerranVehicleArmorsLevel2") || (lp_upgrade == "TerranVehicleArmorsLevel3") || (lp_upgrade == "TerranVehicleAndShipArmorsLevel2") || (lp_upgrade == "TerranVehicleAndShipArmorsLevel3") || (lp_upgrade == "TerranInfantryWeaponsLevel2") || (lp_upgrade == "TerranInfantryWeaponsLevel3") || (lp_upgrade == "TerranShipWeaponsLevel2") || (lp_upgrade == "TerranShipWeaponsLevel3") || (lp_upgrade == "TerranVehicleWeaponsLevel2") || (lp_upgrade == "TerranVehicleWeaponsLevel3") || (lp_upgrade == "TerranVehicleAndShipWeaponsLevel2") || (lp_upgrade == "TerranVehicleAndShipWeaponsLevel3") || (lp_upgrade == "ZergGroundArmorsLevel2") || (lp_upgrade == "ZergGroundArmorsLevel3") || (lp_upgrade == "ZergFlyerArmorsLevel2") || (lp_upgrade == "ZergFlyerArmorsLevel3") || (lp_upgrade == "ZergMeleeWeaponsLevel2") || (lp_upgrade == "ZergMeleeWeaponsLevel3") || (lp_upgrade == "ZergMissileWeaponsLevel2") || (lp_upgrade == "ZergMissileWeaponsLevel3") || (lp_upgrade == "ZergFlyerWeaponsLevel2") || (lp_upgrade == "ZergFlyerWeaponsLevel3"))) {
        return true;
    }
    else {
        return false;
    }
}

int gf_GetUpgradeGapAlertIndexForUpgrade (string lp_upgrade) {
    int auto7166ED13_ae;
    int auto7166ED13_ai;

    // Variable Declarations
    int lv_result;
    int lv_i;

    // Variable Initialization

    // Implementation
    auto7166ED13_ae = gv_alertUpgradeGapNumUpgrades;
    auto7166ED13_ai = 1;
    lv_i = 0;
    for ( ; ( (auto7166ED13_ai >= 0 && lv_i <= auto7166ED13_ae) || (auto7166ED13_ai <= 0 && lv_i >= auto7166ED13_ae) ) ; lv_i += auto7166ED13_ai ) {
        if ((lp_upgrade == gv_upgradeGapAlerts[lv_i].lv_delayedUpgrade)) {
            lv_result = lv_i;
            break;
        }
        else {
        }
    }
    return lv_result;
}

int gf_GetUpgradeGapAlertIndexForTimer (timer lp_timer) {
    int auto4EC80954_ae;
    int auto4EC80954_ai;

    // Variable Declarations
    int lv_i;
    int lv_result;

    // Variable Initialization

    // Implementation
    auto4EC80954_ae = gv_alertUpgradeGapNumUpgrades;
    auto4EC80954_ai = 1;
    lv_i = 0;
    for ( ; ( (auto4EC80954_ai >= 0 && lv_i <= auto4EC80954_ae) || (auto4EC80954_ai <= 0 && lv_i >= auto4EC80954_ae) ) ; lv_i += auto4EC80954_ai ) {
        if (((lp_timer == gv_upgradeGapAlerts[lv_i].lv_alertTimer) || (lp_timer == gv_upgradeGapAlerts[lv_i].lv_cooldownTimer))) {
            lv_result = lv_i;
            break;
        }
        else {
        }
    }
    return lv_result;
}

string gf_GetResearchStructureUnitTypeForAttackDefenseUpgrade (string lp_upgrade) {
    // Variable Declarations
    string lv_result;

    // Variable Initialization

    // Implementation
    if (((lp_upgrade == "ProtossAirArmorsLevel1") || (lp_upgrade == "ProtossAirArmorsLevel2") || (lp_upgrade == "ProtossAirArmorsLevel3") || (lp_upgrade == "ProtossAirWeaponsLevel1") || (lp_upgrade == "ProtossAirWeaponsLevel2") || (lp_upgrade == "ProtossAirWeaponsLevel3"))) {
        lv_result = "CyberneticsCore";
    }
    else if (((lp_upgrade == "ProtossGroundArmorsLevel1") || (lp_upgrade == "ProtossGroundArmorsLevel2") || (lp_upgrade == "ProtossGroundArmorsLevel3") || (lp_upgrade == "ProtossShieldsLevel1") || (lp_upgrade == "ProtossShieldsLevel2") || (lp_upgrade == "ProtossShieldsLevel3") || (lp_upgrade == "ProtossGroundWeaponsLevel1") || (lp_upgrade == "ProtossGroundWeaponsLevel2") || (lp_upgrade == "ProtossGroundWeaponsLevel3"))) {
        lv_result = "Forge";
    }
    else if (((lp_upgrade == "TerranInfantryArmorsLevel1") || (lp_upgrade == "TerranInfantryArmorsLevel2") || (lp_upgrade == "TerranInfantryArmorsLevel3") || (lp_upgrade == "TerranInfantryWeaponsLevel1") || (lp_upgrade == "TerranInfantryWeaponsLevel2") || (lp_upgrade == "TerranInfantryWeaponsLevel3"))) {
        lv_result = "EngineeringBay";
    }
    else if (((lp_upgrade == "TerranShipArmorsLevel1") || (lp_upgrade == "TerranShipArmorsLevel2") || (lp_upgrade == "TerranShipArmorsLevel3") || (lp_upgrade == "TerranVehicleArmorsLevel1") || (lp_upgrade == "TerranVehicleArmorsLevel2") || (lp_upgrade == "TerranVehicleArmorsLevel3") || (lp_upgrade == "TerranVehicleAndShipArmorsLevel1") || (lp_upgrade == "TerranVehicleAndShipArmorsLevel2") || (lp_upgrade == "TerranVehicleAndShipArmorsLevel3") || (lp_upgrade == "TerranShipWeaponsLevel1") || (lp_upgrade == "TerranShipWeaponsLevel2") || (lp_upgrade == "TerranShipWeaponsLevel3") || (lp_upgrade == "TerranVehicleWeaponsLevel1") || (lp_upgrade == "TerranVehicleWeaponsLevel2") || (lp_upgrade == "TerranVehicleWeaponsLevel3") || (lp_upgrade == "TerranVehicleAndShipWeaponsLevel1") || (lp_upgrade == "TerranVehicleAndShipWeaponsLevel2") || (lp_upgrade == "TerranVehicleAndShipWeaponsLevel3"))) {
        lv_result = "Armory";
    }
    else if (((lp_upgrade == "ZergMeleeWeaponsLevel1") || (lp_upgrade == "ZergMeleeWeaponsLevel2") || (lp_upgrade == "ZergMeleeWeaponsLevel3") || (lp_upgrade == "ZergMissileWeaponsLevel1") || (lp_upgrade == "ZergMissileWeaponsLevel2") || (lp_upgrade == "ZergMissileWeaponsLevel3") || (lp_upgrade == "ZergGroundArmorsLevel1") || (lp_upgrade == "ZergGroundArmorsLevel2") || (lp_upgrade == "ZergGroundArmorsLevel3"))) {
        lv_result = "EvolutionChamber";
    }
    else if (((lp_upgrade == "ZergFlyerArmorsLevel1") || (lp_upgrade == "ZergFlyerArmorsLevel2") || (lp_upgrade == "ZergFlyerArmorsLevel3") || (lp_upgrade == "ZergFlyerWeaponsLevel1") || (lp_upgrade == "ZergFlyerWeaponsLevel2") || (lp_upgrade == "ZergFlyerWeaponsLevel3"))) {
        lv_result = "Spire";
    }
    TextExpressionSetToken("Param/Expression/4967CDDE", "A", UnitTypeGetName(lv_result));
    TextExpressionSetToken("Param/Expression/4967CDDE", "B", gf_GetFormattedUpgradeNameasText(lp_upgrade));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/4967CDDE"));
    return lv_result;
}

bool gf_IsTimeraProductionIdleTimer (timer lp_timer) {
    int autoD5049005_ae;
    int autoD5049005_ai;

    // Variable Declarations
    int lv_i;
    bool lv_result;

    // Variable Initialization

    // Implementation
    autoD5049005_ae = gv_productionIdleNumProductionUnitTypes;
    autoD5049005_ai = 1;
    lv_i = 0;
    for ( ; ( (autoD5049005_ai >= 0 && lv_i <= autoD5049005_ae) || (autoD5049005_ai <= 0 && lv_i >= autoD5049005_ae) ) ; lv_i += autoD5049005_ai ) {
        if (((lp_timer == gv_productionIdleAlerts[lv_i].lv_alertTimer) || (lp_timer == gv_productionIdleAlerts[lv_i].lv_cooldownTimer))) {
            lv_result = true;
        }
        else {
        }
    }
    return lv_result;
}

bool gf_DoesProductionIdleAlertExistForUnitType (string lp_unitType) {
    int auto4C73585D_ae;
    int auto4C73585D_ai;

    // Variable Declarations
    int lv_i;
    bool lv_result;

    // Variable Initialization

    // Implementation
    auto4C73585D_ae = gv_productionIdleNumProductionUnitTypes;
    auto4C73585D_ai = 1;
    lv_i = 0;
    for ( ; ( (auto4C73585D_ai >= 0 && lv_i <= auto4C73585D_ae) || (auto4C73585D_ai <= 0 && lv_i >= auto4C73585D_ae) ) ; lv_i += auto4C73585D_ai ) {
        if ((gv_productionIdleAlerts[lv_i].lv_unitType == lp_unitType)) {
            lv_result = true;
        }
        else {
        }
    }
    return lv_result;
}

bool gf_IsUnitTypeaProductionIdleType (string lp_unitType) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if (((lp_unitType == "Larva") || (lp_unitType == "Egg") || (lp_unitType == "CommandCenter") || (lp_unitType == "OrbitalCommand") || (lp_unitType == "PlanetaryFortress") || (lp_unitType == "Barracks") || (lp_unitType == "Factory") || (lp_unitType == "Starport") || (lp_unitType == "Nexus") || (lp_unitType == "Gateway") || (lp_unitType == "RoboticsFacility") || (lp_unitType == "Stargate")) && (true)) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    return lv_result;
}

bool gf_IsAnyProductionUnitTypeQueueIdle () {
    int autoBD02A5A8_ae;
    int autoBD02A5A8_ai;

    // Variable Declarations
    bool lv_result;
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((gv_productionIdleNumProductionUnitTypes > 0)) {
        autoBD02A5A8_ae = (gv_productionIdleNumProductionUnitTypes-1);
        autoBD02A5A8_ai = 1;
        lv_i = 0;
        for ( ; ( (autoBD02A5A8_ai >= 0 && lv_i <= autoBD02A5A8_ae) || (autoBD02A5A8_ai <= 0 && lv_i >= autoBD02A5A8_ae) ) ; lv_i += autoBD02A5A8_ai ) {
            if ((gf_IsProductionIdleForUnitType(gv_productionIdleAlerts[lv_i].lv_unitType, true) == true)) {
                lv_result = true;
            }
            else {
            }
        }
    }
    else {
    }
    return lv_result;
}

bool gf_IsProductionIdleForUnitType (string lp_unitType, bool lp_squelchDebugSpam) {
    unitgroup auto9BA590D3_g;
    int auto9BA590D3_u;

    // Variable Declarations
    unit lv_currenUnit;
    bool lv_queueIsEmpty;
    unitgroup lv_currentProductionUnits;
    bool lv_unitTypeProductionIsIdle;

    // Variable Initialization
    lv_currentProductionUnits = UnitGroupEmpty();

    // Implementation
    if ((PlayerRace(1) == "Zerg")) {
        lv_unitTypeProductionIsIdle = gf_DoesZergHaveLarvaToSpendAndNoUnitsMorphing();
    }
    else {
        lv_queueIsEmpty = true;
        lv_currentProductionUnits = gf_GetAllPlayerUnitsforType(1, lp_unitType);
        auto9BA590D3_g = lv_currentProductionUnits;
        auto9BA590D3_u = 1;
        for ( ; auto9BA590D3_u <= UnitGroupCount(auto9BA590D3_g, c_unitCountAll) ; auto9BA590D3_u += BoolToInt(lv_currenUnit == UnitGroupUnit(auto9BA590D3_g, auto9BA590D3_u)) ) {
            lv_currenUnit = UnitGroupUnit(auto9BA590D3_g, auto9BA590D3_u);
            if ((libNtve_gf_UnitIsUnderConstruction(lv_currenUnit) == false)) {
                if ((UnitQueueGetProperty(lv_currenUnit, c_unitQueuePropertyUsed) > 0)) {
                    lv_queueIsEmpty = false;
                    if ((lp_squelchDebugSpam == false)) {
                        TextExpressionSetToken("Param/Expression/33B8FAEE", "A", UnitTypeGetName(lp_unitType));
                        gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/33B8FAEE"));
                    }
                    else {
                    }
                }
                else {
                    if ((gf_IsUnitBusyResearchinganUpgrade(lv_currenUnit) == true)) {
                        lv_queueIsEmpty = false;
                        if ((lp_squelchDebugSpam == false)) {
                            TextExpressionSetToken("Param/Expression/987CB6FA", "A", UnitTypeGetName(UnitGetType(lv_currenUnit)));
                            gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/987CB6FA"));
                        }
                        else {
                        }
                    }
                    else {
                        lv_queueIsEmpty = true;
                        if ((lp_squelchDebugSpam == false)) {
                            TextExpressionSetToken("Param/Expression/91F3C79E", "A", UnitTypeGetName(UnitGetType(lv_currenUnit)));
                            gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/91F3C79E"));
                        }
                        else {
                        }
                    }
                }
            }
            else {
                if ((lp_squelchDebugSpam == false)) {
                    TextExpressionSetToken("Param/Expression/81E51FF8", "A", UnitTypeGetName(lp_unitType));
                    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/81E51FF8"));
                }
                else {
                }
            }
        }
        lv_unitTypeProductionIsIdle = lv_queueIsEmpty;
    }
    if ((lp_squelchDebugSpam == false)) {
        TextExpressionSetToken("Param/Expression/204E47CC", "A", UnitTypeGetName(lp_unitType));
        TextExpressionSetToken("Param/Expression/204E47CC", "B", libNtve_gf_ConvertBooleanToText(lv_queueIsEmpty));
        gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/204E47CC"));
    }
    else {
    }
    return lv_unitTypeProductionIsIdle;
}

bool gf_IsUnitBusyResearchinganUpgrade (unit lp_unit) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if ((UnitQueueGetProperty(lp_unit, c_unitQueuePropertyAvailable) == 0)) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    return lv_result;
}

bool gf_DoesZergHaveLarvaToSpendAndNoUnitsMorphing () {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if (((TechTreeUnitCount(1, "Egg", c_techCountQueuedOrBetter) == 0) && (TechTreeUnitCount(1, "Larva", c_techCountQueuedOrBetter) > 0) && ((PlayerScoreValueGetAsInt(1, "FoodUsed") >= 12) || (TimerGetElapsed(gv_currentBuildBuildTimer) > 90.0)))) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    return lv_result;
}

int gf_GetProductionIdleAlertIndexForUnitType (string lp_unitType) {
    int autoD4F7F426_ae;
    int autoD4F7F426_ai;

    // Variable Declarations
    int lv_result;
    int lv_i;

    // Variable Initialization

    // Implementation
    autoD4F7F426_ae = gv_productionIdleNumProductionUnitTypes;
    autoD4F7F426_ai = 1;
    lv_i = 0;
    for ( ; ( (autoD4F7F426_ai >= 0 && lv_i <= autoD4F7F426_ae) || (autoD4F7F426_ai <= 0 && lv_i >= autoD4F7F426_ae) ) ; lv_i += autoD4F7F426_ai ) {
        if ((lp_unitType == gv_productionIdleAlerts[lv_i].lv_unitType)) {
            lv_result = lv_i;
            break;
        }
        else {
        }
    }
    return lv_result;
}

int gf_GetProductionIdleAlertIndexForTimer (timer lp_timer) {
    int auto852680E5_ae;
    int auto852680E5_ai;

    // Variable Declarations
    int lv_result;
    int lv_i;

    // Variable Initialization

    // Implementation
    auto852680E5_ae = gv_productionIdleNumProductionUnitTypes;
    auto852680E5_ai = 1;
    lv_i = 0;
    for ( ; ( (auto852680E5_ai >= 0 && lv_i <= auto852680E5_ae) || (auto852680E5_ai <= 0 && lv_i >= auto852680E5_ae) ) ; lv_i += auto852680E5_ai ) {
        if (((lp_timer == gv_productionIdleAlerts[lv_i].lv_alertTimer) || (lp_timer == gv_productionIdleAlerts[lv_i].lv_cooldownTimer))) {
            lv_result = lv_i;
            break;
        }
        else {
        }
    }
    return lv_result;
}

string gf_GetIconForBuildingType (string lp_unitType) {
    string auto77F30C81_val;

    // Implementation
    auto77F30C81_val = lp_unitType;
    if (auto77F30C81_val == "Nexus") {
        return "Assets\\Textures\\btn-building-protoss-nexus.dds";
    }
    else if (auto77F30C81_val == "Gateway") {
        return "Assets\\Textures\\btn-building-protoss-gateway.dds";
    }
    else if (auto77F30C81_val == "RoboticsFacility") {
        return "Assets\\Textures\\btn-building-protoss-roboticsfacility.dds";
    }
    else if (auto77F30C81_val == "Stargate") {
        return "Assets\\Textures\\btn-building-protoss-stargate.dds";
    }
    else if (auto77F30C81_val == "CommandCenter") {
        return "Assets\\Textures\\btn-building-terran-commandcenter.dds";
    }
    else if (auto77F30C81_val == "OrbitalCommand") {
        return "Assets\\Textures\\btn-techupgrade-terran-orbitalcommand.dds";
    }
    else if (auto77F30C81_val == "PlanetaryFortress") {
        return "Assets\\Textures\\btn-building-terran-planetaryfortress.dds";
    }
    else if (auto77F30C81_val == "Barracks") {
        return "Assets\\Textures\\btn-building-terran-barracks.dds";
    }
    else if (auto77F30C81_val == "Factory") {
        return "Assets\\Textures\\btn-building-terran-factory.dds";
    }
    else if (auto77F30C81_val == "Starport") {
        return "Assets\\Textures\\btn-building-terran-starport.dds";
    }
    else if (auto77F30C81_val == "Larva") {
        return "Assets\\Textures\\btn-unit-zerg-larva.dds";
    }
    else if (auto77F30C81_val == "Hatchery") {
        return "Assets\\Textures\\btn-building-zerg-hatchery.dds";
    }
    else if (auto77F30C81_val == "Lair") {
        return "Assets\\Textures\\btn-building-zerg-lair.dds";
    }
    else if (auto77F30C81_val == "Hive") {
        return "Assets\\Textures\\btn-building-zerg-hive.dds";
    }
    else {
        return null;
    }
}

string gf_GetCurrentlySelectedMatchupasBankSectionKey () {
    // Implementation
    return (gv_currentMatchupSectionKeys[gv_currentlySelectedMatchupIndex]);
}

string gf_GetBenchmarkBuildOrderStepBankKey (int lp_stepNumber, string lp_stepEntryKeySuffix) {
    // Variable Declarations
    string lv_stepKeyString;

    // Variable Initialization
    lv_stepKeyString = "";

    // Implementation
    lv_stepKeyString = (gv_benchmarkBuildStepEntryKeyPrefix + "_" + IntToString(lp_stepNumber) + "_" + lp_stepEntryKeySuffix);
    return lv_stepKeyString;
}

text gf_GetTypeTextForCurrentBuildOrderStep (int lp_stepNumber) {
    // Variable Declarations
    string lv_stepType;
    text lv_result;

    // Variable Initialization
    lv_stepType = "";

    // Implementation
    lv_stepType = gv_currentBuildOrderSteps[lp_stepNumber].lv_stepType;
    if ((lv_stepType == gv_unitStepType)) {
        lv_result = UnitTypeGetName(gv_currentBuildOrderSteps[lp_stepNumber].lv_unitType);
    }
    else if ((lv_stepType == gv_upgradeStepType)) {
        lv_result = gf_GetFormattedUpgradeNameasText(gv_currentBuildOrderSteps[lp_stepNumber].lv_upgrade);
    }
    else if ((lv_stepType == gv_abilityStepType)) {
        lv_result = gf_GetFormattedAbilityNameasText(gv_currentBuildOrderSteps[lp_stepNumber].lv_ability);
    }
    return lv_result;
}

text gf_GetTypeTextForBenchmarkBuildOrderStep (int lp_stepNumber) {
    // Variable Declarations
    string lv_stepType;
    text lv_result;

    // Variable Initialization
    lv_stepType = "";

    // Implementation
    lv_stepType = gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_stepType;
    if ((lv_stepType == gv_unitStepType)) {
        lv_result = StringToText((gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_unitType));
    }
    else if ((lv_stepType == gv_upgradeStepType)) {
        lv_result = gf_GetFormattedUpgradeNameasText(gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_upgrade);
    }
    else if ((lv_stepType == gv_abilityStepType)) {
        lv_result = gf_GetFormattedAbilityNameasText(gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_ability);
    }
    return lv_result;
}

text gf_GetCurrentBuildOrderStepText (int lp_stepNumber) {
    // Variable Declarations
    text lv_supplyText;
    text lv_amountText;
    text lv_typeText;
    text lv_elapsedTimeText;
    text lv_resultText;

    // Variable Initialization
    lv_amountText = StringExternal("Param/Value/29A8F1DC");

    // Implementation
    lv_supplyText = IntToText(gv_currentBuildOrderSteps[lp_stepNumber].lv_supply);
    if ((gv_currentBuildOrderSteps[lp_stepNumber].lv_amount > 1)) {
        TextExpressionSetToken("Param/Expression/A6714026", "A", IntToText(gv_currentBuildOrderSteps[lp_stepNumber].lv_amount));
        lv_amountText = TextExpressionAssemble("Param/Expression/A6714026");
    }
    else {
    }
    lv_typeText = gf_GetTypeTextForCurrentBuildOrderStep(lp_stepNumber);
    lv_elapsedTimeText = TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_currentBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds);
    TextExpressionSetToken("Param/Expression/81102448", "A", lv_supplyText);
    TextExpressionSetToken("Param/Expression/81102448", "D", lv_amountText);
    TextExpressionSetToken("Param/Expression/81102448", "B", lv_typeText);
    TextExpressionSetToken("Param/Expression/81102448", "C", lv_elapsedTimeText);
    lv_resultText = TextExpressionAssemble("Param/Expression/81102448");
    return lv_resultText;
}

text gf_GetBenchmarkBuildOrderStepText (int lp_stepNumber) {
    // Variable Declarations
    text lv_amountText;
    text lv_supplyText;
    text lv_typeText;
    text lv_elapsedTimeText;
    text lv_resultText;

    // Variable Initialization
    lv_amountText = StringExternal("Param/Value/B286C09B");

    // Implementation
    lv_supplyText = IntToText(gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supply);
    if ((gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_amount > 1)) {
        TextExpressionSetToken("Param/Expression/02DB92AF", "A", IntToText(gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_amount));
        lv_amountText = TextExpressionAssemble("Param/Expression/02DB92AF");
    }
    else {
    }
    lv_typeText = gf_GetTypeTextForBenchmarkBuildOrderStep(lp_stepNumber);
    lv_elapsedTimeText = TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds);
    TextExpressionSetToken("Param/Expression/1734DB71", "A", lv_supplyText);
    TextExpressionSetToken("Param/Expression/1734DB71", "D", lv_amountText);
    TextExpressionSetToken("Param/Expression/1734DB71", "B", lv_typeText);
    TextExpressionSetToken("Param/Expression/1734DB71", "C", lv_elapsedTimeText);
    lv_resultText = TextExpressionAssemble("Param/Expression/1734DB71");
    return lv_resultText;
}

text gf_GetFormattedCompleteBenchmarkBuildOrderStepText (int lp_currentStep, int lp_benchmarkStep) {
    // Variable Declarations
    text lv_result;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/4DE652F3", "A", gf_GetSupplyforCurrentBuildOrderStepasText(lp_currentStep));
    TextExpressionSetToken("Param/Expression/4DE652F3", "B", gf_GetBenchmarkandCurrentStepSecondsDiffasText(lp_benchmarkStep));
    TextExpressionSetToken("Param/Expression/236BD2AB", "A", gf_GetBenchmarkBuildOrderStepText(lp_benchmarkStep));
    TextExpressionSetToken("Param/Expression/236BD2AB", "D", TextWithColor(TextExpressionAssemble("Param/Expression/4DE652F3"), gf_GetColorForBenchmarkBuildOrderStepCompletion(lp_benchmarkStep)));
    lv_result = TextExpressionAssemble("Param/Expression/236BD2AB");
    return lv_result;
}

color gf_GetColorForBenchmarkBuildOrderStepCompletion (int lp_stepNumber) {
    // Variable Declarations
    int lv_currentElaspedSeconds;
    int lv_currentSupplyCount;
    color lv_color;
    text lv_result;

    // Variable Initialization
    lv_color = Color(100,100,100);

    // Implementation
    lv_currentElaspedSeconds = FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer));
    lv_currentSupplyCount = PlayerScoreValueGetAsInt(1, "FoodUsed");
    if (((lv_currentSupplyCount <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supply+0)) && (lv_currentElaspedSeconds <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds+0)))) {
        lv_color = Color(66.67, 79.22, 100.00);
    }
    else if (((lv_currentSupplyCount <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supply+gv_greenBenchmarkSupplyThreshold)) && (lv_currentElaspedSeconds <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds+gv_greenBenchmarkSecondsThreshold)))) {
        lv_color = Color(50.20, 100.00, 50.20);
    }
    else if (((lv_currentSupplyCount <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supply+gv_yellowBenchmarkSupplyThreshold)) && (lv_currentElaspedSeconds <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds+gv_yellowBenchmarkSecondsThreshold)))) {
        lv_color = Color(100.00, 100.00, 50.20);
    }
    else if (((lv_currentSupplyCount <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supply+gv_orangeBenchmarkSupplyThreshold)) && (lv_currentElaspedSeconds <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds+gv_orangeBenchmarkSecondsThreshold)))) {
        lv_color = Color(100.00, 74.51, 40.00);
    }
    else if ((true == true)) {
        lv_color = Color(100.00, 50.20, 50.20);
    }
    return lv_color;
}

text gf_GetSupplyforCurrentBuildOrderStepasText (int lp_currentStep) {
    // Variable Declarations
    text lv_result;

    // Variable Initialization

    // Implementation
    lv_result = IntToText(gf_GetSupplyforCurrentBuildOrderStep(lp_currentStep));
    return lv_result;
}

int gf_GetSupplyforCurrentBuildOrderStep (int lp_currentStep) {
    // Variable Declarations
    int lv_currentSupply;

    // Variable Initialization

    // Implementation
    lv_currentSupply = PlayerScoreValueGetAsInt(1, "FoodUsed");
    if ((gv_currentBuildOrderSteps[lp_currentStep].lv_stepType == gv_unitStepType)) {
        if (((PlayerRace(1) == "Zerg") && (gf_IsUnitTypeAStructure(gv_currentBuildOrderSteps[lp_currentStep].lv_unitType) == true))) {
            lv_currentSupply = (lv_currentSupply+1);
        }
        else {
        }
        if ((gv_currentBuildOrderSteps[lp_currentStep].lv_unitType == "Queen")) {
            lv_currentSupply = (lv_currentSupply-2);
        }
        else {
        }
    }
    else {
    }
    return lv_currentSupply;
}

text gf_GetBenchmarkandCurrentStepSecondsDiffasText (int lp_stepNumber) {
    // Variable Declarations
    int lv_diff;
    text lv_result;

    // Variable Initialization

    // Implementation
    lv_diff = (FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer))-gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds);
    if ((lv_diff < 0)) {
        lv_diff = (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds-FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer)));
        TextExpressionSetToken("Param/Expression/D17BAC5D", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_diff));
        lv_result = TextExpressionAssemble("Param/Expression/D17BAC5D");
    }
    else {
        TextExpressionSetToken("Param/Expression/8F0B85E2", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_diff));
        lv_result = TextExpressionAssemble("Param/Expression/8F0B85E2");
    }
    return lv_result;
}

bool gf_IsEndBuildatMaxSupplySelected () {
    // Implementation
    if ((DialogControlGetSelectedItem(gv_endBuildPulldown, 1) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsEndBuildatGameTimeSelected () {
    // Implementation
    if ((DialogControlGetSelectedItem(gv_endBuildPulldown, 1) == 2)) {
        return true;
    }
    else {
        return false;
    }
}

int gf_GetObjectiveIndexforBenchmarkBuildOrderStep (int lp_cursor) {
    // Variable Declarations
    int lv_result;

    // Variable Initialization

    // Implementation
    lv_result = (lp_cursor - gv_buildOrderCycleOffset);
    return lv_result;
}

int gf_GetNextIncompleteBenchmarkBuildOrderStep (int lp_benchmarkStep) {
    int autoC3961A2E_ae;
    int autoC3961A2E_ai;

    // Variable Declarations
    int lv_benchmarkStep;
    int lv_result;

    // Variable Initialization

    // Implementation
    lv_result = lp_benchmarkStep;
    autoC3961A2E_ae = gv_totalNumBenchmarkBuildOrderSteps;
    autoC3961A2E_ai = 1;
    lv_benchmarkStep = lp_benchmarkStep;
    for ( ; ( (autoC3961A2E_ai >= 0 && lv_benchmarkStep <= autoC3961A2E_ae) || (autoC3961A2E_ai <= 0 && lv_benchmarkStep >= autoC3961A2E_ae) ) ; lv_benchmarkStep += autoC3961A2E_ai ) {
        if ((ObjectiveGetState(gv_benchmarkBuildOrderStepObjectives[gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lv_benchmarkStep)]) == c_objectiveStateActive)) {
            lv_result = lv_benchmarkStep;
            break;
        }
        else {
        }
    }
    return lv_result;
}

bool gf_IsUnitTypeValidForBenchmarkBuildOrderStep (string lp_unitType, int lp_benchmarkStep) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if (((PlayerScoreValueGetAsInt(1, "FoodUsed") <= gv_trackQueensAsStepSupplyLimit) && ((lp_unitType == "Queen")))) {
        lv_result = true;
    }
    else if ((lp_unitType == "MothershipCore")) {
        lv_result = true;
    }
    else if ((gf_IsUnitTypeAnEligibleSupplyUnit(lp_unitType, lp_benchmarkStep) == true)) {
        lv_result = true;
    }
    else if (((gf_IsUnitTypeAStructure(lp_unitType) == true) && (gf_IsUnitTypeAnExplicitlyIgnoredStructureType(lp_unitType) == false) && (gf_IsUnitTypeAnIneligibleGasCollectionUnit(lp_unitType, lp_benchmarkStep) == false) && (lp_unitType != "SupplyDepot") && (lp_unitType != "Pylon"))) {
        lv_result = true;
    }
    return lv_result;
}

bool gf_IsUnitTypeAStructure (string lp_unitType) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "Attributes[" + IntToString(7) + "]", c_playerAny) == 1)) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    return lv_result;
}

bool gf_IsUnitTypeAnEligibleSupplyUnit (string lp_unitType, int lp_benchmarkStep) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if (((gv_trackSupplyUnitsAsSteps == true) && ((gv_benchmarkBuildOrderSteps[lp_benchmarkStep].lv_unitType == "Overlord") || (gv_benchmarkBuildOrderSteps[lp_benchmarkStep].lv_unitType == "Pylon") || (gv_benchmarkBuildOrderSteps[lp_benchmarkStep].lv_unitType == "SupplyDepot") || (PlayerScoreValueGetAsInt(1, "FoodUsed") <= gv_trackSupplyUnitAsStepSupplyLimit)) && ((lp_unitType == "Overlord") || (lp_unitType == "SupplyDepot") || (lp_unitType == "Pylon")))) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    return lv_result;
}

bool gf_IsUnitTypeAnIneligibleGasCollectionUnit (string lp_unitType, int lp_benchmarkStep) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if ((((lp_unitType == "Extractor") || (lp_unitType == "Assimilator") || (lp_unitType == "Refinery")) && (PlayerScoreValueGetAsInt(1, "FoodUsed") > gv_buildOrderMaxGasSupply) && ((gv_benchmarkBuildOrderSteps[lp_benchmarkStep].lv_unitType != "Extractor") && (gv_benchmarkBuildOrderSteps[lp_benchmarkStep].lv_unitType != "Assimilator") && (gv_benchmarkBuildOrderSteps[lp_benchmarkStep].lv_unitType != "Refinery")))) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    return lv_result;
}

bool gf_IsUnitTypeAnExplicitlyIgnoredStructureType (string lp_unitType) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if (((lp_unitType == "CreepTumorQueen") || (lp_unitType == "CreepTumor") || (lp_unitType == "CreepTumorBurrowed"))) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    return lv_result;
}

bool gf_IsUnitTypeCorrectForBenchmarkBuildOrderStep (string lp_unitType, int lp_benchmarkBuildOrderStepIndex) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if ((lp_unitType == gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_unitType)) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    TextExpressionSetToken("Param/Expression/CDBA6F10", "B", UnitTypeGetName(lp_unitType));
    TextExpressionSetToken("Param/Expression/CDBA6F10", "A", UnitTypeGetName(gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_unitType));
    TextExpressionSetToken("Param/Expression/CDBA6F10", "C", libNtve_gf_ConvertBooleanToText(lv_result));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/CDBA6F10"));
    return lv_result;
}

bool gf_IsUpgradeTypeValidForBuildOrder (string lp_upgrade) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if (((lp_upgrade == "WarpGateResearch") || (lp_upgrade == "BlinkTech") || (lp_upgrade == "Charge") || (lp_upgrade == "ExtendedThermalLance") || (lp_upgrade == "GraviticDrive") || (lp_upgrade == "ObserverGraviticBooster") || (lp_upgrade == "PsiStormTech") || (lp_upgrade == "AnionPulseCrystals") || (lp_upgrade == "AnionPulseCrystals") || (lp_upgrade == "Stimpack") || (lp_upgrade == "PunisherGrenades") || (lp_upgrade == "ShieldWall") || (lp_upgrade == "BansheeCloak") || (lp_upgrade == "HighCapacityBarrels") || (lp_upgrade == "HunterSeeker") || (lp_upgrade == "RavenCorvidReactor") || (lp_upgrade == "zerglingmovementspeed") || (lp_upgrade == "zerglingattackspeed") || (lp_upgrade == "CentrificalHooks") || (lp_upgrade == "TunnelingClaws") || (lp_upgrade == "GlialReconstitution") || (lp_upgrade == "hydraliskspeed") || (lp_upgrade == "HydraliskSpeedUpgrade") || (lp_upgrade == "InfestorEnergyUpgrade") || (lp_upgrade == "LocustLifetimeIncrease") || (lp_upgrade == "ChitinousPlating") || (lp_upgrade == "Burrow") || (lp_upgrade == "overlordtransport") || (lp_upgrade == "overlordspeed") || (gf_IsUpgradeAnAttackDefenseUpgrade(lp_upgrade) == true))) {
        lv_result = true;
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/C1700654", "A", gf_GetFormattedUpgradeNameasText(lp_upgrade));
    TextExpressionSetToken("Param/Expression/C1700654", "B", libNtve_gf_ConvertBooleanToText(lv_result));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/C1700654"));
    return lv_result;
}

bool gf_IsUpgradeTypeCorrectForBenchmarkBuildOrderStep (string lp_upgrade, int lp_benchmarkBuildOrderStepIndex) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if ((lp_upgrade == gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_upgrade)) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    TextExpressionSetToken("Param/Expression/9B3854D6", "B", gf_GetFormattedUpgradeNameasText(lp_upgrade));
    TextExpressionSetToken("Param/Expression/9B3854D6", "A", StringToText((gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_upgrade)));
    TextExpressionSetToken("Param/Expression/9B3854D6", "C", libNtve_gf_ConvertBooleanToText(lv_result));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/9B3854D6"));
    return lv_result;
}

bool gf_IsUpgradeAnAttackDefenseUpgrade (string lp_upgrade) {
    // Implementation
    if (((lp_upgrade == "ProtossAirArmorsLevel1") || (lp_upgrade == "ProtossAirArmorsLevel2") || (lp_upgrade == "ProtossAirArmorsLevel3") || (lp_upgrade == "ProtossGroundArmorsLevel1") || (lp_upgrade == "ProtossGroundArmorsLevel2") || (lp_upgrade == "ProtossGroundArmorsLevel3") || (lp_upgrade == "ProtossShieldsLevel1") || (lp_upgrade == "ProtossShieldsLevel2") || (lp_upgrade == "ProtossShieldsLevel3") || (lp_upgrade == "ProtossAirWeaponsLevel1") || (lp_upgrade == "ProtossAirWeaponsLevel2") || (lp_upgrade == "ProtossAirWeaponsLevel3") || (lp_upgrade == "ProtossGroundWeaponsLevel1") || (lp_upgrade == "ProtossGroundWeaponsLevel2") || (lp_upgrade == "ProtossGroundWeaponsLevel3") || (lp_upgrade == "TerranInfantryArmorsLevel1") || (lp_upgrade == "TerranInfantryArmorsLevel2") || (lp_upgrade == "TerranInfantryArmorsLevel3") || (lp_upgrade == "TerranShipArmorsLevel1") || (lp_upgrade == "TerranShipArmorsLevel2") || (lp_upgrade == "TerranShipArmorsLevel3") || (lp_upgrade == "TerranVehicleArmorsLevel1") || (lp_upgrade == "TerranVehicleArmorsLevel2") || (lp_upgrade == "TerranVehicleArmorsLevel3") || (lp_upgrade == "TerranVehicleAndShipArmorsLevel1") || (lp_upgrade == "TerranVehicleAndShipArmorsLevel2") || (lp_upgrade == "TerranVehicleAndShipArmorsLevel3") || (lp_upgrade == "TerranInfantryWeaponsLevel1") || (lp_upgrade == "TerranInfantryWeaponsLevel2") || (lp_upgrade == "TerranInfantryWeaponsLevel3") || (lp_upgrade == "TerranShipWeaponsLevel1") || (lp_upgrade == "TerranShipWeaponsLevel2") || (lp_upgrade == "TerranShipWeaponsLevel3") || (lp_upgrade == "TerranVehicleWeaponsLevel1") || (lp_upgrade == "TerranVehicleWeaponsLevel2") || (lp_upgrade == "TerranVehicleWeaponsLevel3") || (lp_upgrade == "TerranVehicleAndShipWeaponsLevel1") || (lp_upgrade == "TerranVehicleAndShipWeaponsLevel2") || (lp_upgrade == "TerranVehicleAndShipWeaponsLevel3") || (lp_upgrade == "ZergFlyerArmorsLevel1") || (lp_upgrade == "ZergFlyerArmorsLevel2") || (lp_upgrade == "ZergFlyerArmorsLevel3") || (lp_upgrade == "ZergGroundArmorsLevel1") || (lp_upgrade == "ZergGroundArmorsLevel2") || (lp_upgrade == "ZergGroundArmorsLevel3") || (lp_upgrade == "ZergFlyerWeaponsLevel1") || (lp_upgrade == "ZergFlyerWeaponsLevel2") || (lp_upgrade == "ZergFlyerWeaponsLevel3") || (lp_upgrade == "ZergMeleeWeaponsLevel1") || (lp_upgrade == "ZergMeleeWeaponsLevel2") || (lp_upgrade == "ZergMeleeWeaponsLevel3") || (lp_upgrade == "ZergMissileWeaponsLevel1") || (lp_upgrade == "ZergMissileWeaponsLevel2") || (lp_upgrade == "ZergMissileWeaponsLevel3"))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsAbilityValidForBuildOrder (string lp_ability) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if (((lp_ability == "UpgradeToPlanetaryFortress") || (lp_ability == "UpgradeToOrbital") || (lp_ability == "UpgradeToLair") || (lp_ability == "UpgradeToHive"))) {
        lv_result = true;
    }
    else {
    }
    return lv_result;
}

bool gf_IsAbilityTypeCorrectForBenchmarkBuildOrderStep (string lp_ability, int lp_benchmarkBuildOrderStepIndex) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if ((lp_ability == gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_ability)) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    TextExpressionSetToken("Param/Expression/63757028", "B", gf_GetFormattedAbilityNameasText(lp_ability));
    TextExpressionSetToken("Param/Expression/63757028", "A", StringToText((gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_ability)));
    TextExpressionSetToken("Param/Expression/63757028", "C", libNtve_gf_ConvertBooleanToText(lv_result));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/63757028"));
    return lv_result;
}

bool gf_IsSupplyCorrectForBenchmarkBuildOrderStep (int lp_supplyCount, int lp_benchmarkBuildOrderStepIndex) {
    // Implementation
    if ((lp_supplyCount <= (gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_supply+15))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsAmountCorrectForBenchmarkBuildOrderStep (int lp_numUnits, int lp_benchmarkBuildOrderStepIndex) {
    // Implementation
    if ((lp_numUnits == gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_amount)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsUnitTypeSameAsPreviousUnitType (int lp_previousUnitStepIndex, string lp_unitType) {
    // Variable Declarations
    int lv_previousStepUnitType;
    bool lv_result;

    // Variable Initialization

    // Implementation
    if ((lp_unitType == gv_currentBuildOrderSteps[lp_previousUnitStepIndex].lv_unitType)) {
        lv_result = true;
    }
    else {
    }
    return lv_result;
}

int gf_GetStepIndexForPreviousUnitStep (int lp_previousStep) {
    int auto492BE961_ae;
    int auto492BE961_ai;

    // Variable Declarations
    int lv_mostRecentUnitIndex;
    int lv_i;

    // Variable Initialization

    // Implementation
    auto492BE961_ae = 0;
    auto492BE961_ai = -1;
    lv_i = lp_previousStep;
    for ( ; ( (auto492BE961_ai >= 0 && lv_i <= auto492BE961_ae) || (auto492BE961_ai <= 0 && lv_i >= auto492BE961_ae) ) ; lv_i += auto492BE961_ai ) {
        if ((gv_currentBuildOrderSteps[lv_i].lv_stepType == gv_unitStepType)) {
            lv_mostRecentUnitIndex = lv_i;
            break;
        }
        else {
        }
    }
    return lv_mostRecentUnitIndex;
}

int gf_GetStepIndexForPreviousUpgradeStep (int lp_previousStep) {
    int autoCA15A62A_ae;
    int autoCA15A62A_ai;

    // Variable Declarations
    int lv_mostRecentUpgradeIndex;
    int lv_i;

    // Variable Initialization

    // Implementation
    autoCA15A62A_ae = 0;
    autoCA15A62A_ai = -1;
    lv_i = lp_previousStep;
    for ( ; ( (autoCA15A62A_ai >= 0 && lv_i <= autoCA15A62A_ae) || (autoCA15A62A_ai <= 0 && lv_i >= autoCA15A62A_ae) ) ; lv_i += autoCA15A62A_ai ) {
        if ((gv_currentBuildOrderSteps[lv_i].lv_stepType == gv_upgradeStepType)) {
            lv_mostRecentUpgradeIndex = lv_i;
            break;
        }
        else {
        }
    }
    return lv_mostRecentUpgradeIndex;
}

int gf_GetStepIndexForPreviousAbilityStep (int lp_previousStep) {
    int autoDF39D588_ae;
    int autoDF39D588_ai;

    // Variable Declarations
    int lv_mostRecentAbilityIndex;
    int lv_i;

    // Variable Initialization

    // Implementation
    autoDF39D588_ae = 0;
    autoDF39D588_ai = -1;
    lv_i = lp_previousStep;
    for ( ; ( (autoDF39D588_ai >= 0 && lv_i <= autoDF39D588_ae) || (autoDF39D588_ai <= 0 && lv_i >= autoDF39D588_ae) ) ; lv_i += autoDF39D588_ai ) {
        if ((gv_currentBuildOrderSteps[lv_i].lv_stepType == gv_abilityStepType)) {
            lv_mostRecentAbilityIndex = lv_i;
            break;
        }
        else {
        }
    }
    return lv_mostRecentAbilityIndex;
}

bool gf_DoesBuildHaveAnotherStepToDisplay (int lp_currentStep) {
    // Implementation
    if (((lp_currentStep + (gv_maxDisplayedBuildOrderObjectives1 - gv_benchmarkBuildOrderObjectiveCycleThreshold)) <= gv_totalNumBenchmarkBuildOrderSteps)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsStepIndexPastEndOfBenchmarkBuild (int lp_step) {
    // Implementation
    return (lp_step > gv_totalNumBenchmarkBuildOrderSteps);
}

bool gf_IsTimeraMultiUnitFailureTimer (timer lp_timer) {
    int autoFEDE56AA_ae;
    int autoFEDE56AA_ai;

    // Variable Declarations
    int lv_i;
    bool lv_result;

    // Variable Initialization

    // Implementation
    autoFEDE56AA_ae = gv_benchmarkBuildOrderStepCursor;
    autoFEDE56AA_ai = 1;
    lv_i = 0;
    for ( ; ( (autoFEDE56AA_ai >= 0 && lv_i <= autoFEDE56AA_ae) || (autoFEDE56AA_ai <= 0 && lv_i >= autoFEDE56AA_ae) ) ; lv_i += autoFEDE56AA_ai ) {
        if ((gv_benchmarkBuildOrderSteps[lv_i].lv_multipleUnitFailureTimer == lp_timer)) {
            lv_result = true;
        }
        else {
        }
    }
    return lv_result;
}

int gf_GetBenchmarkStepForMultiUnitFailureTimer (timer lp_timer) {
    int auto5F7F9773_ae;
    int auto5F7F9773_ai;

    // Variable Declarations
    int lv_i;
    int lv_result;

    // Variable Initialization

    // Implementation
    auto5F7F9773_ae = gv_benchmarkBuildOrderStepCursor;
    auto5F7F9773_ai = 1;
    lv_i = 0;
    for ( ; ( (auto5F7F9773_ai >= 0 && lv_i <= auto5F7F9773_ae) || (auto5F7F9773_ai <= 0 && lv_i >= auto5F7F9773_ae) ) ; lv_i += auto5F7F9773_ai ) {
        if ((gv_benchmarkBuildOrderSteps[lv_i].lv_multipleUnitFailureTimer == lp_timer)) {
            lv_result = lv_i;
        }
        else {
        }
    }
    return lv_result;
}

fixed gf_GetAverageResourceCollectionRate () {
    // Variable Declarations
    fixed lv_result;

    // Variable Initialization

    // Implementation
    if ((gv_numResourceCollectionRateSamples >= 1)) {
        lv_result = ((gv_cumulativeTotalMineralCollectionRate+gv_cumulativeTotalGasCollectionRate)/gv_numResourceCollectionRateSamples);
    }
    else {
        lv_result = 0.0;
    }
    return lv_result;
}

fixed gf_GetAverageUnspentResources () {
    // Implementation
    if ((gv_numUnspentResourceSamples >= 1)) {
        return ((gv_cumulativeTotalUnspentMinerals + gv_cumulativeTotalUnspentGas) / gv_numUnspentResourceSamples);
    }
    else {
        return 0;
    }
}

int gf_GetAverageUnspentMinerals () {
    // Implementation
    if ((gv_numUnspentResourceSamples >= 1)) {
        return FixedToInt((gv_cumulativeTotalUnspentMinerals/gv_numUnspentResourceSamples));
    }
    else {
        return 0;
    }
}

int gf_GetAverageUnspentGas () {
    // Implementation
    if ((gv_numUnspentResourceSamples >= 1)) {
        return FixedToInt((gv_cumulativeTotalUnspentGas/gv_numUnspentResourceSamples));
    }
    else {
        return 0;
    }
}

int gf_GetTimeSupplyBlocked () {
    // Implementation
    return gv_timeSupplyBlockedThisBuild;
}

int gf_GetIdleProductionTime () {
    // Implementation
    if ((TimerGetElapsed(gv_currentBuildBuildTimer) >= 1)) {
        return gv_timeProductionIdleThisBuild;
    }
    else {
        return 0;
    }
}

int gf_GetAverageBuildAPM () {
    // Implementation
    if ((gv_totalAPMSamplesThisBuild >= 1)) {
        return FixedToInt((gv_cumulativeAPM/gv_totalAPMSamplesThisBuild));
    }
    else {
        return 0;
    }
}

int gf_GetTotalArmySupply () {
    // Implementation
    return PlayerScoreValueGetAsInt(1, "FoodUsedArmy");
}

int gf_GetTotalArmyValueMinerals () {
    // Implementation
    return PlayerScoreValueGetAsInt(1, "MineralsUsedTotalArmy");
}

int gf_GetTotalArmyValueGas () {
    // Implementation
    return PlayerScoreValueGetAsInt(1, "VespeneUsedTotalArmy");
}

int gf_GetNumUpgradesResearched () {
    // Implementation
    return gv_totalNumberofUpgradesResearchedCurrentBuild;
}

int gf_GetTotalMineralsCollected () {
    // Implementation
    return gv_totalMineralsCollected;
}

int gf_GetTotalGasCollected () {
    // Implementation
    return gv_totalGasCollected;
}

fixed gf_CalculateSpendingQuotient () {
    // Variable Declarations
    fixed lv_result;
    fixed lv_blizzardResult;

    // Variable Initialization

    // Implementation
    lv_result = (35*((0.00137*gf_GetAverageResourceCollectionRate())-gf_ln(gf_GetAverageUnspentResources()))+240);
    lv_result = ((35.0 * (((0.0137 * gf_GetAverageResourceCollectionRate()) / 10.0) - gf_ln(gf_GetAverageUnspentResources()))) + 240.0);
    TextExpressionSetToken("Param/Expression/72561A85", "A", FixedToText(gf_GetAverageResourceCollectionRate(), 0));
    TextExpressionSetToken("Param/Expression/72561A85", "B", FixedToText(gf_GetAverageUnspentResources(), 0));
    TextExpressionSetToken("Param/Expression/72561A85", "C", FixedToText(lv_result, 0));
    gf_LogTextMessage(gv_debugStatsEnabled, TextExpressionAssemble("Param/Expression/72561A85"));
    lv_blizzardResult = ((35.0 * (((0.0137 * PlayerScoreValueGetAsFixed(1, "ResourceCollectionRateSampled")) / 10.0) - gf_ln(PlayerScoreValueGetAsFixed(1, "ResourceFloatAverage")))) + 240.0);
    TextExpressionSetToken("Param/Expression/CD90F5E5", "A", FixedToText(PlayerScoreValueGetAsFixed(1, "ResourceCollectionRateSampled"), c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/CD90F5E5", "B", FixedToText(PlayerScoreValueGetAsFixed(1, "ResourceFloatAverage"), c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/CD90F5E5", "C", FixedToText(lv_blizzardResult, c_fixedPrecisionAny));
    gf_LogTextMessage(gv_debugStatsEnabled, TextExpressionAssemble("Param/Expression/CD90F5E5"));
    return lv_result;
}

unitgroup gf_GetUnitGroupofAllPlayer1WithoutThisUnit () {
    // Variable Declarations
    unitgroup lv_result;

    // Variable Initialization
    lv_result = UnitGroupEmpty();

    // Implementation
    return lv_result;
}

text gf_GetCurrentlySelectedMatchupasText () {
    // Implementation
    return libNtve_gf_DialogItemText(gv_matchupSelectionButtons[gv_currentlySelectedMatchupIndex], 1);
}

int gf_GetEditBoxValueasInt (int lp_editBox) {
    // Variable Declarations
    string lv_editBoxValue;

    // Variable Initialization
    lv_editBoxValue = "";

    // Implementation
    lv_editBoxValue = libNtve_gf_DialogItemEditValue(lp_editBox, 1);
    if ((gf_IsNumeric(lv_editBoxValue) == true)) {
        return StringToInt(lv_editBoxValue);
    }
    else {
        return 0;
    }
}

bool gf_DoesSavedBuildOrderExistForCurrentMatchup () {
    // Variable Declarations
    int lv_numSteps;
    bool lv_result;

    // Variable Initialization

    // Implementation
    lv_numSteps = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_numBenchmarkBuildOrderStepsEntryKey);
    if ((lv_numSteps > 0)) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    if ((gv_debugBuildOrderEnabled == true)) {
        TextExpressionSetToken("Param/Expression/449A463F", "B", StringToText(gf_GetCurrentlySelectedMatchupasBankSectionKey()));
        TextExpressionSetToken("Param/Expression/449A463F", "A", libNtve_gf_ConvertBooleanToText(lv_result));
        TextExpressionSetToken("Param/Expression/449A463F", "C", IntToText(lv_numSteps));
        TextExpressionSetToken("Param/Expression/449A463F", "D", StringToText(gf_GetCurrentlySelectedMatchupasBankSectionKey()));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/449A463F"));
    }
    else {
    }
    return lv_result;
}

string gf_GetCurrentlySelectedMatchupOpponentRace () {
    // Variable Declarations
    string lv_result;
    string lv_selectedMatchup;

    // Variable Initialization
    lv_selectedMatchup = "";

    // Implementation
    lv_selectedMatchup = gf_GetCurrentlySelectedMatchupasBankSectionKey();
    if ((StringContains(lv_selectedMatchup, "vP", c_stringAnywhere, c_stringCase) == true)) {
        lv_result = "Prot";
    }
    else if ((StringContains(lv_selectedMatchup, "vT", c_stringAnywhere, c_stringCase) == true)) {
        lv_result = "Terr";
    }
    else if ((StringContains(lv_selectedMatchup, "vZ", c_stringAnywhere, c_stringCase) == true)) {
        lv_result = "Zerg";
    }
    return lv_result;
}

color gf_GetColorForRealStatValue (fixed lp_percentage, bool lp_higherIsBetter) {
    // Variable Declarations
    color lv_result;

    // Variable Initialization
    lv_result = Color(149*100/255,150*100/255,151*100/255);

    // Implementation
    if ((((lp_percentage > 0.0) && (lp_higherIsBetter == true)) || ((lp_percentage < 0.0) && (lp_higherIsBetter == false)))) {
        lv_result = Color(22*100/255,128*100/255,0);
    }
    else if ((((lp_percentage < 0.0) && (lp_higherIsBetter == true)) || ((lp_percentage > 0.0) && (lp_higherIsBetter == false)))) {
        lv_result = Color(100.00, 0.00, 0.00);
    }
    return lv_result;
}

int gf_GetMapResourceIndexForUnit (unit lp_unit) {
    int auto2752CBD4_ae;
    int auto2752CBD4_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto2752CBD4_ae = gv_numMapResources;
    auto2752CBD4_ai = 1;
    lv_i = 0;
    for ( ; ( (auto2752CBD4_ai >= 0 && lv_i <= auto2752CBD4_ae) || (auto2752CBD4_ai <= 0 && lv_i >= auto2752CBD4_ae) ) ; lv_i += auto2752CBD4_ai ) {
        if ((lp_unit == gv_mapResources[lv_i].lv_unit)) {
            return lv_i;
        }
        else {
        }
    }
    gf_LogTextMessage(gv_debugMapMechanicsEnabled, TextExpressionAssemble("Param/Expression/92DD29CA"));
    return -1;
}

fixed gf_ln (fixed lp_x) {
    // Variable Declarations
    fixed lv_result;

    // Variable Initialization

    // Implementation
    lv_result = (Log2(lp_x)/Log2(gv_e));
    return lv_result;
}

fixed gf_log10 (fixed lp_x) {
    // Variable Declarations
    fixed lv_result;

    // Variable Initialization

    // Implementation
    lv_result = (Log2(lp_x)/Log2(10.0));
    return lv_result;
}

int gf_GetWinButtonYPadding () {
    string autoDB867731_val;

    // Implementation
    autoDB867731_val = PlayerRace(1);
    if (autoDB867731_val == "Terr") {
        return gv_winButtonTerranYPadding;
    }
    else if (autoDB867731_val == "Prot") {
        return gv_winButtonProtossYPadding;
    }
    else if (autoDB867731_val == "Zerg") {
        return gv_winButtonZergYPadding;
    }
    else {
        return 0;
    }
}

unitgroup gf_GetAllGasStructureUnits () {
    unitgroup auto1E77A246_g;
    int auto1E77A246_u;

    // Variable Declarations
    unit lv_currentUnit;
    unitgroup lv_result;

    // Variable Initialization
    lv_result = UnitGroupEmpty();

    // Implementation
    auto1E77A246_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1E77A246_u = 1;
    for ( ; auto1E77A246_u <= UnitGroupCount(auto1E77A246_g, c_unitCountAll) ; auto1E77A246_u += BoolToInt(lv_currentUnit == UnitGroupUnit(auto1E77A246_g, auto1E77A246_u)) ) {
        lv_currentUnit = UnitGroupUnit(auto1E77A246_g, auto1E77A246_u);
        if (((UnitGetType(lv_currentUnit) == "Extractor") || (UnitGetType(lv_currentUnit) == "Refinery") || (UnitGetType(lv_currentUnit) == "Assimilator"))) {
            UnitGroupAdd(lv_result, lv_currentUnit);
        }
        else {
        }
    }
    return lv_result;
}

unitgroup gf_GetAllPlayerUnitsforType (int lp_player, string lp_unitType) {
    unitgroup auto7054DA5F_g;
    int auto7054DA5F_u;

    // Variable Declarations
    unit lv_currentUnit;
    unitgroup lv_result;

    // Variable Initialization
    lv_result = UnitGroupEmpty();

    // Implementation
    auto7054DA5F_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7054DA5F_u = 1;
    for ( ; auto7054DA5F_u <= UnitGroupCount(auto7054DA5F_g, c_unitCountAll) ; auto7054DA5F_u += BoolToInt(lv_currentUnit == UnitGroupUnit(auto7054DA5F_g, auto7054DA5F_u)) ) {
        lv_currentUnit = UnitGroupUnit(auto7054DA5F_g, auto7054DA5F_u);
        if ((UnitGetType(lv_currentUnit) == lp_unitType)) {
            UnitGroupAdd(lv_result, lv_currentUnit);
        }
        else {
        }
    }
    return lv_result;
}

unitgroup gf_GetAllPlayerUnits (int lp_player) {
    // Variable Declarations
    unitgroup lv_result;

    // Variable Initialization
    lv_result = UnitGroupEmpty();

    // Implementation
    UnitGroupLoopBegin(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(lv_result, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return lv_result;
}

bool gf_IsNumeric (string lp_input) {
    int auto88F4C020_ae;
    int auto88F4C020_ai;

    // Variable Declarations
    string lv_currentChar;
    int lv_charIndex;
    bool lv_result;

    // Variable Initialization
    lv_currentChar = "";
    lv_result = true;

    // Implementation
    if ((StringLength(lp_input) == 0)) {
        lv_result = false;
    }
    else {
        auto88F4C020_ae = (StringLength(lp_input));
        auto88F4C020_ai = 1;
        lv_charIndex = 1;
        for ( ; ( (auto88F4C020_ai >= 0 && lv_charIndex <= auto88F4C020_ae) || (auto88F4C020_ai <= 0 && lv_charIndex >= auto88F4C020_ae) ) ; lv_charIndex += auto88F4C020_ai ) {
            lv_currentChar = StringSub(lp_input, lv_charIndex, lv_charIndex);
            if ((!(((lv_currentChar == "1") || (lv_currentChar == "2") || (lv_currentChar == "3") || (lv_currentChar == "4") || (lv_currentChar == "5") || (lv_currentChar == "6") || (lv_currentChar == "7") || (lv_currentChar == "8") || (lv_currentChar == "9") || (lv_currentChar == "0"))))) {
                lv_result = false;
            }
            else {
            }
        }
    }
    return lv_result;
}

bool gf_IsCapitalLetterOrDigit (string lp_letter) {
    // Implementation
    if (((lp_letter == "A") || (lp_letter == "B") || (lp_letter == "C") || (lp_letter == "D") || (lp_letter == "E") || (lp_letter == "F") || (lp_letter == "G") || (lp_letter == "H") || (lp_letter == "I") || (lp_letter == "J") || (lp_letter == "K") || (lp_letter == "L") || (lp_letter == "M") || (lp_letter == "N") || (lp_letter == "O") || (lp_letter == "P") || (lp_letter == "Q") || (lp_letter == "R") || (lp_letter == "S") || (lp_letter == "T") || (lp_letter == "U") || (lp_letter == "V") || (lp_letter == "W") || (lp_letter == "X") || (lp_letter == "Y") || (lp_letter == "Z") || (lp_letter == "1") || (lp_letter == "2") || (lp_letter == "3") || (lp_letter == "4") || (lp_letter == "5") || (lp_letter == "6") || (lp_letter == "7") || (lp_letter == "8") || (lp_letter == "9") || (lp_letter == "0"))) {
        return true;
    }
    else {
        return false;
    }
}

string gf_FormatCatalogStringwithSpaces (string lp_string) {
    int auto6F8A5183_ae;
    int auto6F8A5183_ai;

    // Variable Declarations
    string lv_currentLetter;
    string lv_result;
    int lv_i;

    // Variable Initialization
    lv_currentLetter = "";
    lv_result = "";

    // Implementation
    auto6F8A5183_ae = StringLength(lp_string);
    auto6F8A5183_ai = 1;
    lv_i = 0;
    for ( ; ( (auto6F8A5183_ai >= 0 && lv_i <= auto6F8A5183_ae) || (auto6F8A5183_ai <= 0 && lv_i >= auto6F8A5183_ae) ) ; lv_i += auto6F8A5183_ai ) {
        lv_currentLetter = StringSub(lp_string, lv_i, lv_i);
        if ((gf_IsCapitalLetterOrDigit(lv_currentLetter) == true)) {
            lv_result = (lv_result + " " + lv_currentLetter);
        }
        else {
            lv_result = (lv_result + lv_currentLetter);
        }
    }
    return lv_result;
}

string gf_TrimSOffArmorsUpgradeName (string lp_string) {
    // Implementation
    if ((lp_string == "Armors")) {
        return "Armor";
    }
    else {
        return lp_string;
    }
}

text gf_GetIntDifferenceasText (int lp_value, int lp_previousBest, bool lp_higherisBetter, bool lp_displayasPercentage) {
    // Variable Declarations
    fixed lv_difference;
    text lv_differenceText;
    text lv_coloredDifferenceText;

    // Variable Initialization

    // Implementation
    if (((lp_value > 0) && (lp_previousBest > 0))) {
        if ((lp_displayasPercentage == true)) {
            lv_difference = (100*((IntToFixed(lp_value)-IntToFixed(lp_previousBest))/IntToFixed(lp_previousBest)));
            TextExpressionSetToken("Param/Expression/C52C6861", "A", FixedToText(lv_difference, 2));
            lv_differenceText = TextExpressionAssemble("Param/Expression/C52C6861");
        }
        else {
            lv_difference = (IntToFixed(lp_value)-IntToFixed(lp_previousBest));
            TextExpressionSetToken("Param/Expression/70C9E411", "A", gf_ConvertInttoTextWithPlusSignifPositive((lp_value-lp_previousBest)));
            lv_differenceText = TextExpressionAssemble("Param/Expression/70C9E411");
        }
    }
    else {
        lv_differenceText = StringExternal("Param/Value/69E3E79E");
    }
    TextExpressionSetToken("Param/Expression/627D2026", "A", TextWithColor(lv_differenceText, gf_GetColorForRealStatValue(lv_difference, lp_higherisBetter)));
    lv_coloredDifferenceText = TextExpressionAssemble("Param/Expression/627D2026");
    return lv_coloredDifferenceText;
}

text gf_GetRealDifferenceasText (fixed lp_value, fixed lp_previousBest, bool lp_higherisBetter) {
    // Variable Declarations
    fixed lv_percentDifference;
    text lv_percentDifferenceText;
    text lv_coloredPercentDifferenceText;

    // Variable Initialization

    // Implementation
    if (((lp_value > 0) && (lp_previousBest > 0))) {
        lv_percentDifference = (100*((lp_value-lp_previousBest)/lp_previousBest));
        TextExpressionSetToken("Param/Expression/57AF9E6B", "A", FixedToText(lv_percentDifference, 2));
        lv_percentDifferenceText = TextExpressionAssemble("Param/Expression/57AF9E6B");
    }
    else {
        lv_percentDifferenceText = StringExternal("Param/Value/5EC7DC33");
    }
    TextExpressionSetToken("Param/Expression/25E9AAD7", "A", TextWithColor(lv_percentDifferenceText, gf_GetColorForRealStatValue(lv_percentDifference, lp_higherisBetter)));
    lv_coloredPercentDifferenceText = TextExpressionAssemble("Param/Expression/25E9AAD7");
    return lv_coloredPercentDifferenceText;
}

text gf_GetTimeDifferenceasText (int lp_value, int lp_previousBest, bool lp_higherisBetter, bool lp_displayasPercentage) {
    // Variable Declarations
    fixed lv_difference;
    text lv_differenceText;
    text lv_coloredDifferenceText;

    // Variable Initialization

    // Implementation
    if (((lp_value > 0) && (lp_previousBest > 0))) {
        if ((lp_displayasPercentage == true)) {
            lv_difference = (100*((IntToFixed(lp_value)-IntToFixed(lp_previousBest))/IntToFixed(lp_previousBest)));
            TextExpressionSetToken("Param/Expression/1D8F45C2", "A", FixedToText(lv_difference, 2));
            lv_differenceText = TextExpressionAssemble("Param/Expression/1D8F45C2");
        }
        else {
            lv_difference = (IntToFixed(lp_value)-IntToFixed(lp_previousBest));
            TextExpressionSetToken("Param/Expression/BDB89428", "A", gf_ConvertInttoTimeTextWithPlusSignifPositive(FixedToInt(lv_difference)));
            lv_differenceText = TextExpressionAssemble("Param/Expression/BDB89428");
        }
    }
    else {
        lv_differenceText = StringExternal("Param/Value/1447CA50");
    }
    TextExpressionSetToken("Param/Expression/FF848506", "A", TextWithColor(lv_differenceText, gf_GetColorForRealStatValue(lv_difference, lp_higherisBetter)));
    lv_coloredDifferenceText = TextExpressionAssemble("Param/Expression/FF848506");
    return lv_coloredDifferenceText;
}

text gf_ConvertInttoTextWithPlusSignifPositive (int lp_int) {
    // Variable Declarations
    text lv_result;

    // Variable Initialization

    // Implementation
    if ((lp_int > 0)) {
        TextExpressionSetToken("Param/Expression/B99F7846", "A", IntToText(lp_int));
        lv_result = TextExpressionAssemble("Param/Expression/B99F7846");
    }
    else {
        TextExpressionSetToken("Param/Expression/DD4AB624", "A", IntToText(lp_int));
        lv_result = TextExpressionAssemble("Param/Expression/DD4AB624");
    }
    return lv_result;
}

text gf_ConvertInttoTimeTextWithPlusSignifPositive (int lp_int) {
    // Variable Declarations
    text lv_result;

    // Variable Initialization
    lv_result = StringExternal("Param/Value/4EE86693");

    // Implementation
    if ((lp_int > 0)) {
        TextExpressionSetToken("Param/Expression/AD52C056", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_int));
        lv_result = TextExpressionAssemble("Param/Expression/AD52C056");
    }
    else if ((lp_int < 0)) {
        TextExpressionSetToken("Param/Expression/09C7A8D5", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), AbsI(lp_int)));
        lv_result = TextExpressionAssemble("Param/Expression/09C7A8D5");
    }
    return lv_result;
}

text gf_GetFormattedUpgradeNameasText (string lp_upgrade) {
    // Variable Declarations
    string lv_result;
    string lv_upgradeCatalogString;
    string lv_formattedUpgradeCatalogString;
    string lv_condensedFormattedUpgradeCatalogString;

    // Variable Initialization
    lv_result = "";
    lv_upgradeCatalogString = "";
    lv_formattedUpgradeCatalogString = "";
    lv_condensedFormattedUpgradeCatalogString = "";

    // Implementation
    if ((lp_upgrade == null)) {
        lv_result = "null";
    }
    else {
        lv_upgradeCatalogString = CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Name", c_playerAny);
        lv_result = lv_upgradeCatalogString;
        lv_formattedUpgradeCatalogString = gf_FormatCatalogStringwithSpaces(lv_upgradeCatalogString);
        if ((gf_IsUpgradeAnAttackDefenseUpgrade(lp_upgrade) == true)) {
            lv_result = (StringWord(lv_formattedUpgradeCatalogString, 4) + " " + gf_TrimSOffArmorsUpgradeName(StringWord(lv_formattedUpgradeCatalogString, 5)) + " " + StringWord(lv_formattedUpgradeCatalogString, 7));
        }
        else {
        }
        if (((lp_upgrade == "TerranVehicleAndShipWeaponsLevel1") || (lp_upgrade == "TerranVehicleAndShipWeaponsLevel2") || (lp_upgrade == "TerranVehicleAndShipWeaponsLevel3") || (lp_upgrade == "TerranVehicleAndShipArmorsLevel1") || (lp_upgrade == "TerranVehicleAndShipArmorsLevel3") || (lp_upgrade == "TerranVehicleAndShipArmorsLevel2"))) {
            lv_result = (StringWord(lv_formattedUpgradeCatalogString, 4) + "&" + StringWord(lv_formattedUpgradeCatalogString, 6) + " " + gf_TrimSOffArmorsUpgradeName(StringWord(lv_formattedUpgradeCatalogString, 7)) + " " + StringWord(lv_formattedUpgradeCatalogString, 9));
        }
        else {
        }
        if (((lp_upgrade == "ProtossShieldsLevel1") || (lp_upgrade == "ProtossShieldsLevel2") || (lp_upgrade == "ProtossShieldsLevel3"))) {
            lv_result = (StringWord(lv_formattedUpgradeCatalogString, 4) + " " + StringWord(lv_formattedUpgradeCatalogString, 5) + " " + StringWord(lv_formattedUpgradeCatalogString, 6));
        }
        else {
        }
        if ((StringContains(lv_formattedUpgradeCatalogString, "zerglingmovementspeed", c_stringEnd, c_stringCase) == true)) {
            lv_result = "Zergling Speed";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "CentrificalHooks", c_stringEnd, c_stringCase) == true)) {
            lv_result = "Baneling Speed";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "zerglingattacktspeed", c_stringEnd, c_stringCase) == true)) {
            lv_result = "Adrenal Glands";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "hydraliskspeed", c_stringEnd, c_stringCase) == true)) {
            lv_result = "Hydralisk Attack Range";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "HydraliskSpeedUpgrade", c_stringEnd, c_stringCase) == true)) {
            lv_result = "Hydralisk Speed";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "overlordspeed", c_stringEnd, c_stringCase) == true)) {
            lv_result = "Overlord Speed";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "overlordtransport", c_stringEnd, c_stringCase) == true)) {
            lv_result = "Overlord Transport";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "Glial Reconstitution", c_stringEnd, c_stringCase) == true)) {
            lv_result = "Roach Speed";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "Tunneling Claws", c_stringEnd, c_stringCase) == true)) {
            lv_result = "Burrow Movement";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "Locust Lifetime Increase", c_stringEnd, c_stringCase) == true)) {
            lv_result = "Enduring Locusts";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "Centrifical Hooks", c_stringEnd, c_stringCase) == true)) {
            lv_result = "Baneling Speed";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "Chitinous Plating", c_stringEnd, c_stringCase) == true)) {
            lv_result = "Chitinous Plating";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "Burrow", c_stringEnd, c_stringCase) == true)) {
            lv_result = "Burrow";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "High Capacity Barrels", c_stringAnywhere, c_stringCase) == true)) {
            lv_result = "Blue Flame";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "Stimpack", c_stringAnywhere, c_stringCase) == true)) {
            lv_result = "Stim";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "Punisher Grenades", c_stringAnywhere, c_stringCase) == true)) {
            lv_result = "Concussive Shells";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "Shield Wall", c_stringAnywhere, c_stringCase) == true)) {
            lv_result = "Combat Shields";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "Banshee Cloak", c_stringAnywhere, c_stringCase) == true)) {
            lv_result = "Cloak (Banshee)";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "Personal Cloaking", c_stringAnywhere, c_stringCase) == true)) {
            lv_result = "Cloak (Ghost)";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "Warp Gate Research", c_stringAnywhere, c_stringCase) == true)) {
            lv_result = "Warp Gate";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "Blink Tech", c_stringAnywhere, c_stringCase) == true)) {
            lv_result = "Blink";
        }
        else if ((StringContains(lv_formattedUpgradeCatalogString, "Charge", c_stringAnywhere, c_stringCase) == true)) {
            lv_result = "Charge";
        }
    }
    return StringToText(lv_result);
}

text gf_GetFormattedAbilityNameasText (string lp_ability) {
    // Variable Declarations
    string lv_result;
    string lv_abilityCatalogString;
    string lv_formattedAbilityCatalogString;

    // Variable Initialization
    lv_result = "";
    lv_abilityCatalogString = "";
    lv_formattedAbilityCatalogString = "";

    // Implementation
    lv_abilityCatalogString = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Name", c_playerAny);
    lv_result = lv_abilityCatalogString;
    lv_formattedAbilityCatalogString = gf_FormatCatalogStringwithSpaces(lv_abilityCatalogString);
    lv_result = lv_formattedAbilityCatalogString;
    if ((StringContains(lv_formattedAbilityCatalogString, "Upgrade To Lair", c_stringAnywhere, c_stringCase) == true)) {
        lv_result = "Lair";
    }
    else if ((StringContains(lv_formattedAbilityCatalogString, "Upgrade To Hive", c_stringAnywhere, c_stringCase) == true)) {
        lv_result = "Hive";
    }
    else if ((StringContains(lv_formattedAbilityCatalogString, "Upgrade To Orbital", c_stringAnywhere, c_stringCase) == true)) {
        lv_result = "Orbital Command";
    }
    else if ((StringContains(lv_formattedAbilityCatalogString, "Upgrade To Planetary", c_stringAnywhere, c_stringCase) == true)) {
        lv_result = "Planetary Fortress";
    }
    return StringToText(lv_result);
}

text gf_GetSupplyDifferenceasFormattedText (int lp_actualSupply, int lp_benchmarkSupply) {
    // Variable Declarations
    int lv_difference;
    text lv_diffAsText;
    text lv_formattedDiffText;

    // Variable Initialization

    // Implementation
    lv_difference = (lp_actualSupply-lp_benchmarkSupply);
    lv_diffAsText = gf_ConvertInttoTextWithPlusSignifPositive(lv_difference);
    if ((lv_difference < 0)) {
        lv_formattedDiffText = TextWithColor(lv_diffAsText, (Color(100.00, 0.00, 0.00)));
    }
    else {
        lv_formattedDiffText = TextWithColor(lv_diffAsText, (Color(22*100/255,128*100/255,0)));
    }
    gf_LogTextMessage(gv_debugMenusEnabled, lv_formattedDiffText);
    return lv_formattedDiffText;
}

int gf_GetTotalSecondsforMinSeconds (int lp_minutes, int lp_seconds) {
    // Implementation
    return ((60*lp_minutes)+lp_seconds);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Complete (Add Upgrade Alert)
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeCompleteAddUpgradeAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_nextUpgrade;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_alertUpgradeGapEnabled == true) && (gf_ShouldUpgradeTypeTriggerStartAlertTimer(libNtve_gf_TriggeringProgressUpgrade()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_nextUpgrade = gf_GetNextUpgrade(libNtve_gf_TriggeringProgressUpgrade());
    if ((gf_DoesUpgradeGapAlertExistForUpgrade(lv_nextUpgrade) == false)) {
        gf_AddUpgradeGapAlert(lv_nextUpgrade);
    }
    else {
        gf_RestartUpgradeGapAlertTimer(lv_nextUpgrade);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeCompleteAddUpgradeAlert_Init () {
    gt_UpgradeCompleteAddUpgradeAlert = TriggerCreate("gt_UpgradeCompleteAddUpgradeAlert_Func");
    TriggerAddEventUnitResearchProgress(gt_UpgradeCompleteAddUpgradeAlert, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Upgrade Starts (Stop Alert Timers)
//--------------------------------------------------------------------------------------------------
bool gt_NewUpgradeStartsStopAlertTimers_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_alertUpgradeGapEnabled == true) && (gf_ShouldUpgradeTypeTriggerStopAlertTimer(libNtve_gf_TriggeringProgressUpgrade()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_DoesUpgradeGapAlertExistForUpgrade(libNtve_gf_TriggeringProgressUpgrade()) == true)) {
        gf_StopUpgradeGapAlert(libNtve_gf_TriggeringProgressUpgrade());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewUpgradeStartsStopAlertTimers_Init () {
    gt_NewUpgradeStartsStopAlertTimers = TriggerCreate("gt_NewUpgradeStartsStopAlertTimers_Func");
    TriggerAddEventUnitResearchProgress(gt_NewUpgradeStartsStopAlertTimers, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Cancelled (Restart Alert Timers)
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeCancelledRestartAlertTimers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_nextUpgrade;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_alertUpgradeGapEnabled == true) && (gf_ShouldUpgradeTypeTriggerStopAlertTimer(libNtve_gf_TriggeringProgressUpgrade()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_DoesUpgradeGapAlertExistForUpgrade(libNtve_gf_TriggeringProgressUpgrade()) == true)) {
        gf_RestartUpgradeGapAlertTimer(libNtve_gf_TriggeringProgressUpgrade());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeCancelledRestartAlertTimers_Init () {
    gt_UpgradeCancelledRestartAlertTimers = TriggerCreate("gt_UpgradeCancelledRestartAlertTimers_Func");
    TriggerAddEventUnitResearchProgress(gt_UpgradeCancelledRestartAlertTimers, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Gap Alert Timer Expires (Fire Alert)
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeGapAlertTimerExpiresFireAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_upgrade;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_alertUpgradeGapEnabled == true) && (gf_IsTimerAnUpgradeGapTimer(EventTimer()) == true) && (gv_alertUpgradeGapNumUpgrades > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_upgrade = gv_upgradeGapAlerts[gf_GetUpgradeGapAlertIndexForTimer(EventTimer())].lv_delayedUpgrade;
    if ((gf_CanUpgradeBeResearchedRightNow(lv_upgrade) == true)) {
        TextExpressionSetToken("Param/Expression/6F158199", "A", gf_GetFormattedUpgradeNameasText(lv_upgrade));
        gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/6F158199"));
        gf_FireUpgradeGapAlert(EventTimer());
    }
    else {
        TextExpressionSetToken("Param/Expression/22AE2133", "A", gf_GetFormattedUpgradeNameasText(lv_upgrade));
        gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/22AE2133"));
        gf_RestartUpgradeCooldownAlertTimer(lv_upgrade);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeGapAlertTimerExpiresFireAlert_Init () {
    gt_UpgradeGapAlertTimerExpiresFireAlert = TriggerCreate("gt_UpgradeGapAlertTimerExpiresFireAlert_Func");
    TriggerAddEventTimer(gt_UpgradeGapAlertTimerExpiresFireAlert, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production Finished Or Cancelled (Add/Restart Alert)
//--------------------------------------------------------------------------------------------------
bool gt_ProductionFinishedOrCancelledAddRestartAlert_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_productionIdleAlertEnabled == true) && (gf_IsUnitTypeaProductionIdleType(UnitGetType(EventUnit())) == true) && (gf_IsProductionIdleForUnitType(UnitGetType(EventUnit()), false) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_DoesProductionIdleAlertExistForUnitType(UnitGetType(EventUnit())) == false)) {
        gf_AddProductionIdleAlert(UnitGetType(EventUnit()));
    }
    else {
        gf_RestartProductionIdleAlertTimer(UnitGetType(EventUnit()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProductionFinishedOrCancelledAddRestartAlert_Init () {
    gt_ProductionFinishedOrCancelledAddRestartAlert = TriggerCreate("gt_ProductionFinishedOrCancelledAddRestartAlert_Func");
    TriggerAddEventUnitTrainProgress(gt_ProductionFinishedOrCancelledAddRestartAlert, null, c_unitProgressStageComplete);
    TriggerAddEventUnitTrainProgress(gt_ProductionFinishedOrCancelledAddRestartAlert, null, c_unitProgressStageCancel);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("BarracksAddOns", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("BarracksAddOns", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("BarracksAddOns", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("BarracksAddOns", 1), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("FactoryAddOns", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("FactoryAddOns", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("FactoryAddOns", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("FactoryAddOns", 1), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("StarportAddOns", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("StarportAddOns", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("StarportAddOns", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("StarportAddOns", 1), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("NexusTrainMothershipCore", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("NexusTrainMothershipCore", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("NexusTrainMothership", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionFinishedOrCancelledAddRestartAlert, null, AbilityCommand("NexusTrainMothership", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Production Begins (Stop Alert Timers)
//--------------------------------------------------------------------------------------------------
bool gt_NewProductionBeginsStopAlertTimers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_triggeringUnitType;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_productionIdleAlertEnabled == true) && (gf_IsUnitTypeaProductionIdleType(UnitGetType(EventUnit())) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Egg")) {
        lv_triggeringUnitType = "Larva";
    }
    else {
        lv_triggeringUnitType = UnitGetType(EventUnit());
    }
    if ((gf_DoesProductionIdleAlertExistForUnitType(lv_triggeringUnitType) == true)) {
        gf_StopProductionIdleTimer(lv_triggeringUnitType);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewProductionBeginsStopAlertTimers_Init () {
    gt_NewProductionBeginsStopAlertTimers = TriggerCreate("gt_NewProductionBeginsStopAlertTimers_Func");
    TriggerAddEventUnitTrainProgress(gt_NewProductionBeginsStopAlertTimers, null, c_unitProgressStageStart);
    TriggerAddEventUnitAbility(gt_NewProductionBeginsStopAlertTimers, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_NewProductionBeginsStopAlertTimers, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_NewProductionBeginsStopAlertTimers, null, AbilityCommand("BarracksAddOns", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_NewProductionBeginsStopAlertTimers, null, AbilityCommand("BarracksAddOns", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_NewProductionBeginsStopAlertTimers, null, AbilityCommand("FactoryAddOns", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_NewProductionBeginsStopAlertTimers, null, AbilityCommand("FactoryAddOns", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_NewProductionBeginsStopAlertTimers, null, AbilityCommand("StarportAddOns", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_NewProductionBeginsStopAlertTimers, null, AbilityCommand("StarportAddOns", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_NewProductionBeginsStopAlertTimers, null, AbilityCommand("NexusTrainMothershipCore", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_NewProductionBeginsStopAlertTimers, null, AbilityCommand("NexusTrainMothership", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production Idle Alert Timer Expires (Fire Alert)
//--------------------------------------------------------------------------------------------------
bool gt_ProductionIdleAlertTimerExpiresFireAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_alertUnitType;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_productionIdleAlertEnabled == true) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) < 200) && (gf_IsTimeraProductionIdleTimer(EventTimer()) == true) && (gv_productionIdleNumProductionUnitTypes > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_alertUnitType = gv_productionIdleAlerts[gf_GetProductionIdleAlertIndexForTimer(EventTimer())].lv_unitType;
    if ((gf_IsProductionIdleForUnitType(lv_alertUnitType, false) == true)) {
        TextExpressionSetToken("Param/Expression/CD58AD2D", "A", UnitTypeGetName(lv_alertUnitType));
        gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/CD58AD2D"));
        gf_FireProductionIdleAlert(EventTimer());
    }
    else {
        TextExpressionSetToken("Param/Expression/7023621D", "A", UnitTypeGetName(lv_alertUnitType));
        gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/7023621D"));
        gf_RestartProductionIdleCooldownTimer(lv_alertUnitType);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProductionIdleAlertTimerExpiresFireAlert_Init () {
    gt_ProductionIdleAlertTimerExpiresFireAlert = TriggerCreate("gt_ProductionIdleAlertTimerExpiresFireAlert_Func");
    TriggerAddEventTimer(gt_ProductionIdleAlertTimerExpiresFireAlert, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minerals Above Threshold
//--------------------------------------------------------------------------------------------------
bool gt_MineralsAboveThreshold_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_alertMineralsEnabled == true) && (TimerGetRemaining(gv_alertMineralsCooldownTimer) == 0.0) && (PlayerScoreValueGetAsInt(1, "MineralsCurrent") > gv_alertMineralsThreshold) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) <= 200)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_alertMineralsCooldownTimer, gv_alertCooldownSeconds, false, c_timeGame);
    UIAlert("MineralsTooHigh", 1, StringExternal("Param/Value/40F47144"), null);
    if ((gv_muteAlertsEnabled == false)) {
        SoundPlay(SoundLink("Alert_BaseUnderAttackKlaxon", -1), PlayerGroupAll(), 50.0, 4.8);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralsAboveThreshold_Init () {
    gt_MineralsAboveThreshold = TriggerCreate("gt_MineralsAboveThreshold_Func");
    TriggerAddEventTimePeriodic(gt_MineralsAboveThreshold, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gas Above Threshold
//--------------------------------------------------------------------------------------------------
bool gt_GasAboveThreshold_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_alertGasEnabled == true) && (TimerGetRemaining(gv_alertGasCooldownTimer) == 0.0) && (PlayerScoreValueGetAsInt(1, "VespeneCurrent") > gv_alertGasThreshold) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) <= 200)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_alertGasCooldownTimer, gv_alertCooldownSeconds, false, c_timeGame);
    UIAlert("GasTooHigh", 1, StringExternal("Param/Value/F8A6C784"), null);
    if ((gv_muteAlertsEnabled == false)) {
        SoundPlay(SoundLink("Doodad_ProtossWarpInPad_Alert", -1), PlayerGroupAll(), 50.0, 0.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GasAboveThreshold_Init () {
    gt_GasAboveThreshold = TriggerCreate("gt_GasAboveThreshold_Func");
    TriggerAddEventTimePeriodic(gt_GasAboveThreshold, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Block Imminent
//--------------------------------------------------------------------------------------------------
bool gt_SupplyBlockImminent_Func (bool testConds, bool runActions) {
    string auto281F1F30_val;

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_alertSupplyBlockEnabled == true) && (TimerGetRemaining(gv_alertSupplyBlockCooldownTimer) == 0.0) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) > gv_alertSupplyBlockStart) && (((PlayerGetPropertyInt(1, c_playerPropSuppliesMade)-PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)) >= 0) && ((PlayerGetPropertyInt(1, c_playerPropSuppliesMade)-PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)) <= gv_alertSupplyBlockWithinCapThreshold)) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) <= (200-gv_alertSupplyBlockWithinCapThreshold)) && (gf_IsSupplyDepotorPylonUnderConstruction() == false) && (gf_IsOverlordCurrentlyInProgress() == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_alertSupplyBlockCooldownTimer, gv_warningPingCooldownSeconds, false, c_timeGame);
    auto281F1F30_val = PlayerRace(1);
    if (auto281F1F30_val == "Prot") {
        UIAlert("SupplyBlockImminentProtoss", 1, StringExternal("Param/Value/7533586F"), null);
    }
    else if (auto281F1F30_val == "Terr") {
        UIAlert("SupplyBlockImminentTerran", 1, StringExternal("Param/Value/02411A2F"), null);
    }
    else if (auto281F1F30_val == "Zerg") {
        UIAlert("SupplyBlockImminentZerg", 1, StringExternal("Param/Value/657B8378"), null);
    }
    else {
    }
    if ((gv_muteAlertsEnabled == false)) {
        SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 50.0, 2.3);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyBlockImminent_Init () {
    gt_SupplyBlockImminent = TriggerCreate("gt_SupplyBlockImminent_Func");
    TriggerAddEventTimePeriodic(gt_SupplyBlockImminent, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Race Macro Energy Above Threshold
//--------------------------------------------------------------------------------------------------
bool gt_RaceMacroEnergyAboveThreshold_Func (bool testConds, bool runActions) {
    unitgroup autoF5F9D5CD_g;
    int autoF5F9D5CD_u;
    string autoB329AA1E_val;

    // Variable Declarations
    unit lv_currentunit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_alertMacroEnergyEnabled == true) && (gf_IsRaceMacroEnergyAboveThreshold() == true) && (TimerGetRemaining(gv_alertMacroEnergyCooldownTimer) == 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF5F9D5CD_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF5F9D5CD_u = 1;
    for ( ; autoF5F9D5CD_u <= UnitGroupCount(autoF5F9D5CD_g, c_unitCountAll) ; autoF5F9D5CD_u += BoolToInt(lv_currentunit == UnitGroupUnit(autoF5F9D5CD_g, autoF5F9D5CD_u)) ) {
        lv_currentunit = UnitGroupUnit(autoF5F9D5CD_g, autoF5F9D5CD_u);
        TextExpressionSetToken("Param/Expression/8B19054D", "A", UnitTypeGetName(UnitGetType(lv_currentunit)));
        gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/8B19054D"));
        if (((UnitGetPropertyFixed(lv_currentunit, c_unitPropEnergy, c_unitPropCurrent) > gv_alertSelectedMacroEnergyThreshold) && ((UnitGetType(lv_currentunit) == "Queen") || (UnitGetType(lv_currentunit) == "QueenBurrowed") || (UnitGetType(lv_currentunit) == "OrbitalCommand") || (UnitGetType(lv_currentunit) == "OrbitalCommandFlying") || (UnitGetType(lv_currentunit) == "Nexus")))) {
            autoB329AA1E_val = PlayerRace(1);
            if (autoB329AA1E_val == "Zerg") {
                TextExpressionSetToken("Param/Expression/BB1E6CB1", "A", UnitTypeGetName(UnitGetType(lv_currentunit)));
                UIAlertUnit("QueenEnergyTooHigh", 1, TextExpressionAssemble("Param/Expression/BB1E6CB1"), null, lv_currentunit);
            }
            else if (autoB329AA1E_val == "Terr") {
                TextExpressionSetToken("Param/Expression/BF1F3D17", "A", UnitTypeGetName(UnitGetType(lv_currentunit)));
                UIAlertUnit("OrbitalCommandEnergyTooHigh", 1, TextExpressionAssemble("Param/Expression/BF1F3D17"), null, lv_currentunit);
            }
            else if (autoB329AA1E_val == "Prot") {
                TextExpressionSetToken("Param/Expression/23180F1D", "A", UnitTypeGetName(UnitGetType(lv_currentunit)));
                UIAlertUnit("NexusEnergyTooHigh", 1, TextExpressionAssemble("Param/Expression/23180F1D"), null, lv_currentunit);
            }
            else {
            }
            PingCreate(PlayerGroupAll(), "MinimapPing", UnitGetPosition(lv_currentunit), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 4.0);
            PingSetUnit(PingLastCreated(), lv_currentunit);
            if ((gv_muteAlertsEnabled == false)) {
                SoundPlay(SoundLink("UI_Bnet_PopUp_Generic", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else {
            }
            TimerStart(gv_alertMacroEnergyCooldownTimer, gv_alertCooldownSeconds, false, c_timeGame);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaceMacroEnergyAboveThreshold_Init () {
    gt_RaceMacroEnergyAboveThreshold = TriggerCreate("gt_RaceMacroEnergyAboveThreshold_Func");
    TriggerAddEventTimePeriodic(gt_RaceMacroEnergyAboveThreshold, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: APM Below Threshold
//--------------------------------------------------------------------------------------------------
bool gt_APMBelowThreshold_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentAPM;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_aPMBelowThresholdEnabled == true) && (TimerGetRemaining(gv_aPMBelowThresholdCooldownTimer) == 0.0) && (TimerGetElapsed(gv_currentBuildBuildTimer) > gv_aPMThresholdDuration)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentAPM = PlayerScoreValueGetAsInt(1, "APM");
    TextExpressionSetToken("Param/Expression/282BE002", "A", IntToText(lv_currentAPM));
    TextExpressionSetToken("Param/Expression/282BE002", "B", IntToText(gv_aPMBelowThresholdAlertCounter));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/282BE002"));
    if ((lv_currentAPM < gv_aPMThreshold)) {
        if ((gv_aPMBelowThresholdAlertCounter >= gv_aPMThresholdDuration)) {
            UIAlert("SupplyBlockImminentZerg2", 1, TextExpressionAssemble("Param/Expression/98B1F6BB"), "Assets\\Textures\\tutorialmouseleftbuttondown_new.dds");
            if ((gv_muteAlertsEnabled == false)) {
                SoundPlay(SoundLink("UI_BnetDockMessage", -1), PlayerGroupAll(), 50.0, 0.0);
            }
            else {
            }
            TimerStart(gv_aPMBelowThresholdCooldownTimer, gv_warningPingCooldownSeconds, false, c_timeGame);
        }
        else {
        }
        gv_aPMBelowThresholdAlertCounter += 1;
    }
    else {
        gv_aPMBelowThresholdAlertCounter = 0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_APMBelowThreshold_Init () {
    gt_APMBelowThreshold = TriggerCreate("gt_APMBelowThreshold_Func");
    TriggerAddEventTimePeriodic(gt_APMBelowThreshold, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Benchmark 1 Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_Benchmark1TimerExpires_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) >= gv_supplyBenchmarks[0].lv_benchmarkSupply)) {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[0], c_objectiveStateCompleted);
        gv_numBenchmarksMetThisBuild += 1;
    }
    else {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[0], c_objectiveStateFailed);
    }
    TextExpressionSetToken("Param/Expression/B53438FA", "A", ObjectiveGetName(gv_benchmarkSupplyObjectives[0]));
    TextExpressionSetToken("Param/Expression/B53438FA", "B", IntToText(PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)));
    ObjectiveSetName(gv_benchmarkSupplyObjectives[0], TextExpressionAssemble("Param/Expression/B53438FA"));
    gv_supplyBenchmarks[0].lv_actualSupplyatBenchmarkTime = PlayerScoreValueGetAsInt(1, "FoodUsed");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Benchmark1TimerExpires_Init () {
    gt_Benchmark1TimerExpires = TriggerCreate("gt_Benchmark1TimerExpires_Func");
    TriggerAddEventTimer(gt_Benchmark1TimerExpires, gv_benchmark1Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Benchmark 2 Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_Benchmark2TimerExpires_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) >= gv_supplyBenchmarks[1].lv_benchmarkSupply)) {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[1], c_objectiveStateCompleted);
        gv_numBenchmarksMetThisBuild += 1;
    }
    else {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[1], c_objectiveStateFailed);
    }
    TextExpressionSetToken("Param/Expression/E571E892", "A", ObjectiveGetName(gv_benchmarkSupplyObjectives[1]));
    TextExpressionSetToken("Param/Expression/E571E892", "B", IntToText(PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)));
    ObjectiveSetName(gv_benchmarkSupplyObjectives[1], TextExpressionAssemble("Param/Expression/E571E892"));
    gv_supplyBenchmarks[1].lv_actualSupplyatBenchmarkTime = PlayerScoreValueGetAsInt(1, "FoodUsed");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Benchmark2TimerExpires_Init () {
    gt_Benchmark2TimerExpires = TriggerCreate("gt_Benchmark2TimerExpires_Func");
    TriggerAddEventTimer(gt_Benchmark2TimerExpires, gv_benchmark2Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Benchmark 3 Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_Benchmark3TimerExpires_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) >= gv_supplyBenchmarks[2].lv_benchmarkSupply)) {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[2], c_objectiveStateCompleted);
        gv_numBenchmarksMetThisBuild += 1;
    }
    else {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[2], c_objectiveStateFailed);
    }
    TextExpressionSetToken("Param/Expression/D3C9632E", "A", ObjectiveGetName(gv_benchmarkSupplyObjectives[2]));
    TextExpressionSetToken("Param/Expression/D3C9632E", "B", IntToText(PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)));
    ObjectiveSetName(gv_benchmarkSupplyObjectives[2], TextExpressionAssemble("Param/Expression/D3C9632E"));
    gv_supplyBenchmarks[2].lv_actualSupplyatBenchmarkTime = PlayerScoreValueGetAsInt(1, "FoodUsed");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Benchmark3TimerExpires_Init () {
    gt_Benchmark3TimerExpires = TriggerCreate("gt_Benchmark3TimerExpires_Func");
    TriggerAddEventTimer(gt_Benchmark3TimerExpires, gv_benchmark3Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MaxTime Timer Elapsed
//--------------------------------------------------------------------------------------------------
bool gt_MaxTimeTimerElapsed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gf_IsEndBuildatMaxSupplySelected() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) == 200)) {
        ObjectiveSetState(gv_benchmarkFinalBenchmarkObjective, c_objectiveStateCompleted);
        gv_numBenchmarksMetThisBuild += 1;
    }
    else {
        ObjectiveSetState(gv_benchmarkFinalBenchmarkObjective, c_objectiveStateFailed);
    }
    TextExpressionSetToken("Param/Expression/A9D9AADE", "A", ObjectiveGetName(gv_benchmarkFinalBenchmarkObjective));
    TextExpressionSetToken("Param/Expression/A9D9AADE", "B", IntToText(PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)));
    ObjectiveSetName(gv_benchmarkFinalBenchmarkObjective, TextExpressionAssemble("Param/Expression/A9D9AADE"));
    gv_supplyBenchmarks[3].lv_actualSupplyatBenchmarkTime = PlayerScoreValueGetAsInt(1, "FoodUsed");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MaxTimeTimerElapsed_Init () {
    gt_MaxTimeTimerElapsed = TriggerCreate("gt_MaxTimeTimerElapsed_Func");
    TriggerAddEventTimer(gt_MaxTimeTimerElapsed, gv_finalBenchmarkTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: On Unit Start - Update Current Build Order
//--------------------------------------------------------------------------------------------------
bool gt_OnUnitStartUpdateCurrentBuildOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentStep;
    int lv_previousStep;
    int lv_previousUnitStep;
    int lv_benchmarkStep;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gf_IsUnitTypeValidForBenchmarkBuildOrderStep(libNtve_gf_TriggeringProgressUnitType(), gv_benchmarkBuildOrderStepCursor) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_buildOrderStepLock) {
        Wait(1.0, c_timeGame);
    }
    gv_buildOrderStepLock = true;
    lv_currentStep = gv_currentBuildOrderStepCursor;
    lv_previousStep = (lv_currentStep - 1);
    lv_previousUnitStep = gf_GetStepIndexForPreviousUnitStep(lv_previousStep);
    lv_benchmarkStep = gv_benchmarkBuildOrderStepCursor;
    TextExpressionSetToken("Param/Expression/DE9D0EE9", "A", UnitTypeGetName(libNtve_gf_TriggeringProgressUnitType()));
    TextExpressionSetToken("Param/Expression/DE9D0EE9", "B", IntToText(lv_currentStep));
    TextExpressionSetToken("Param/Expression/DE9D0EE9", "C", IntToText(lv_benchmarkStep));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/DE9D0EE9"));
    if ((((TimerGetElapsed(gv_currentBuildBuildTimer)-gv_currentBuildOrderSteps[lv_previousUnitStep].lv_elapsedSeconds) <= gv_multipleUnitFailureThreshold) && (gf_IsUnitTypeSameAsPreviousUnitType(lv_previousUnitStep, libNtve_gf_TriggeringProgressUnitType()) == true))) {
        TextExpressionSetToken("Param/Expression/5A4EE543", "A", UnitTypeGetName(libNtve_gf_TriggeringProgressUnitType()));
        TextExpressionSetToken("Param/Expression/5A4EE543", "B", UnitTypeGetName(gv_currentBuildOrderSteps[lv_previousUnitStep].lv_unitType));
        TextExpressionSetToken("Param/Expression/5A4EE543", "C", IntToText(lv_previousUnitStep));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/5A4EE543"));
        gv_currentBuildOrderSteps[lv_previousUnitStep].lv_amount += 1;
        UnitGroupAdd(gv_currentBuildOrderSteps[lv_previousUnitStep].lv_completingUnits, EventUnit());
        TextExpressionSetToken("Param/Expression/9057FDA6", "B", IntToText(lv_previousUnitStep));
        TextExpressionSetToken("Param/Expression/9057FDA6", "A", gf_GetCurrentBuildOrderStepText(lv_previousUnitStep));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/9057FDA6"));
        if (((gv_totalNumBenchmarkBuildOrderSteps > 0) && (gv_practiceAgainstBenchmarkBuildOrder == true) && (gf_IsStepIndexPastEndOfBenchmarkBuild(lv_previousUnitStep) == false) && (ObjectiveGetState(gv_benchmarkBuildOrderStepObjectives[gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lv_benchmarkStep)]) == c_objectiveStateActive))) {
            gf_EvaluateUnitTypeForBenchmarkBuildOrderStep(libNtve_gf_TriggeringProgressUnitType(), lv_previousUnitStep, lv_benchmarkStep);
        }
        else {
            TextExpressionSetToken("Param/Expression/D6A02471", "B", IntToText(lv_previousUnitStep));
            TextExpressionSetToken("Param/Expression/D6A02471", "A", IntToText(gv_totalNumBenchmarkBuildOrderSteps));
            gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/D6A02471"));
        }
    }
    else {
        TextExpressionSetToken("Param/Expression/EF816D38", "A", UnitTypeGetName(libNtve_gf_TriggeringProgressUnitType()));
        TextExpressionSetToken("Param/Expression/EF816D38", "B", UnitTypeGetName(gv_currentBuildOrderSteps[lv_previousUnitStep].lv_unitType));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/EF816D38"));
        if (((lv_currentStep) < gv_maxCurrentBuildOrderStepsTracked)) {
            gf_AddUnitBuildOrderStep(lv_currentStep, EventUnit(), libNtve_gf_TriggeringProgressUnitType());
            if (((gv_totalNumBenchmarkBuildOrderSteps > 0) && (gv_practiceAgainstBenchmarkBuildOrder == true) && (gf_IsStepIndexPastEndOfBenchmarkBuild(lv_currentStep) == false))) {
                gf_EvaluateUnitTypeForBenchmarkBuildOrderStep(libNtve_gf_TriggeringProgressUnitType(), lv_currentStep, lv_benchmarkStep);
            }
            else {
                TextExpressionSetToken("Param/Expression/8EF5124A", "B", IntToText(lv_currentStep));
                TextExpressionSetToken("Param/Expression/8EF5124A", "A", IntToText(gv_totalNumBenchmarkBuildOrderSteps));
                gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/8EF5124A"));
            }
            gv_currentBuildOrderStepCursor += 1;
        }
        else {
            gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/FE737C09"));
        }
    }
    gv_buildOrderStepLock = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnUnitStartUpdateCurrentBuildOrder_Init () {
    gt_OnUnitStartUpdateCurrentBuildOrder = TriggerCreate("gt_OnUnitStartUpdateCurrentBuildOrder_Func");
    TriggerAddEventUnitTrainProgress(gt_OnUnitStartUpdateCurrentBuildOrder, null, c_unitProgressStageStart);
    TriggerAddEventUnitConstructProgress(gt_OnUnitStartUpdateCurrentBuildOrder, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: On Upgrade Start - Update Current Build Order
//--------------------------------------------------------------------------------------------------
bool gt_OnUpgradeStartUpdateCurrentBuildOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentStep;
    int lv_benchmarkStep;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gf_IsUpgradeTypeValidForBuildOrder(libNtve_gf_TriggeringProgressUpgrade()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_buildOrderStepLock) {
        Wait(1.0, c_timeGame);
    }
    gv_buildOrderStepLock = true;
    lv_currentStep = gv_currentBuildOrderStepCursor;
    lv_benchmarkStep = gv_benchmarkBuildOrderStepCursor;
    TextExpressionSetToken("Param/Expression/148223DF", "A", gf_GetFormattedUpgradeNameasText(libNtve_gf_TriggeringProgressUpgrade()));
    TextExpressionSetToken("Param/Expression/148223DF", "B", IntToText(lv_currentStep));
    TextExpressionSetToken("Param/Expression/148223DF", "C", IntToText(lv_benchmarkStep));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/148223DF"));
    if (((lv_currentStep) < gv_maxCurrentBuildOrderStepsTracked)) {
        gf_AddUpgradeBuildOrderStep(lv_currentStep, libNtve_gf_TriggeringProgressUpgrade());
        if (((gv_totalNumBenchmarkBuildOrderSteps > 0) && (gv_practiceAgainstBenchmarkBuildOrder == true) && (gf_IsStepIndexPastEndOfBenchmarkBuild(lv_currentStep) == false))) {
            gf_EvaluateUpgradeForBenchmarkBuildOrderStep(libNtve_gf_TriggeringProgressUpgrade(), lv_currentStep, lv_benchmarkStep);
        }
        else {
            TextExpressionSetToken("Param/Expression/61255680", "B", IntToText(lv_currentStep));
            TextExpressionSetToken("Param/Expression/61255680", "A", IntToText(gv_totalNumBenchmarkBuildOrderSteps));
            gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/61255680"));
        }
        gv_currentBuildOrderStepCursor += 1;
    }
    else {
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/4D60D22A"));
    }
    gv_buildOrderStepLock = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnUpgradeStartUpdateCurrentBuildOrder_Init () {
    gt_OnUpgradeStartUpdateCurrentBuildOrder = TriggerCreate("gt_OnUpgradeStartUpdateCurrentBuildOrder_Func");
    TriggerAddEventUnitResearchProgress(gt_OnUpgradeStartUpdateCurrentBuildOrder, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: On Ability Start - Update Current Build Order
//--------------------------------------------------------------------------------------------------
bool gt_OnAbilityStartUpdateCurrentBuildOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentStep;
    int lv_benchmarkStep;
    string lv_triggeringAbilityType;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gf_IsAbilityValidForBuildOrder(AbilityCommandGetAbility(EventUnitAbility())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_buildOrderStepLock) {
        Wait(1.0, c_timeGame);
    }
    gv_buildOrderStepLock = true;
    lv_currentStep = gv_currentBuildOrderStepCursor;
    lv_benchmarkStep = gv_benchmarkBuildOrderStepCursor;
    lv_triggeringAbilityType = AbilityCommandGetAbility(EventUnitAbility());
    TextExpressionSetToken("Param/Expression/91218BC2", "A", gf_GetFormattedAbilityNameasText(lv_triggeringAbilityType));
    TextExpressionSetToken("Param/Expression/91218BC2", "B", IntToText(lv_currentStep));
    TextExpressionSetToken("Param/Expression/91218BC2", "C", IntToText(lv_benchmarkStep));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/91218BC2"));
    if (((lv_currentStep) < gv_maxCurrentBuildOrderStepsTracked)) {
        gf_AddAbilityBuildOrderStep(lv_currentStep, EventUnitAbility());
        if (((gv_totalNumBenchmarkBuildOrderSteps > 0) && (gv_practiceAgainstBenchmarkBuildOrder == true) && (gf_IsStepIndexPastEndOfBenchmarkBuild(lv_currentStep) == false))) {
            gf_EvaluateAbilityForBenchmarkBuildOrderStep(lv_triggeringAbilityType, lv_currentStep, lv_benchmarkStep);
        }
        else {
            TextExpressionSetToken("Param/Expression/B8C0A347", "B", IntToText(lv_currentStep));
            TextExpressionSetToken("Param/Expression/B8C0A347", "A", IntToText(gv_totalNumBenchmarkBuildOrderSteps));
            gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/B8C0A347"));
        }
        gv_currentBuildOrderStepCursor += 1;
    }
    else {
        TextExpressionSetToken("Param/Expression/ECB77C2B", "A", IntToText(lv_currentStep));
        TextExpressionSetToken("Param/Expression/ECB77C2B", "B", IntToText(gv_maxCurrentBuildOrderStepsTracked));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/ECB77C2B"));
    }
    gv_buildOrderStepLock = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnAbilityStartUpdateCurrentBuildOrder_Init () {
    gt_OnAbilityStartUpdateCurrentBuildOrder = TriggerCreate("gt_OnAbilityStartUpdateCurrentBuildOrder_Func");
    TriggerAddEventUnitAbility(gt_OnAbilityStartUpdateCurrentBuildOrder, null, null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: On Unit Cancel - Update Current Build Order
//--------------------------------------------------------------------------------------------------
bool gt_OnUnitCancelUpdateCurrentBuildOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentStep;
    int lv_lastAddedStep;
    int lv_lastAddedUnitStep;
    int lv_associatedBenchmarkStep;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_paused == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_buildOrderStepLock) {
        Wait(1.0, c_timeGame);
    }
    gv_buildOrderStepLock = true;
    lv_currentStep = gv_currentBuildOrderStepCursor;
    lv_lastAddedStep = (lv_currentStep - 1);
    lv_lastAddedUnitStep = gf_GetStepIndexForPreviousUnitStep(lv_lastAddedStep);
    if (((libNtve_gf_TriggeringProgressUnitType() == gv_currentBuildOrderSteps[lv_lastAddedUnitStep].lv_unitType) && (UnitGroupHasUnit(gv_currentBuildOrderSteps[lv_lastAddedUnitStep].lv_completingUnits, EventUnit()) == true))) {
        TextExpressionSetToken("Param/Expression/9B5AA675", "A", UnitTypeGetName(libNtve_gf_TriggeringProgressUnitType()));
        TextExpressionSetToken("Param/Expression/9B5AA675", "D", UnitTypeGetName(UnitGetType(EventUnit())));
        TextExpressionSetToken("Param/Expression/9B5AA675", "B", IntToText(lv_currentStep));
        TextExpressionSetToken("Param/Expression/9B5AA675", "C", IntToText(lv_associatedBenchmarkStep));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/9B5AA675"));
        lv_associatedBenchmarkStep = gv_currentBuildOrderSteps[lv_lastAddedUnitStep].lv_finishedBenchmarkStepReference;
        if (((gv_practiceAgainstBenchmarkBuildOrder == true) && (lv_associatedBenchmarkStep >= 0))) {
            gf_ResetObjectiveForBenchmarkBuildOrderStepAndUncycle(lv_associatedBenchmarkStep);
        }
        else {
        }
        if ((gv_currentBuildOrderSteps[lv_lastAddedUnitStep].lv_amount > 1)) {
            gv_currentBuildOrderSteps[lv_lastAddedUnitStep].lv_amount -= 1;
            UnitGroupRemove(gv_currentBuildOrderSteps[lv_lastAddedUnitStep].lv_completingUnits, EventUnit());
        }
        else {
            gf_RemoveUnitBuildOrderStep(lv_lastAddedUnitStep);
            gv_currentBuildOrderStepCursor -= 1;
        }
    }
    else {
        TextExpressionSetToken("Param/Expression/B530909E", "A", UnitTypeGetName(libNtve_gf_TriggeringProgressUnitType()));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/B530909E"));
    }
    gv_buildOrderStepLock = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnUnitCancelUpdateCurrentBuildOrder_Init () {
    gt_OnUnitCancelUpdateCurrentBuildOrder = TriggerCreate("gt_OnUnitCancelUpdateCurrentBuildOrder_Func");
    TriggerAddEventUnitTrainProgress(gt_OnUnitCancelUpdateCurrentBuildOrder, null, c_unitProgressStageCancel);
    TriggerAddEventUnitConstructProgress(gt_OnUnitCancelUpdateCurrentBuildOrder, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: On Upgrade Cancel - Update Current Build Order
//--------------------------------------------------------------------------------------------------
bool gt_OnUpgradeCancelUpdateCurrentBuildOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentStep;
    int lv_lastAddedStep;
    int lv_lastAddedUpgradeStep;
    int lv_associatedBenchmarkStep;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gf_IsUpgradeTypeValidForBuildOrder(libNtve_gf_TriggeringProgressUpgrade()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_buildOrderStepLock) {
        Wait(1.0, c_timeGame);
    }
    gv_buildOrderStepLock = true;
    lv_currentStep = gv_currentBuildOrderStepCursor;
    lv_lastAddedStep = (lv_currentStep - 1);
    lv_lastAddedUpgradeStep = gf_GetStepIndexForPreviousUpgradeStep(lv_lastAddedStep);
    if (((libNtve_gf_TriggeringProgressUpgrade() == gv_currentBuildOrderSteps[lv_lastAddedUpgradeStep].lv_upgrade))) {
        TextExpressionSetToken("Param/Expression/9130B6B4", "A", gf_GetFormattedUpgradeNameasText(libNtve_gf_TriggeringProgressUpgrade()));
        TextExpressionSetToken("Param/Expression/9130B6B4", "D", UnitTypeGetName(UnitGetType(EventUnit())));
        TextExpressionSetToken("Param/Expression/9130B6B4", "B", IntToText(lv_currentStep));
        TextExpressionSetToken("Param/Expression/9130B6B4", "C", IntToText(lv_lastAddedUpgradeStep));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/9130B6B4"));
        lv_associatedBenchmarkStep = gv_currentBuildOrderSteps[lv_lastAddedUpgradeStep].lv_finishedBenchmarkStepReference;
        if (((gv_practiceAgainstBenchmarkBuildOrder == true) && (lv_associatedBenchmarkStep >= 0))) {
            gf_ResetObjectiveForBenchmarkBuildOrderStepAndUncycle(lv_associatedBenchmarkStep);
        }
        else {
        }
        gf_RemoveUpgradeBuildOrderStep(lv_lastAddedUpgradeStep);
        gv_currentBuildOrderStepCursor -= 1;
    }
    else {
        TextExpressionSetToken("Param/Expression/CACE96EA", "A", UnitTypeGetName(libNtve_gf_TriggeringProgressUnitType()));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/CACE96EA"));
    }
    gv_buildOrderStepLock = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnUpgradeCancelUpdateCurrentBuildOrder_Init () {
    gt_OnUpgradeCancelUpdateCurrentBuildOrder = TriggerCreate("gt_OnUpgradeCancelUpdateCurrentBuildOrder_Func");
    TriggerAddEventUnitResearchProgress(gt_OnUpgradeCancelUpdateCurrentBuildOrder, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: On Ability Cancel - Update Current Build Order
//--------------------------------------------------------------------------------------------------
bool gt_OnAbilityCancelUpdateCurrentBuildOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentStep;
    int lv_lastAddedStep;
    int lv_lastAddedAbilityStep;
    int lv_associatedBenchmarkStep;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gf_IsAbilityValidForBuildOrder(AbilityCommandGetAbility(EventUnitAbility())) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_buildOrderStepLock) {
        Wait(1.0, c_timeGame);
    }
    gv_buildOrderStepLock = true;
    lv_currentStep = gv_currentBuildOrderStepCursor;
    lv_lastAddedStep = (lv_currentStep - 1);
    lv_lastAddedAbilityStep = gf_GetStepIndexForPreviousAbilityStep(lv_lastAddedStep);
    if (((EventUnitAbility() == gv_currentBuildOrderSteps[lv_lastAddedAbilityStep].lv_completingAbility))) {
        TextExpressionSetToken("Param/Expression/6A3A4F23", "A", gf_GetFormattedAbilityNameasText(AbilityCommandGetAbility(EventUnitAbility())));
        TextExpressionSetToken("Param/Expression/6A3A4F23", "D", UnitTypeGetName(UnitGetType(EventUnit())));
        TextExpressionSetToken("Param/Expression/6A3A4F23", "B", IntToText(lv_currentStep));
        TextExpressionSetToken("Param/Expression/6A3A4F23", "C", IntToText(lv_lastAddedAbilityStep));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/6A3A4F23"));
        lv_associatedBenchmarkStep = gv_currentBuildOrderSteps[lv_lastAddedAbilityStep].lv_finishedBenchmarkStepReference;
        if (((gv_practiceAgainstBenchmarkBuildOrder == true) && (lv_associatedBenchmarkStep >= 0))) {
            gf_ResetObjectiveForBenchmarkBuildOrderStepAndUncycle(lv_associatedBenchmarkStep);
        }
        else {
        }
        gf_RemoveAbilityBuildOrderStep(lv_lastAddedAbilityStep);
        gv_currentBuildOrderStepCursor -= 1;
    }
    else {
        TextExpressionSetToken("Param/Expression/33C03279", "A", UnitTypeGetName(libNtve_gf_TriggeringProgressUnitType()));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/33C03279"));
    }
    gv_buildOrderStepLock = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnAbilityCancelUpdateCurrentBuildOrder_Init () {
    gt_OnAbilityCancelUpdateCurrentBuildOrder = TriggerCreate("gt_OnAbilityCancelUpdateCurrentBuildOrder_Func");
    TriggerAddEventUnitAbility(gt_OnAbilityCancelUpdateCurrentBuildOrder, null, null, c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: On Multiple Unit Failure Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_OnMultipleUnitFailureTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stepNumber;
    text lv_temp;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_practiceAgainstBenchmarkBuildOrder == true) && (gf_IsTimeraMultiUnitFailureTimer(EventTimer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stepNumber = gf_GetBenchmarkStepForMultiUnitFailureTimer(EventTimer());
    TextExpressionSetToken("Param/Expression/721980B5", "A", UnitTypeGetName(gv_benchmarkBuildOrderSteps[lv_stepNumber].lv_unitType));
    TextExpressionSetToken("Param/Expression/721980B5", "B", IntToText(lv_stepNumber));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/721980B5"));
    gf_FailBenchmarkStepObjectiveAndCycle(gv_currentBuildOrderStepCursor, lv_stepNumber, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnMultipleUnitFailureTimerExpires_Init () {
    gt_OnMultipleUnitFailureTimerExpires = TriggerCreate("gt_OnMultipleUnitFailureTimerExpires_Func");
    TriggerAddEventTimer(gt_OnMultipleUnitFailureTimerExpires, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fork Build Order
//--------------------------------------------------------------------------------------------------
bool gt_ForkBuildOrder_Func (bool testConds, bool runActions) {
    int auto991C8C82_ae;
    int auto991C8C82_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_practiceAgainstBenchmarkBuildOrder == true) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/52625F29"));
    gv_practiceAgainstBenchmarkBuildOrder = false;
    auto991C8C82_ae = gv_maxDisplayedBuildOrderObjectives1;
    auto991C8C82_ai = 1;
    lv_i = gf_GetObjectiveIndexforBenchmarkBuildOrderStep(gv_benchmarkBuildOrderStepCursor);
    for ( ; ( (auto991C8C82_ai >= 0 && lv_i <= auto991C8C82_ae) || (auto991C8C82_ai <= 0 && lv_i >= auto991C8C82_ae) ) ; lv_i += auto991C8C82_ai ) {
        ObjectiveDestroy(gv_benchmarkBuildOrderStepObjectives[lv_i]);
        Wait(0.1, c_timeGame);
    }
    libNtve_gf_HideScreenButton(false, gv_forkScreenButtonID);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    gv_currentBuildWasForked = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForkBuildOrder_Init () {
    gt_ForkBuildOrder = TriggerCreate("gt_ForkBuildOrder_Func");
    TriggerAddEventChatMessage(gt_ForkBuildOrder, c_playerAny, "-f", true);
    TriggerAddEventChatMessage(gt_ForkBuildOrder, c_playerAny, "-fork", true);
    TriggerAddEventKeyPressed(gt_ForkBuildOrder, 1, c_keyK, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Every Second - Check for Build Hints
//--------------------------------------------------------------------------------------------------
bool gt_EverySecondCheckforBuildHints_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_message;
    fixed lv_timebeforenextstep;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_practiceAgainstBenchmarkBuildOrder == true) && (gv_displayBuildHints == true) && (gv_paused == false) && (TimerGetRemaining(gv_displayBuildHintCooldownTimer) == 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timebeforenextstep = (gv_benchmarkBuildOrderSteps[gv_buildHintCursor].lv_elapsedSeconds-TimerGetElapsed(gv_currentBuildBuildTimer));
    if (((lv_timebeforenextstep <= gv_buildHintTimeThreshold) && (lv_timebeforenextstep >= 0.0))) {
        TimerStart(gv_displayBuildHintCooldownTimer, 6.0, false, c_timeGame);
        TextExpressionSetToken("Param/Expression/8534C2D6", "A", gf_GetBenchmarkBuildOrderStepText(gv_buildHintCursor));
        lv_message = TextExpressionAssemble("Param/Expression/8534C2D6");
        gv_buildHintCursor += 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lv_message);
        Wait(0.5, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        Wait(0.5, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lv_message);
        Wait(0.5, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        Wait(0.5, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lv_message);
        Wait(4.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EverySecondCheckforBuildHints_Init () {
    gt_EverySecondCheckforBuildHints = TriggerCreate("gt_EverySecondCheckforBuildHints_Func");
    TriggerAddEventTimePeriodic(gt_EverySecondCheckforBuildHints, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Build Hints
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableBuildHints_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_practiceAgainstBenchmarkBuildOrder == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_displayBuildHints == true)) {
        gv_displayBuildHints = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/075B7A5A"));
    }
    else {
        gv_displayBuildHints = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5D521067"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableBuildHints_Init () {
    gt_EnableDisableBuildHints = TriggerCreate("gt_EnableDisableBuildHints_Func");
    TriggerAddEventChatMessage(gt_EnableDisableBuildHints, c_playerAny, "-h", true);
    TriggerAddEventChatMessage(gt_EnableDisableBuildHints, c_playerAny, "-hints", true);
    TriggerAddEventKeyPressed(gt_EnableDisableBuildHints, 1, c_keyH, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Spending Quotient
//--------------------------------------------------------------------------------------------------
bool gt_DebugSpendingQuotient_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_result;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_debugStatsEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_result = gf_CalculateSpendingQuotient();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugSpendingQuotient_Init () {
    gt_DebugSpendingQuotient = TriggerCreate("gt_DebugSpendingQuotient_Func");
    TriggerAddEventTimePeriodic(gt_DebugSpendingQuotient, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Gas Taken
//--------------------------------------------------------------------------------------------------
bool gt_UpdateGasTaken_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Assimilator") || (UnitGetType(EventUnit()) == "Extractor") || (UnitGetType(EventUnit()) == "Refinery")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentBuildIsGasTaken = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateGasTaken_Init () {
    gt_UpdateGasTaken = TriggerCreate("gt_UpdateGasTaken_Func");
    TriggerAddEventUnitConstructProgress(gt_UpdateGasTaken, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Production Idle Time
//--------------------------------------------------------------------------------------------------
bool gt_UpdateProductionIdleTime_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gf_IsAnyProductionUnitTypeQueueIdle() == true) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_timeProductionIdleThisBuild += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateProductionIdleTime_Init () {
    gt_UpdateProductionIdleTime = TriggerCreate("gt_UpdateProductionIdleTime_Func");
    TriggerAddEventTimePeriodic(gt_UpdateProductionIdleTime, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Time Supply Blocked
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTimeSupplyBlocked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((PlayerScoreValueGetAsInt(1, "FoodUsed") == PlayerScoreValueGetAsInt(1, "FoodMade")) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_timeSupplyBlockedThisBuild += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateTimeSupplyBlocked_Init () {
    gt_UpdateTimeSupplyBlocked = TriggerCreate("gt_UpdateTimeSupplyBlocked_Func");
    TriggerAddEventTimePeriodic(gt_UpdateTimeSupplyBlocked, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Minerals Collected This Build
//--------------------------------------------------------------------------------------------------
bool gt_UpdateMineralsCollectedThisBuild_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayerPropertyChangeInt() > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_totalMineralsCollected += EventPlayerPropertyChangeInt();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateMineralsCollectedThisBuild_Init () {
    gt_UpdateMineralsCollectedThisBuild = TriggerCreate("gt_UpdateMineralsCollectedThisBuild_Func");
    TriggerAddEventPlayerPropChange(gt_UpdateMineralsCollectedThisBuild, 1, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Gas Collected This Build
//--------------------------------------------------------------------------------------------------
bool gt_UpdateGasCollectedThisBuild_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayerPropertyChangeInt() > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_totalGasCollected += EventPlayerPropertyChangeInt();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateGasCollectedThisBuild_Init () {
    gt_UpdateGasCollectedThisBuild = TriggerCreate("gt_UpdateGasCollectedThisBuild_Func");
    TriggerAddEventPlayerPropChange(gt_UpdateGasCollectedThisBuild, 1, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update APM
//--------------------------------------------------------------------------------------------------
bool gt_UpdateAPM_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_paused == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_cumulativeAPM += PlayerScoreValueGetAsInt(1, "APM");
    gv_totalAPMSamplesThisBuild += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateAPM_Init () {
    gt_UpdateAPM = TriggerCreate("gt_UpdateAPM_Func");
    TriggerAddEventTimePeriodic(gt_UpdateAPM, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Total Workers
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTotalWorkers_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnitCreatedUnit()) == 1) && ((UnitGetType(EventUnitCreatedUnit()) == "Drone") || (UnitGetType(EventUnitCreatedUnit()) == "Probe") || (UnitGetType(EventUnitCreatedUnit()) == "SCV"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_workersCreated += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateTotalWorkers_Init () {
    gt_UpdateTotalWorkers = TriggerCreate("gt_UpdateTotalWorkers_Func");
    TriggerAddEventUnitCreated(gt_UpdateTotalWorkers, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Num Upgrades Researched
//--------------------------------------------------------------------------------------------------
bool gt_UpdateNumUpgradesResearched_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_totalNumberofUpgradesResearchedCurrentBuild += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateNumUpgradesResearched_Init () {
    gt_UpdateNumUpgradesResearched = TriggerCreate("gt_UpdateNumUpgradesResearched_Func");
    TriggerAddEventUnitResearchProgress(gt_UpdateNumUpgradesResearched, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Resource Collection Rate
//--------------------------------------------------------------------------------------------------
bool gt_UpdateResourceCollectionRate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_paused == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_cumulativeTotalMineralCollectionRate += PlayerScoreValueGetAsFixed(1, "MineralsCollectionRate");
    gv_cumulativeTotalGasCollectionRate += PlayerScoreValueGetAsFixed(1, "VespeneCollectionRate");
    gv_numResourceCollectionRateSamples += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateResourceCollectionRate_Init () {
    gt_UpdateResourceCollectionRate = TriggerCreate("gt_UpdateResourceCollectionRate_Func");
    TriggerAddEventTimePeriodic(gt_UpdateResourceCollectionRate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Average Unspent Resources
//--------------------------------------------------------------------------------------------------
bool gt_UpdateAverageUnspentResources_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_paused == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_cumulativeTotalUnspentMinerals += PlayerScoreValueGetAsInt(1, "MineralsCurrent");
    gv_cumulativeTotalUnspentGas += PlayerScoreValueGetAsInt(1, "VespeneCurrent");
    gv_numUnspentResourceSamples += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateAverageUnspentResources_Init () {
    gt_UpdateAverageUnspentResources = TriggerCreate("gt_UpdateAverageUnspentResources_Func");
    TriggerAddEventTimePeriodic(gt_UpdateAverageUnspentResources, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Build
//--------------------------------------------------------------------------------------------------
bool gt_StartBuild_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_startButton[0]) || (EventDialogControl() == gv_startButton[1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideBenchmarkDialog();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/27023A8A"));
    gf_SaveBenchmarkMenuConfiguration(gf_GetCurrentlySelectedMatchupasBankSectionKey());
    gf_SaveAlertMenuConfiguration();
    if ((gv_isFirstBuild == false)) {
        gf_ResetGameState();
    }
    else {
        gf_InitializeGameState();
    }
    Wait(1.0, c_timeGame);
    if ((gv_isFirstBuild == true)) {
        Wait(0.5, c_timeGame);
        gv_isFirstBuild = false;
    }
    else {
    }
    gf_UnpauseGame();
    TimerStart(gv_currentBuildBuildTimer, gv_onehourinseconds, false, c_timeGame);
    gf_StartBenchmarkTimers();
    CameraPan(1, PlayerStartLocation(1), 0.5, -1, 5.0, true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    CinematicFade(true, 0.5, c_fadeStyleSquareRoot, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBuild_Init () {
    gt_StartBuild = TriggerCreate("gt_StartBuild_Func");
    TriggerAddEventDialogControl(gt_StartBuild, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Build
//--------------------------------------------------------------------------------------------------
bool gt_ResetBuild_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_paused == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/B010EEE3"));
    CinematicFade(false, 0.5, c_fadeStyleSquareRoot, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_PauseGame();
    gf_ResetGameState();
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    if (((gv_debugAlertsEnabled == false) && (gv_debugBankEnabled == false) && (gv_debugBuildOrderEnabled == false) && (gv_debugMapMechanicsEnabled == false) && (gv_debugMenusEnabled == false) && (gv_debugStatsEnabled == false))) {
        UIClearMessages(PlayerGroupAll(), c_messageAreaChat);
    }
    else {
    }
    Wait(1.0, c_timeGame);
    gf_UnpauseGame();
    CameraPan(1, PlayerStartLocation(1), 0.5, -1, 5.0, true);
    CinematicFade(true, 0.5, c_fadeStyleSquareRoot, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetBuild_Init () {
    gt_ResetBuild = TriggerCreate("gt_ResetBuild_Func");
    TriggerAddEventChatMessage(gt_ResetBuild, c_playerAny, "-r", true);
    TriggerAddEventChatMessage(gt_ResetBuild, c_playerAny, "-reset", true);
    TriggerAddEventKeyPressed(gt_ResetBuild, 1, c_keyR, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Build at Max Supply
//--------------------------------------------------------------------------------------------------
bool gt_EndBuildatMaxSupply_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gf_IsEndBuildatMaxSupplySelected() == true) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) >= 199) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CompleteFinalBenchmarkObjective();
    gv_supplyBenchmarks[3].lv_actualSupplyatBenchmarkTime = PlayerScoreValueGetAsInt(1, "FoodUsed");
    TriggerExecute(gt_OpenPostBuildReportDialog, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndBuildatMaxSupply_Init () {
    gt_EndBuildatMaxSupply = TriggerCreate("gt_EndBuildatMaxSupply_Func");
    TriggerAddEventTimePeriodic(gt_EndBuildatMaxSupply, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Build at Specified Game Time
//--------------------------------------------------------------------------------------------------
bool gt_EndBuildatSpecifiedGameTime_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gf_IsEndBuildatGameTimeSelected() == true) && (TimerGetElapsed(gv_currentBuildBuildTimer) >= gv_benchmarkEndBuildatGameTimeTotalSeconds) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/7BCEB932", "A", IntToText(PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)));
    TextExpressionSetToken("Param/Expression/7BCEB932", "B", IntToText(gv_benchmarkFinalSupplyatGameTimeValue));
    gf_LogTextMessage(gv_debugMapMechanicsEnabled, TextExpressionAssemble("Param/Expression/7BCEB932"));
    if ((PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) >= gv_benchmarkFinalSupplyatGameTimeValue)) {
        gf_CompleteFinalBenchmarkObjective();
    }
    else {
        gf_FailFinalBenchmarkObjective();
    }
    gv_supplyBenchmarks[3].lv_actualSupplyatBenchmarkTime = PlayerScoreValueGetAsInt(1, "FoodUsed");
    TriggerExecute(gt_OpenPostBuildReportDialog, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndBuildatSpecifiedGameTime_Init () {
    gt_EndBuildatSpecifiedGameTime = TriggerCreate("gt_EndBuildatSpecifiedGameTime_Func");
    TriggerAddEventTimePeriodic(gt_EndBuildatSpecifiedGameTime, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Build From Hotkey
//--------------------------------------------------------------------------------------------------
bool gt_EndBuildFromHotkey_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_isBenchmarkAlertDialogOpen == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_OpenPostBuildReportDialog, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndBuildFromHotkey_Init () {
    gt_EndBuildFromHotkey = TriggerCreate("gt_EndBuildFromHotkey_Func");
    TriggerAddEventKeyPressed(gt_EndBuildFromHotkey, c_playerAny, c_keyNumPad0, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Debug Alerts
//--------------------------------------------------------------------------------------------------
bool gt_ToggleDebugAlerts_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugAlertsEnabled == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/96D9C4FC"));
        gf_DisplayDebugTimerWindowsForExistingAlertTimers();
        gv_debugAlertsEnabled = true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/26B62EAA"));
        gf_ClearDebugTimerWindows();
        gv_debugAlertsEnabled = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleDebugAlerts_Init () {
    gt_ToggleDebugAlerts = TriggerCreate("gt_ToggleDebugAlerts_Func");
    TriggerAddEventChatMessage(gt_ToggleDebugAlerts, c_playerAny, "-debug alerts", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Debug Stats
//--------------------------------------------------------------------------------------------------
bool gt_ToggleDebugStats_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugStatsEnabled == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B26255F6"));
        gv_debugStatsEnabled = true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/68D2F15B"));
        gv_debugStatsEnabled = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleDebugStats_Init () {
    gt_ToggleDebugStats = TriggerCreate("gt_ToggleDebugStats_Func");
    TriggerAddEventChatMessage(gt_ToggleDebugStats, c_playerAny, "-debug stats", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Debug Bank
//--------------------------------------------------------------------------------------------------
bool gt_ToggleDebugBank_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugBankEnabled == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BC3400B2"));
        gv_debugBankEnabled = true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BF2265EA"));
        gv_debugBankEnabled = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleDebugBank_Init () {
    gt_ToggleDebugBank = TriggerCreate("gt_ToggleDebugBank_Func");
    TriggerAddEventChatMessage(gt_ToggleDebugBank, c_playerAny, "-debug bank", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Debug Build Order
//--------------------------------------------------------------------------------------------------
bool gt_ToggleDebugBuildOrder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugBuildOrderEnabled == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6F56ECFB"));
        gf_DisplayDebugTimerWindowsForExistingMultipleUnitFailureTimers();
        gv_debugBuildOrderEnabled = true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A4733019"));
        gf_ClearDebugTimerWindows();
        gv_debugBuildOrderEnabled = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleDebugBuildOrder_Init () {
    gt_ToggleDebugBuildOrder = TriggerCreate("gt_ToggleDebugBuildOrder_Func");
    TriggerAddEventChatMessage(gt_ToggleDebugBuildOrder, c_playerAny, "-debug build", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Debug Map Mechanics
//--------------------------------------------------------------------------------------------------
bool gt_ToggleDebugMapMechanics_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugMapMechanicsEnabled == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E2D8077D"));
        gv_debugMapMechanicsEnabled = true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9F1603AB"));
        gv_debugMapMechanicsEnabled = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleDebugMapMechanics_Init () {
    gt_ToggleDebugMapMechanics = TriggerCreate("gt_ToggleDebugMapMechanics_Func");
    TriggerAddEventChatMessage(gt_ToggleDebugMapMechanics, c_playerAny, "-debug map", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Debug Menus
//--------------------------------------------------------------------------------------------------
bool gt_ToggleDebugMenus_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugMenusEnabled == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6FA425FC"));
        gv_debugMenusEnabled = true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/67A19189"));
        gv_debugMenusEnabled = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleDebugMenus_Init () {
    gt_ToggleDebugMenus = TriggerCreate("gt_ToggleDebugMenus_Func");
    TriggerAddEventChatMessage(gt_ToggleDebugMenus, c_playerAny, "-debug menus", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Boolean Condition From Hotkey
//--------------------------------------------------------------------------------------------------
bool gt_DebugBooleanConditionFromHotkey_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gf_IsEndBuildatMaxSupplySelected() == true) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) >= 200) && (gv_paused == false))) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    TextExpressionSetToken("Param/Expression/6AE5DFF2", "A", libNtve_gf_ConvertBooleanToText(gf_IsEndBuildatMaxSupplySelected()));
    TextExpressionSetToken("Param/Expression/6AE5DFF2", "E", IntToText(PlayerScoreValueGetAsInt(1, "FoodUsed")));
    TextExpressionSetToken("Param/Expression/6AE5DFF2", "B", libNtve_gf_ConvertBooleanToText((PlayerScoreValueGetAsInt(1, "FoodUsed") >= 200)));
    TextExpressionSetToken("Param/Expression/6AE5DFF2", "C", libNtve_gf_ConvertBooleanToText(gv_paused));
    TextExpressionSetToken("Param/Expression/6AE5DFF2", "D", libNtve_gf_ConvertBooleanToText(lv_result));
    gf_LogTextMessage(true, TextExpressionAssemble("Param/Expression/6AE5DFF2"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugBooleanConditionFromHotkey_Init () {
    gt_DebugBooleanConditionFromHotkey = TriggerCreate("gt_DebugBooleanConditionFromHotkey_Func");
    TriggerAddEventKeyPressed(gt_DebugBooleanConditionFromHotkey, c_playerAny, c_keyNumPadMinus, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mute/Unmute Alerts
//--------------------------------------------------------------------------------------------------
bool gt_MuteUnmuteAlerts_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_muteAlertsEnabled == false)) {
        gv_muteAlertsEnabled = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/053D400F"));
    }
    else {
        gv_muteAlertsEnabled = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5BC648F7"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MuteUnmuteAlerts_Init () {
    gt_MuteUnmuteAlerts = TriggerCreate("gt_MuteUnmuteAlerts_Func");
    TriggerAddEventChatMessage(gt_MuteUnmuteAlerts, c_playerAny, "-a", true);
    TriggerAddEventChatMessage(gt_MuteUnmuteAlerts, c_playerAny, "-alerts", true);
    TriggerAddEventKeyPressed(gt_MuteUnmuteAlerts, 1, c_keyA, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Mineral Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableMineralAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_mineralAboveThresholdAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alertMineralsEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_alertMineralsEnabled, 0, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableMineralAlert_Init () {
    gt_EnableDisableMineralAlert = TriggerCreate("gt_EnableDisableMineralAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableMineralAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Gas Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableGasAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_gasAboveThresholdAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alertGasEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_alertGasEnabled, 1, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableGasAlert_Init () {
    gt_EnableDisableGasAlert = TriggerCreate("gt_EnableDisableGasAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableGasAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Supply Block Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableSupplyBlockAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_supplyBlockImminentAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alertSupplyBlockEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_alertSupplyBlockEnabled, 2, 4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableSupplyBlockAlert_Init () {
    gt_EnableDisableSupplyBlockAlert = TriggerCreate("gt_EnableDisableSupplyBlockAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableSupplyBlockAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Macro Energy Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableMacroEnergyAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_macroEnergyAboveThresholdAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alertMacroEnergyEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_alertMacroEnergyEnabled, 3, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableMacroEnergyAlert_Init () {
    gt_EnableDisableMacroEnergyAlert = TriggerCreate("gt_EnableDisableMacroEnergyAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableMacroEnergyAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Upgrade Gap Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableUpgradeGapAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_upgradeGapAboveThresholdAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alertUpgradeGapEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_alertUpgradeGapEnabled, 4, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableUpgradeGapAlert_Init () {
    gt_EnableDisableUpgradeGapAlert = TriggerCreate("gt_EnableDisableUpgradeGapAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableUpgradeGapAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Production Idle Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableProductionIdleAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_productionIdleAboveThresholdAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_productionIdleAlertEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_productionIdleAlertEnabled, 5, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableProductionIdleAlert_Init () {
    gt_EnableDisableProductionIdleAlert = TriggerCreate("gt_EnableDisableProductionIdleAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableProductionIdleAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable APM Below Threshold
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableAPMBelowThreshold_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_aPMBelowThresholdAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_aPMBelowThresholdEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_aPMBelowThresholdEnabled, 6, 5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableAPMBelowThreshold_Init () {
    gt_EnableDisableAPMBelowThreshold = TriggerCreate("gt_EnableDisableAPMBelowThreshold_Func");
    TriggerAddEventDialogControl(gt_EnableDisableAPMBelowThreshold, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Benchmark Menu
//--------------------------------------------------------------------------------------------------
bool gt_SelectBenchmarkMenu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_benchmarksMenuButton[0]) || (EventDialogControl() == gv_benchmarksMenuButton[1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SelectBenchmarkMenu();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectBenchmarkMenu_Init () {
    gt_SelectBenchmarkMenu = TriggerCreate("gt_SelectBenchmarkMenu_Func");
    TriggerAddEventDialogControl(gt_SelectBenchmarkMenu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Main Menu
//--------------------------------------------------------------------------------------------------
bool gt_OpenMainMenu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_OpenBenchmarkDialogMainMenu();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenMainMenu_Init () {
    gt_OpenMainMenu = TriggerCreate("gt_OpenMainMenu_Func");
    TriggerAddEventChatMessage(gt_OpenMainMenu, c_playerAny, "-m", true);
    TriggerAddEventChatMessage(gt_OpenMainMenu, c_playerAny, "-menu", true);
    TriggerAddEventKeyPressed(gt_OpenMainMenu, 1, c_keyC, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Alert Menu
//--------------------------------------------------------------------------------------------------
bool gt_SelectAlertMenu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_alertMenuButton[0]) || (EventDialogControl() == gv_alertMenuButton[1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SelectAlertMenu();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectAlertMenu_Init () {
    gt_SelectAlertMenu = TriggerCreate("gt_SelectAlertMenu_Func");
    TriggerAddEventDialogControl(gt_SelectAlertMenu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Matchup
//--------------------------------------------------------------------------------------------------
bool gt_SelectMatchup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_matchupSelectionButtons[0]) || (EventDialogControl() == gv_matchupSelectionButtons[1]) || (EventDialogControl() == gv_matchupSelectionButtons[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupAll());
    gf_SaveBenchmarkMenuConfiguration(gf_GetCurrentlySelectedMatchupasBankSectionKey());
    gf_UpdateCurrentlySelectedMatchup();
    gf_LoadBenchmarkMenuConfiguration(gf_GetCurrentlySelectedMatchupasBankSectionKey());
    gv_currentBuildWasForked = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectMatchup_Init () {
    gt_SelectMatchup = TriggerCreate("gt_SelectMatchup_Func");
    TriggerAddEventDialogControl(gt_SelectMatchup, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select End Build At Max Supply
//--------------------------------------------------------------------------------------------------
bool gt_SelectEndBuildAtMaxSupply_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_endBuildPulldown) && (DialogControlGetSelectedItem(EventDialogControl(), 1) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_endBuildMinutesEditBox, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_endBuildMinutesLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_endBuildSecondsEditBox, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_endBuildSecondsLabel, PlayerGroupAll(), false);
    gf_BenchmarkDialogToggleMaxSupplyatTimeRowVisible();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectEndBuildAtMaxSupply_Init () {
    gt_SelectEndBuildAtMaxSupply = TriggerCreate("gt_SelectEndBuildAtMaxSupply_Func");
    TriggerAddEventDialogControl(gt_SelectEndBuildAtMaxSupply, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select End Build At Game Time
//--------------------------------------------------------------------------------------------------
bool gt_SelectEndBuildAtGameTime_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_endBuildPulldown) && (DialogControlGetSelectedItem(EventDialogControl(), 1) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_endBuildMinutesEditBox, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_endBuildMinutesLabel, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_endBuildSecondsEditBox, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_endBuildSecondsLabel, PlayerGroupAll(), true);
    gf_BenchmarkDialogToggleFinalSupplyatGameTimeRowVisible();
    TextExpressionSetToken("Param/Expression/8E606D8E", "A", IntToText(gf_GetEditBoxValueasInt(gv_endBuildMinutesEditBox)));
    TextExpressionSetToken("Param/Expression/8E606D8E", "B", IntToText(gf_GetEditBoxValueasInt(gv_endBuildSecondsEditBox)));
    libNtve_gf_SetDialogItemText(gv_finalSupplyAtGameTimeTimeTextLabel, TextExpressionAssemble("Param/Expression/8E606D8E"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectEndBuildAtGameTime_Init () {
    gt_SelectEndBuildAtGameTime = TriggerCreate("gt_SelectEndBuildAtGameTime_Func");
    TriggerAddEventDialogControl(gt_SelectEndBuildAtGameTime, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Practice Against Saved Build
//--------------------------------------------------------------------------------------------------
bool gt_TogglePracticeAgainstSavedBuild_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_practiceAgainstSavedBuildOrderCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_EvaluateAndDisableEnableBuildHintsOptions();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TogglePracticeAgainstSavedBuild_Init () {
    gt_TogglePracticeAgainstSavedBuild = TriggerCreate("gt_TogglePracticeAgainstSavedBuild_Func");
    TriggerAddEventDialogControl(gt_TogglePracticeAgainstSavedBuild, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Final Supply At Game Time Text
//--------------------------------------------------------------------------------------------------
bool gt_UpdateFinalSupplyAtGameTimeText_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_endBuildMinutesEditBox) || (EventDialogControl() == gv_endBuildSecondsEditBox)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/E71E8721", "A", IntToText(gf_GetEditBoxValueasInt(gv_endBuildMinutesEditBox)));
    TextExpressionSetToken("Param/Expression/E71E8721", "B", IntToText(gf_GetEditBoxValueasInt(gv_endBuildSecondsEditBox)));
    libNtve_gf_SetDialogItemText(gv_finalSupplyAtGameTimeTimeTextLabel, TextExpressionAssemble("Param/Expression/E71E8721"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateFinalSupplyAtGameTimeText_Init () {
    gt_UpdateFinalSupplyAtGameTimeText = TriggerCreate("gt_UpdateFinalSupplyAtGameTimeText_Func");
    TriggerAddEventDialogControl(gt_UpdateFinalSupplyAtGameTimeText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeTextChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Saved Benchmark Build for Matchup on Button Press
//--------------------------------------------------------------------------------------------------
bool gt_ClearSavedBenchmarkBuildforMatchuponButtonPress_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_practiceAgainstSavedBuildOrderClearButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ClearBenchmarkBuildOrderforCurrentMatchup();
    gf_ClearBenchmarkBuildStatsForCurrentMatchup();
    libNtve_gf_SetDialogItemChecked(gv_practiceAgainstSavedBuildOrderCheckbox, false, PlayerGroupAll());
    DialogControlSetEnabled(gv_practiceAgainstSavedBuildOrderCheckbox, PlayerGroupAll(), false);
    DialogControlSetEnabled(gv_practiceAgainstSavedBuildOrderLabel, PlayerGroupAll(), false);
    DialogControlSetEnabled(gv_practiceAgainstSavedBuildOrderClearButton, PlayerGroupAll(), false);
    gf_EvaluateAndDisableEnableBuildHintsOptions();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClearSavedBenchmarkBuildforMatchuponButtonPress_Init () {
    gt_ClearSavedBenchmarkBuildforMatchuponButtonPress = TriggerCreate("gt_ClearSavedBenchmarkBuildforMatchuponButtonPress_Func");
    TriggerAddEventDialogControl(gt_ClearSavedBenchmarkBuildforMatchuponButtonPress, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Help and Resume Build from Ok Button
//--------------------------------------------------------------------------------------------------
bool gt_CloseHelpandResumeBuildfromOkButton_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_helpOkButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CloseHelpDialogandUnpause();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseHelpandResumeBuildfromOkButton_Init () {
    gt_CloseHelpandResumeBuildfromOkButton = TriggerCreate("gt_CloseHelpandResumeBuildfromOkButton_Func");
    TriggerAddEventDialogControl(gt_CloseHelpandResumeBuildfromOkButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Help and Resume Build from Hotkey
//--------------------------------------------------------------------------------------------------
bool gt_CloseHelpandResumeBuildfromHotkey_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_isHelpDialogOpen == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CloseHelpDialogandUnpause();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseHelpandResumeBuildfromHotkey_Init () {
    gt_CloseHelpandResumeBuildfromHotkey = TriggerCreate("gt_CloseHelpandResumeBuildfromHotkey_Func");
    TriggerAddEventKeyPressed(gt_CloseHelpandResumeBuildfromHotkey, 1, c_keyX, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Help Dialog
//--------------------------------------------------------------------------------------------------
bool gt_OpenHelpDialog_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_isHelpDialogOpen == false) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_PauseGame();
    gf_HideBenchmarkDialog();
    DialogSetVisible(gv_statsDialog, PlayerGroupAll(), false);
    gv_isStatsDialogOpen = false;
    DialogSetVisible(gv_helpDialog, PlayerGroupAll(), true);
    gv_isHelpDialogOpen = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenHelpDialog_Init () {
    gt_OpenHelpDialog = TriggerCreate("gt_OpenHelpDialog_Func");
    TriggerAddEventChatMessage(gt_OpenHelpDialog, c_playerAny, "-help", true);
    TriggerAddEventKeyPressed(gt_OpenHelpDialog, 1, c_keyX, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Post-Build Report Dialog
//--------------------------------------------------------------------------------------------------
bool gt_OpenPostBuildReportDialog_Func (bool testConds, bool runActions) {
    unitgroup auto8DF230F2_g;
    int auto8DF230F2_u;

    // Variable Declarations
    unit lv_currentUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_muteVictoryFanfare == false)) {
        libHots_gf_PlaySoundLinkasMusic(SoundLink("VictoryFanfare", -1), false, true);
    }
    else {
    }
    gf_PauseGame();
    gf_UpdatePostBuildReportDialogValues(true);
    gf_UpdatePostBuildMatchupText();
    DialogSetVisible(gv_postBuildReportDialog, PlayerGroupAll(), true);
    libNtve_gf_SwooshCamera(1, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 0.0), (CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)+ 20
), PlayerStartLocation(1), 15.0);
    CameraPan(1, PlayerStartLocation(1), 20.0, -1, 10.0, true);
    auto8DF230F2_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto8DF230F2_u = 1;
    for ( ; auto8DF230F2_u <= UnitGroupCount(auto8DF230F2_g, c_unitCountAll) ; auto8DF230F2_u += BoolToInt(lv_currentUnit == UnitGroupUnit(auto8DF230F2_g, auto8DF230F2_u)) ) {
        lv_currentUnit = UnitGroupUnit(auto8DF230F2_g, auto8DF230F2_u);
        Wait(0.2, c_timeGame);
        UnitKill(lv_currentUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenPostBuildReportDialog_Init () {
    gt_OpenPostBuildReportDialog = TriggerCreate("gt_OpenPostBuildReportDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save Benchmark Build Stats
//--------------------------------------------------------------------------------------------------
bool gt_SaveBenchmarkBuildStats_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_postBuildReportSaveBuildButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SaveCurrentBuildStatsAsBenchmarkBuildStats();
    gf_UpdatePostBuildReportDialogValues(false);
    gf_SaveCurrentBuildAsBenchmarkBuildOrderForCurrentMatchup();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SaveBenchmarkBuildStats_Init () {
    gt_SaveBenchmarkBuildStats = TriggerCreate("gt_SaveBenchmarkBuildStats_Func");
    TriggerAddEventDialogControl(gt_SaveBenchmarkBuildStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Benchmark Build Stats
//--------------------------------------------------------------------------------------------------
bool gt_ResetBenchmarkBuildStats_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_postBuildReportClearBuildButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ClearBenchmarkBuildStatsForCurrentMatchup();
    gf_UpdatePostBuildReportDialogValues(false);
    gf_ClearBenchmarkBuildOrderforCurrentMatchup();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetBenchmarkBuildStats_Init () {
    gt_ResetBenchmarkBuildStats = TriggerCreate("gt_ResetBenchmarkBuildStats_Func");
    TriggerAddEventDialogControl(gt_ResetBenchmarkBuildStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return to Main Menu from Report
//--------------------------------------------------------------------------------------------------
bool gt_ReturntoMainMenufromReport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_backToMenuButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
    gv_currentBuildWasForked = false;
    gf_OpenBenchmarkDialogMainMenu();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturntoMainMenufromReport_Init () {
    gt_ReturntoMainMenufromReport = TriggerCreate("gt_ReturntoMainMenufromReport_Func");
    TriggerAddEventDialogControl(gt_ReturntoMainMenufromReport, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Supply Benchmarks on Button Click
//--------------------------------------------------------------------------------------------------
bool gt_UpdateSupplyBenchmarksonButtonClick_Func (bool testConds, bool runActions) {
    int auto053D7F19_ae;
    int auto053D7F19_ai;

    // Variable Declarations
    int lv_buildtime;
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_postBuildReportBenchmarkUpdateButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_buildtime = FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer));
    auto053D7F19_ae = 3;
    auto053D7F19_ai = 1;
    lv_i = 0;
    for ( ; ( (auto053D7F19_ai >= 0 && lv_i <= auto053D7F19_ae) || (auto053D7F19_ai <= 0 && lv_i >= auto053D7F19_ae) ) ; lv_i += auto053D7F19_ai ) {
        gv_supplyBenchmarks[lv_i].lv_benchmarkSupply = gv_supplyBenchmarks[lv_i].lv_actualSupplyatBenchmarkTime;
    }
    if ((gf_IsEndBuildatMaxSupplySelected() == true)) {
        gv_benchmarkMaxSupplySeconds = ModI(lv_buildtime, 60);
        gv_benchmarkMaxSupplyMinutes = ((lv_buildtime-gv_benchmarkMaxSupplySeconds)/60);
    }
    else {
        gv_benchmarkFinalSupplyatGameTimeValue = gv_supplyBenchmarks[3].lv_actualSupplyatBenchmarkTime;
    }
    gf_SaveMatchupBenchmarksConfiguration(gf_GetCurrentlySelectedMatchupasBankSectionKey());
    gf_SaveBuildCompletionConfiguration(gf_GetCurrentlySelectedMatchupasBankSectionKey());
    gf_UpdatePostBuildReportBenchmarkSection();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateSupplyBenchmarksonButtonClick_Init () {
    gt_UpdateSupplyBenchmarksonButtonClick = TriggerCreate("gt_UpdateSupplyBenchmarksonButtonClick_Func");
    TriggerAddEventDialogControl(gt_UpdateSupplyBenchmarksonButtonClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mute Victory Fanfare
//--------------------------------------------------------------------------------------------------
bool gt_MuteVictoryFanfare_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_postBuildReportMuteButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(gv_postBuildReportMuteButton, 1) == true)) {
        gv_muteVictoryFanfare = true;
        libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
    }
    else {
        gv_muteVictoryFanfare = false;
    }
    BankValueSetFromFlag(gv_benchmarkerBank, gv_configurationOptionsSectionKey, gv_postBuildReportMuteButtonKey, gv_muteVictoryFanfare);
    BankSave(gv_benchmarkerBank);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MuteVictoryFanfare_Init () {
    gt_MuteVictoryFanfare = TriggerCreate("gt_MuteVictoryFanfare_Func");
    TriggerAddEventDialogControl(gt_MuteVictoryFanfare, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Stats and Resume Build from Ok Button
//--------------------------------------------------------------------------------------------------
bool gt_CloseStatsandResumeBuildfromOkButton_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_statsOkButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CloseStatsDialogandUnpause();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseStatsandResumeBuildfromOkButton_Init () {
    gt_CloseStatsandResumeBuildfromOkButton = TriggerCreate("gt_CloseStatsandResumeBuildfromOkButton_Func");
    TriggerAddEventDialogControl(gt_CloseStatsandResumeBuildfromOkButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Stats and Resume Build from Hotkey
//--------------------------------------------------------------------------------------------------
bool gt_CloseStatsandResumeBuildfromHotkey_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_isStatsDialogOpen == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CloseStatsDialogandUnpause();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseStatsandResumeBuildfromHotkey_Init () {
    gt_CloseStatsandResumeBuildfromHotkey = TriggerCreate("gt_CloseStatsandResumeBuildfromHotkey_Func");
    TriggerAddEventKeyPressed(gt_CloseStatsandResumeBuildfromHotkey, 1, c_keyZ, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Stats Dialog
//--------------------------------------------------------------------------------------------------
bool gt_OpenStatsDialog_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_isStatsDialogOpen == false) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_PauseGame();
    if ((gv_isBenchmarkAlertDialogOpen == true)) {
        gf_HideBenchmarkDialog();
    }
    else {
    }
    if ((gv_isHelpDialogOpen == true)) {
        DialogSetVisible(gv_helpDialog, PlayerGroupAll(), false);
        gv_isHelpDialogOpen = false;
    }
    else {
    }
    gf_RefreshStatsDialog();
    DialogSetVisible(gv_statsDialog, PlayerGroupAll(), true);
    gv_isStatsDialogOpen = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenStatsDialog_Init () {
    gt_OpenStatsDialog = TriggerCreate("gt_OpenStatsDialog_Func");
    TriggerAddEventChatMessage(gt_OpenStatsDialog, c_playerAny, "-s", true);
    TriggerAddEventChatMessage(gt_OpenStatsDialog, c_playerAny, "-stats", true);
    TriggerAddEventKeyPressed(gt_OpenStatsDialog, 1, c_keyZ, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetSpeedValue(c_gameSpeedFaster);
    CameraSave(1);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_InitializeGameDefaults();
    gf_InitializeDialogDefaults();
    gf_InitializeBankDefaults();
    gf_InitializeBank();
    gf_InitializeMapResources();
    gf_InitializeUnitsAndStartingResources();
    gf_PauseGame();
    gf_InitializeBenchmarkDialog();
    gf_ShowBenchmarkDialog();
    gf_CreateAlertMenuDialog();
    gf_CreateStatsDialog();
    gf_CreateHelpDialog();
    gf_InitializePostBuildReportDialog();
    gf_CreateScreenButtons();
    TimerWindowCreate(gv_currentBuildBuildTimer, StringExternal("Param/Value/EAED3202"), true, true);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorTopRight, 0, 0);
    gf_LoadBenchmarkMenuConfiguration(gf_GetCurrentlySelectedMatchupasBankSectionKey());
    gf_LoadAlertMenuConfiguration();
    gf_CreateHiddenBenchmarkSupplyObjectives();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInitialization_Init () {
    gt_MapInitialization = TriggerCreate("gt_MapInitialization_Func");
    TriggerAddEventMapInit(gt_MapInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Game
//--------------------------------------------------------------------------------------------------
bool gt_EndGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    GameOver(1, c_gameOverVictory, true, true);
    gf_PauseGame();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndGame_Init () {
    gt_EndGame = TriggerCreate("gt_EndGame_Func");
    TriggerAddEventChatMessage(gt_EndGame, c_playerAny, "gg", false);
    TriggerAddEventKeyPressed(gt_EndGame, 1, c_keyW, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker In Gas During Reset Fix
//--------------------------------------------------------------------------------------------------
bool gt_WorkerInGasDuringResetFix_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "Drone") || (UnitGetType(EventUnitCreatedUnit()) == "SCV") || (UnitGetType(EventUnitCreatedUnit()) == "Probe")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_workers, EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WorkerInGasDuringResetFix_Init () {
    gt_WorkerInGasDuringResetFix = TriggerCreate("gt_WorkerInGasDuringResetFix_Func");
    TriggerAddEventUnitCreated(gt_WorkerInGasDuringResetFix, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord InProgress Fix
//--------------------------------------------------------------------------------------------------
bool gt_OverlordInProgressFix_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_morphingOverlords, EventUnit());
    gv_numMorphingOverlords += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordInProgressFix_Init () {
    gt_OverlordInProgressFix = TriggerCreate("gt_OverlordInProgressFix_Func");
    TriggerAddEventUnitAbility(gt_OverlordInProgressFix, null, AbilityCommand("LarvaTrain", 2), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Completed or Cancelled Fix
//--------------------------------------------------------------------------------------------------
bool gt_OverlordCompletedorCancelledFix_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_numMorphingOverlords -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordCompletedorCancelledFix_Init () {
    gt_OverlordCompletedorCancelledFix = TriggerCreate("gt_OverlordCompletedorCancelledFix_Func");
    TriggerAddEventUnitAbility(gt_OverlordCompletedorCancelledFix, null, AbilityCommand("LarvaTrain", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_OverlordCompletedorCancelledFix, null, AbilityCommand("LarvaTrain", 2), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Larva Spawn Fix
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryLarvaSpawnFix_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((GameGetMissionTime() > 1.0) && (UnitGroupCount(UnitGroup(null, 1, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0), c_unitCountAll) == 1) && (UnitGetType(EventUnit()) == "Hatchery")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "SpawnMutantLarvaApplySpawnBehavior3", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryLarvaSpawnFix_Init () {
    gt_HatcheryLarvaSpawnFix = TriggerCreate("gt_HatcheryLarvaSpawnFix_Func");
    TriggerAddEventUnitRegion(gt_HatcheryLarvaSpawnFix, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_UpgradeCompleteAddUpgradeAlert_Init();
    gt_NewUpgradeStartsStopAlertTimers_Init();
    gt_UpgradeCancelledRestartAlertTimers_Init();
    gt_UpgradeGapAlertTimerExpiresFireAlert_Init();
    gt_ProductionFinishedOrCancelledAddRestartAlert_Init();
    gt_NewProductionBeginsStopAlertTimers_Init();
    gt_ProductionIdleAlertTimerExpiresFireAlert_Init();
    gt_MineralsAboveThreshold_Init();
    gt_GasAboveThreshold_Init();
    gt_SupplyBlockImminent_Init();
    gt_RaceMacroEnergyAboveThreshold_Init();
    gt_APMBelowThreshold_Init();
    gt_Benchmark1TimerExpires_Init();
    gt_Benchmark2TimerExpires_Init();
    gt_Benchmark3TimerExpires_Init();
    gt_MaxTimeTimerElapsed_Init();
    gt_OnUnitStartUpdateCurrentBuildOrder_Init();
    gt_OnUpgradeStartUpdateCurrentBuildOrder_Init();
    gt_OnAbilityStartUpdateCurrentBuildOrder_Init();
    gt_OnUnitCancelUpdateCurrentBuildOrder_Init();
    gt_OnUpgradeCancelUpdateCurrentBuildOrder_Init();
    gt_OnAbilityCancelUpdateCurrentBuildOrder_Init();
    gt_OnMultipleUnitFailureTimerExpires_Init();
    gt_ForkBuildOrder_Init();
    gt_EverySecondCheckforBuildHints_Init();
    gt_EnableDisableBuildHints_Init();
    gt_DebugSpendingQuotient_Init();
    gt_UpdateGasTaken_Init();
    gt_UpdateProductionIdleTime_Init();
    gt_UpdateTimeSupplyBlocked_Init();
    gt_UpdateMineralsCollectedThisBuild_Init();
    gt_UpdateGasCollectedThisBuild_Init();
    gt_UpdateAPM_Init();
    gt_UpdateTotalWorkers_Init();
    gt_UpdateNumUpgradesResearched_Init();
    gt_UpdateResourceCollectionRate_Init();
    gt_UpdateAverageUnspentResources_Init();
    gt_StartBuild_Init();
    gt_ResetBuild_Init();
    gt_EndBuildatMaxSupply_Init();
    gt_EndBuildatSpecifiedGameTime_Init();
    gt_EndBuildFromHotkey_Init();
    gt_ToggleDebugAlerts_Init();
    gt_ToggleDebugStats_Init();
    gt_ToggleDebugBank_Init();
    gt_ToggleDebugBuildOrder_Init();
    gt_ToggleDebugMapMechanics_Init();
    gt_ToggleDebugMenus_Init();
    gt_DebugBooleanConditionFromHotkey_Init();
    gt_MuteUnmuteAlerts_Init();
    gt_EnableDisableMineralAlert_Init();
    gt_EnableDisableGasAlert_Init();
    gt_EnableDisableSupplyBlockAlert_Init();
    gt_EnableDisableMacroEnergyAlert_Init();
    gt_EnableDisableUpgradeGapAlert_Init();
    gt_EnableDisableProductionIdleAlert_Init();
    gt_EnableDisableAPMBelowThreshold_Init();
    gt_SelectBenchmarkMenu_Init();
    gt_OpenMainMenu_Init();
    gt_SelectAlertMenu_Init();
    gt_SelectMatchup_Init();
    gt_SelectEndBuildAtMaxSupply_Init();
    gt_SelectEndBuildAtGameTime_Init();
    gt_TogglePracticeAgainstSavedBuild_Init();
    gt_UpdateFinalSupplyAtGameTimeText_Init();
    gt_ClearSavedBenchmarkBuildforMatchuponButtonPress_Init();
    gt_CloseHelpandResumeBuildfromOkButton_Init();
    gt_CloseHelpandResumeBuildfromHotkey_Init();
    gt_OpenHelpDialog_Init();
    gt_OpenPostBuildReportDialog_Init();
    gt_SaveBenchmarkBuildStats_Init();
    gt_ResetBenchmarkBuildStats_Init();
    gt_ReturntoMainMenufromReport_Init();
    gt_UpdateSupplyBenchmarksonButtonClick_Init();
    gt_MuteVictoryFanfare_Init();
    gt_CloseStatsandResumeBuildfromOkButton_Init();
    gt_CloseStatsandResumeBuildfromHotkey_Init();
    gt_OpenStatsDialog_Init();
    gt_MapInitialization_Init();
    gt_EndGame_Init();
    gt_WorkerInGasDuringResetFix_Init();
    gt_OverlordInProgressFix_Init();
    gt_OverlordCompletedorCancelledFix_Init();
    gt_HatcheryLarvaSpawnFix_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
