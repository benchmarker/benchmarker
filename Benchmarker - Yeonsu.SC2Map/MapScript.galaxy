//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Benchmarker - Akilon Wastes (Alpha)
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_BuildOrderStep {
    string lv_upgradeType;
    string lv_unitType;
    int lv_numUnits;
    int lv_supplyCount;
    int lv_elapsedSeconds;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_muteAlertsEnabled;
int gv_numMorphingOverlords;
fixed gv_warningPingCooldownSeconds;
int gv_alertCooldownSeconds;
int gv_alertMineralsThreshold;
timer gv_alertMineralsCooldownTimer;
bool gv_alertMineralsCheckEnabled;
int gv_alertGasThreshold;
timer gv_alertGasCooldownTimer;
bool gv_alertGasCheckEnabled;
int gv_alertSupplyBlockStart;
bool gv_alertSupplyBlockCheckEnabled;
int gv_alertSupplyBlockWithinCapThreshold;
timer gv_alertSupplyBlockCooldownTimer;
int gv_alertSelectedMacroEnergyThreshold;
int gv_alertZergDefaultMacroEnergyThreshold;
int gv_alertTerranDefaultMacroEnergyThreshold;
int gv_alertProtossDefaultMacroEnergyThreshold;
bool gv_alertMacroEnergyCheckEnabled;
timer gv_alertMacroEnergyCooldownTimer;
bool gv_alertUpgradeGapCheckEnabled;
int gv_alertUpgradeGapThreshold;
int gv_alertUpgradeGapNumUpgrades;
timer[31] gv_alertUpgradeGapTimers;
timer[31] gv_alertUpgradeGapCooldownTimers;
string[31] gv_alertUpgradeGapUpgrades;
bool gv_alertProductionIdleCheckEnabled;
int gv_alertProductionIdleThreshold;
int gv_alertProductionIdleNumProductionTypes;
timer[11] gv_alertProductionIdleBuildingTimers;
timer[11] gv_alertProductionIdleCooldownTimers;
string[11] gv_alertProductionIdleUnitTypes;
timer gv_overlordInProgressTimer;
int gv_overlordMorphDuration;
unitgroup gv_morphingOverlords;
string gv_benchmarkerBankName;
bank gv_benchmarkerBank;
string gv_configurationOptionsSectionKey;
string gv_alertConfigurationSectionKey;
string gv_alertMineralsCheckEnabledEntryKey;
string gv_alertMineralsThresholdKey;
string gv_alertGasCheckEnabledEntryKey;
string gv_alertGasThresholdKey;
string gv_alertSupplyBlockCheckEnabledEntryKey;
string gv_alertSupplyBlockStartKey;
string gv_alertSupplyBlockWithinCapKey;
string gv_alertMacroEnergyCheckEnabledEntryKey;
string gv_alertMacroEnergyThresholdKey;
string gv_alertUpgradeGapCheckEnabledEntryKey;
string gv_alertUpgradeGapThresholdKey;
string gv_alertProductionIdleCheckEnabledEntryKey;
string gv_alertProductionIdleThresholdKey;
string gv_benchmarkMaxTimeMinutesKey;
string gv_benchmarkMaxTimeSecondsKey;
string[4] gv_benchmarkMatchupSectionKeys;
string[4] gv_benchmarkSupplyEntryKeys;
string gv_benchmarkEndBuildSelectionKey;
string gv_benchmarkEndBuildMinutesKey;
string gv_benchmarkEndBuildSecondsKey;
string gv_benchmarkBuildStepEntryKeyPrefix;
string gv_numBenchmarkBuildOrderStepsEntryKey;
string gv_unitTypeBuildOrderStepEntryKey;
string gv_supplyCountBuildOrderStepEntryKey;
string gv_numUnitsBuildOrderStepEntryKey;
string gv_elapsedSecondsBuildOrderStepEntryKey;
string gv_vTerranMatchupSectionKey;
string gv_vZergMatchupSectionKey;
string gv_vProtossMatchupSectionKey;
string gv_bestSpendingQuotientEntryKey;
string gv_bestTotalWorkersCreatedEntryKey;
string gv_bestTotalArmySupplyEntryKey;
string gv_bestTotalArmyValueMineralsEntryKey;
string gv_bestTotalArmyValueGasEntryKey;
string gv_bestNumUpgradesResearchedEntryKey;
string gv_bestTotalMineralsCollectedEntryKey;
string gv_bestTotalGasCollectedEntryKey;
string gv_bestTimeSupplyBlockedEntryKey;
string gv_bestIdleProductionTimeEntryKey;
string gv_bestAverageUnspentMineralsEntryKey;
string gv_bestAverageUnspentGasEntryKey;
string gv_bestAverageAPMEntryKey;
color gv_objectiveSupplyColor;
int gv_labelAlignmentSpacer;
int gv_menuPadding;
int[3] gv_startButton;
int gv_startButtonWidth;
int gv_startButtonHeight;
int gv_menuSelectButtonWidth;
int gv_menuSelectButtonHeight;
int[3] gv_benchmarksMenuButton;
int[3] gv_alertMenuButton;
int gv_sectionLabelWidth;
int gv_sectionLabelHeight;
int gv_menuOptionIndent;
int gv_menuItemHeight;
int gv__2DigitEditBoxWidth;
int gv__3DigitEditBoxWidth;
int gv__4DigitEditBoxWidth;
int gv_benchmarkEditBoxHeight;
int gv_alertThresholdEditBoxHeight;
int gv_checkboxWidth;
int gv_checkboxHeight;
int gv_alertMenuDialog;
int[9][5] gv_alertMenuDialogItemGrid;
int[9][3] gv_alertRowLabelWidths;
int gv_alertMenuSupplyBlockBaseWidth;
int gv_alertMenuQueenNameWidth;
int gv_alertMenuOrbitalNameWidth;
int gv_alertMenuNexusNameWidth;
int gv_mineralAboveThresholdAlertCheckbox;
int gv_gasAboveThresholdAlertCheckbox;
int gv_supplyBlockImminentAlertCheckbox;
int gv_macroEnergyAboveThresholdAlertCheckbox;
int gv_upgradeGapAboveThresholdAlertCheckbox;
int gv_productionIdleAboveThresholdAlertCheckbox;
int gv_helpDialogItemHeight;
int gv_helpCommandLabelWidth;
int gv_helpHotkeyLabelWidth;
int gv_helpDescriptionLabelWidth;
text gv_helpDialogTitle;
int gv_helpDialog;
int gv_helpOkButton;
bool gv_helpDialogOpen;
int gv_statsDialogWidth;
int gv_statsDialogHeight;
int[11] gv_statValueDialogItems;
int gv_statValueWidth;
int gv_statLabelWidth;
int gv_statRowHeight;
text gv_statsDialogTitle;
int gv_statsDialog;
int gv_statsOkButton;
bool gv_statsDialogOpen;
int gv_backToMenuButton;
int gv_postBuildReportDialogWidth;
int gv_postBuildReportDialog;
text gv_postBuildReportDialogTitle;
int gv_postBuildReportMatchupLabel;
int gv_postBuildReportMatchupLabelWidth;
int gv_postBuildReportMatchupLabelHeight;
int gv_postBuildReportMatchupLabelXOffset;
int gv_postBuildReportMatchupLabelYOffset;
int[15][5] gv_postBuildReportDialogItems;
int gv_postBuildReportDialogItemHeight;
int gv_postBuildReportStatLabelWidth;
int gv_postBuildReportStatValueWidth;
int gv_postBuildReportStatBestWidth;
int gv_postBuildReportStatPercentDifferenceWidth;
int gv_postBuildReportBuildOrderListBox;
int gv_postBuildReportBuildStepsListBoxWidth;
int gv_postBuildReportBuildStepsListBoxHeight;
int gv_postBuildReportBuildButtonWidth;
int gv_postBuildReportBuildButtonHeight;
int gv_postBuildReportSaveBuildButton;
int gv_postBuildReportResetBuildButton;
text gv_benchmarkDialogTitle;
int gv_benchmarkDialog;
int gv_benchmarkDialogTitleSpacer;
int gv_benchmarkDialogWidth;
int gv_benchmarkDialogHeight;
int gv_benchmarkMenuSectionLabelNudge;
int gv_minutesLabelWidth;
int gv_secondsLabelWidth;
int gv_currentlySelectedMatchupIndex;
int gv_currentlySelectedMatchupButton;
int[4] gv_matchupSelectionButtons;
int gv_matchupSelectionLabelHeight;
int gv_matchupButtonWidth;
int gv_matchupButtonHeight;
int gv_matchupButtonSpacing;
int[4] gv_benchmarkSupplyEditBoxes;
int gv_supplyValueLabelWidth;
int gv_supplyValueLabelHeight;
int gv_supplyValueSpacing;
int gv_maxTimeLabelWidth;
int gv_maxTimeMinutesEditBox;
int gv_maxTimeSecondsEditBox;
int gv_endBuildLabelWidth;
int gv_endBuildPulldown;
int gv_endBuildPulldownSelection;
int gv_endBuildPulldownWidth;
int gv_endBuildMinutesEditBox;
int gv_endBuildMinutesLabel;
int gv_endBuildSecondsEditBox;
int gv_endBuildSecondsLabel;
int gv_practiceAgainstSavedBuildOrderLabelWidth;
int gv_practiceAgainstSavedBuildOrderCheckbox;
int gv_practiceAgainstSavedBuildOrderLabel;
int gv_displayBuildOrderHintsLabelWidth;
int gv_displayBuildOrderHintsCheckbox;
int gv_displayBuildOrderHintsLabel;
bool gv_debugBuildOrderTracking;
bool gv_debugMapMechanics;
bool gv_debugAlerts;
bool gv_debugBank;
timer gv_buildTimer;
int gv_selectedMaxSupply;
unitgroup gv_resources;
bool gv_paused;
int gv_onehourinsecondsof;
timer gv_benchmark1Timer;
timer gv_benchmark2Timer;
timer gv_benchmark3Timer;
int[4] gv_benchmarkSupplyObjectives;
int gv_benchmarkMaxTimeObjective;
int gv_benchmarkMaxTimeTotalSeconds;
int gv_benchmarkMaxTimeMinutes;
int gv_benchmarkMaxTimeSeconds;
timer gv_benchmarkMaxTimeTimer;
int[4] gv_benchmarkTimerDurations;
int[4] gv_benchmarkSupplyValues;
int[4] gv_benchmarkSupplyDefaults;
int gv_benchmarkEndBuildatMinutes;
int gv_benchmarkEndBuildatSeconds;
int gv_benchmarkEndBuildTotalSeconds;
int gv_greenBenchmarkSupplyThreshold;
int gv_greenBenchmarkSecondsThreshold;
int gv_yellowBenchmarkSupplyThreshold;
int gv_yellowBenchmarkSecondsThreshold;
int gv_orangeBenchmarkSupplyThreshold;
int gv_orangeBenchmarkSecondsThreshold;
int gv_trackSupplyUnitObjectivesUntil;
bool gv_trackSupplyUnitsAsObjectives;
int gv_buildOrderMaxGasSupply;
string gv_lastCreatedBuildOrderUnitType;
fixed gv_lastCreatedUnitTimestamp;
int gv_maxCurrentBuildOrderStepsTracked;
int gv_currentBuildOrderStepCursor;
gs_BuildOrderStep[51] gv_currentBuildOrderSteps;
int gv_numFailedBenchmarkBuildOrderSteps;
int gv_numCorrectedBenchmarkBuildOrderSteps;
int gv_totalNumBenchmarkBuildOrderSteps;
bool gv_practiceAgainstBenchmarkBuildOrder;
int[11] gv_benchmarkBuildOrderStepObjectives;
gs_BuildOrderStep[21] gv_benchmarkBuildOrderSteps;
int gv_benchmarkBuildOrderStepCursor;
fixed gv_spendingQuotient;
bool gv_gasTaken;
int gv_totalMineralSamplesThisBuild;
int gv_totalGasSamplesThisBuild;
int gv_totalAPMSamplesThisBuild;
int gv_timeProductionIdleThisBuild;
int gv_timeSupplyBlockedThisBuild;
int gv_cumulativeAPM;
int gv_cumulativeUnspentMinerals;
int gv_cumulativeUnspentGas;
int gv_workersCreated;
int gv_totalMineralsCollected;
int gv_totalGasCollected;
int gv_totalNumberofUpgradesResearched;
int gv_winButtonHeight;
int gv_winButtonWidth;
int gv_winButtonXPadding;
int gv_winButtonZergYPadding;
int gv_winButtonProtossYPadding;
int gv_winButtonTerranYPadding;
int gv_screenButtonWidth;
int gv_screenButtonHeight;
int gv_screenButtonXPadding;
int gv_screenButtonYPadding;

void InitGlobals () {
    int init_i;
    int init_j;

    gv_alertMineralsCooldownTimer = TimerCreate();
    gv_alertMineralsCheckEnabled = true;
    gv_alertGasCooldownTimer = TimerCreate();
    gv_alertGasCheckEnabled = true;
    gv_alertSupplyBlockCheckEnabled = true;
    gv_alertSupplyBlockCooldownTimer = TimerCreate();
    gv_alertMacroEnergyCheckEnabled = true;
    gv_alertMacroEnergyCooldownTimer = TimerCreate();
    gv_alertUpgradeGapCheckEnabled = true;
    gv_alertProductionIdleCheckEnabled = true;
    gv_overlordInProgressTimer = TimerCreate();
    gv_morphingOverlords = UnitGroupEmpty();
    gv_benchmarkerBankName = "benchmarker";
    gv_configurationOptionsSectionKey = "options";
    gv_alertConfigurationSectionKey = "alerts";
    gv_alertMineralsCheckEnabledEntryKey = "alertMineralsEnabled";
    gv_alertMineralsThresholdKey = "alertMineralsThreshold";
    gv_alertGasCheckEnabledEntryKey = "alertGasEnabled";
    gv_alertGasThresholdKey = "alertGasThreshold";
    gv_alertSupplyBlockCheckEnabledEntryKey = "alertSupplyBlockEnabled";
    gv_alertSupplyBlockStartKey = "alertSupplyBlockStart";
    gv_alertSupplyBlockWithinCapKey = "alertSupplyBlockWithinCap";
    gv_alertMacroEnergyCheckEnabledEntryKey = "alertMacroEnergyEnabled";
    gv_alertMacroEnergyThresholdKey = "alertMacroEnergyThreshold";
    gv_alertUpgradeGapCheckEnabledEntryKey = "alertUpgradeGapEnabled";
    gv_alertUpgradeGapThresholdKey = "alertUpgradeGapThreshold";
    gv_alertProductionIdleCheckEnabledEntryKey = "alertProductionIdleEnabled";
    gv_alertProductionIdleThresholdKey = "alertProductionIdleThreshold";
    gv_benchmarkMaxTimeMinutesKey = "maxTimeMin";
    gv_benchmarkMaxTimeSecondsKey = "maxTimeSec";
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_benchmarkMatchupSectionKeys[init_i] = "";
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_benchmarkSupplyEntryKeys[init_i] = "";
    }
    gv_benchmarkEndBuildSelectionKey = "endBuildSelection";
    gv_benchmarkEndBuildMinutesKey = "endBuildMin";
    gv_benchmarkEndBuildSecondsKey = "endBuildSec";
    gv_benchmarkBuildStepEntryKeyPrefix = "benchmarkBuildStep";
    gv_numBenchmarkBuildOrderStepsEntryKey = "numBenchmarkBuildOrderSteps";
    gv_unitTypeBuildOrderStepEntryKey = "unitType";
    gv_supplyCountBuildOrderStepEntryKey = "supplyCount";
    gv_numUnitsBuildOrderStepEntryKey = "numUnits";
    gv_elapsedSecondsBuildOrderStepEntryKey = "elapsedSeconds";
    gv_vTerranMatchupSectionKey = "vTerran";
    gv_vZergMatchupSectionKey = "vZerg";
    gv_vProtossMatchupSectionKey = "vProtoss";
    gv_bestSpendingQuotientEntryKey = "bestSpendingQuotient";
    gv_bestTotalWorkersCreatedEntryKey = "bestTotalWorkersCreated";
    gv_bestTotalArmySupplyEntryKey = "bestTotalArmySupply";
    gv_bestTotalArmyValueMineralsEntryKey = "bestTotalArmyValueMinerals";
    gv_bestTotalArmyValueGasEntryKey = "bestTotalArmyValueGas";
    gv_bestNumUpgradesResearchedEntryKey = "bestNumUpgradesResearched";
    gv_bestTotalMineralsCollectedEntryKey = "bestTotalMineralsCollected";
    gv_bestTotalGasCollectedEntryKey = "bestTotalGasCollected";
    gv_bestTimeSupplyBlockedEntryKey = "bestTimeSupplyBlocked";
    gv_bestIdleProductionTimeEntryKey = "bestProductionTimeIdle";
    gv_bestAverageUnspentMineralsEntryKey = "bestAverageUnspentMinerals";
    gv_bestAverageUnspentGasEntryKey = "bestAverageUnspentGas";
    gv_bestAverageAPMEntryKey = "bestAverageAPM";
    gv_objectiveSupplyColor = Color(100.00, 53.33, 6.67);
    gv_labelAlignmentSpacer = 15;
    gv_menuPadding = 60;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_startButton[init_i] = c_invalidDialogControlId;
    }
    gv_startButtonWidth = 200;
    gv_startButtonHeight = 60;
    gv_menuSelectButtonWidth = 200;
    gv_menuSelectButtonHeight = 40;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_benchmarksMenuButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_alertMenuButton[init_i] = c_invalidDialogControlId;
    }
    gv_sectionLabelWidth = 300;
    gv_sectionLabelHeight = 35;
    gv_menuOptionIndent = 5;
    gv_menuItemHeight = 50;
    gv__2DigitEditBoxWidth = 60;
    gv__3DigitEditBoxWidth = 74;
    gv__4DigitEditBoxWidth = 90;
    gv_benchmarkEditBoxHeight = 50;
    gv_alertThresholdEditBoxHeight = 50;
    gv_checkboxWidth = 50;
    gv_checkboxHeight = 50;
    gv_alertMenuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_alertMenuDialogItemGrid[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_alertMenuSupplyBlockBaseWidth = 306;
    gv_alertMenuQueenNameWidth = 100;
    gv_alertMenuOrbitalNameWidth = 235;
    gv_alertMenuNexusNameWidth = 98;
    gv_mineralAboveThresholdAlertCheckbox = c_invalidDialogControlId;
    gv_gasAboveThresholdAlertCheckbox = c_invalidDialogControlId;
    gv_supplyBlockImminentAlertCheckbox = c_invalidDialogControlId;
    gv_macroEnergyAboveThresholdAlertCheckbox = c_invalidDialogControlId;
    gv_upgradeGapAboveThresholdAlertCheckbox = c_invalidDialogControlId;
    gv_productionIdleAboveThresholdAlertCheckbox = c_invalidDialogControlId;
    gv_helpDialogItemHeight = 35;
    gv_helpCommandLabelWidth = 120;
    gv_helpHotkeyLabelWidth = 165;
    gv_helpDescriptionLabelWidth = 550;
    gv_helpDialogTitle = StringExternal("Param/Value/91DF6EE7");
    gv_helpDialog = c_invalidDialogId;
    gv_helpOkButton = c_invalidDialogControlId;
    gv_statsDialogWidth = 650;
    gv_statsDialogHeight = 525;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_statValueDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_statValueWidth = 200;
    gv_statLabelWidth = 350;
    gv_statRowHeight = 40;
    gv_statsDialogTitle = StringExternal("Param/Value/F4075B4B");
    gv_statsDialog = c_invalidDialogId;
    gv_statsOkButton = c_invalidDialogControlId;
    gv_backToMenuButton = c_invalidDialogControlId;
    gv_postBuildReportDialogWidth = 1200;
    gv_postBuildReportDialog = c_invalidDialogId;
    gv_postBuildReportDialogTitle = StringExternal("Param/Value/B121E629");
    gv_postBuildReportMatchupLabel = c_invalidDialogControlId;
    gv_postBuildReportMatchupLabelWidth = 300;
    gv_postBuildReportMatchupLabelHeight = 60;
    gv_postBuildReportMatchupLabelXOffset = 70;
    gv_postBuildReportMatchupLabelYOffset = 40;
    for (init_i = 0; init_i <= 14; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_postBuildReportDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_postBuildReportDialogItemHeight = 35;
    gv_postBuildReportStatLabelWidth = 335;
    gv_postBuildReportStatValueWidth = 150;
    gv_postBuildReportStatBestWidth = 150;
    gv_postBuildReportStatPercentDifferenceWidth = 150;
    gv_postBuildReportBuildOrderListBox = c_invalidDialogControlId;
    gv_postBuildReportBuildStepsListBoxWidth = 325;
    gv_postBuildReportBuildStepsListBoxHeight = 450;
    gv_postBuildReportBuildButtonWidth = 115;
    gv_postBuildReportBuildButtonHeight = 45;
    gv_postBuildReportSaveBuildButton = c_invalidDialogControlId;
    gv_postBuildReportResetBuildButton = c_invalidDialogControlId;
    gv_benchmarkDialogTitle = StringExternal("Param/Value/DC1E9F7A");
    gv_benchmarkDialog = c_invalidDialogId;
    gv_benchmarkDialogTitleSpacer = 50;
    gv_benchmarkDialogWidth = 1000;
    gv_benchmarkDialogHeight = 800;
    gv_benchmarkMenuSectionLabelNudge = 8;
    gv_minutesLabelWidth = 154;
    gv_secondsLabelWidth = 150;
    gv_currentlySelectedMatchupButton = gv_matchupSelectionButtons[0];
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_matchupSelectionButtons[init_i] = c_invalidDialogControlId;
    }
    gv_matchupSelectionLabelHeight = 35;
    gv_matchupButtonWidth = 200;
    gv_matchupButtonHeight = 75;
    gv_matchupButtonSpacing = 10;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_benchmarkSupplyEditBoxes[init_i] = c_invalidDialogControlId;
    }
    gv_supplyValueLabelWidth = 350;
    gv_supplyValueLabelHeight = 50;
    gv_supplyValueSpacing = 10;
    gv_maxTimeLabelWidth = 170;
    gv_maxTimeMinutesEditBox = c_invalidDialogControlId;
    gv_maxTimeSecondsEditBox = c_invalidDialogControlId;
    gv_endBuildLabelWidth = 144;
    gv_endBuildPulldown = c_invalidDialogControlId;
    gv_endBuildPulldownSelection = 1;
    gv_endBuildPulldownWidth = 190;
    gv_endBuildMinutesEditBox = c_invalidDialogControlId;
    gv_endBuildMinutesLabel = c_invalidDialogControlId;
    gv_endBuildSecondsEditBox = c_invalidDialogControlId;
    gv_endBuildSecondsLabel = c_invalidDialogControlId;
    gv_practiceAgainstSavedBuildOrderLabelWidth = 500;
    gv_practiceAgainstSavedBuildOrderCheckbox = c_invalidDialogControlId;
    gv_practiceAgainstSavedBuildOrderLabel = c_invalidDialogControlId;
    gv_displayBuildOrderHintsLabelWidth = 300;
    gv_displayBuildOrderHintsCheckbox = c_invalidDialogControlId;
    gv_displayBuildOrderHintsLabel = c_invalidDialogControlId;
    gv_buildTimer = TimerCreate();
    gv_resources = UnitGroupEmpty();
    gv_paused = true;
    gv_onehourinsecondsof = 216000;
    gv_benchmark1Timer = TimerCreate();
    gv_benchmark2Timer = TimerCreate();
    gv_benchmark3Timer = TimerCreate();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_benchmarkSupplyObjectives[init_i] = c_invalidObjectiveId;
    }
    gv_benchmarkMaxTimeObjective = c_invalidObjectiveId;
    gv_benchmarkMaxTimeMinutes = 15;
    gv_benchmarkMaxTimeTimer = TimerCreate();
    gv_benchmarkEndBuildatMinutes = 15;
    gv_greenBenchmarkSupplyThreshold = 2;
    gv_greenBenchmarkSecondsThreshold = 5;
    gv_yellowBenchmarkSupplyThreshold = 4;
    gv_yellowBenchmarkSecondsThreshold = 10;
    gv_orangeBenchmarkSupplyThreshold = 6;
    gv_orangeBenchmarkSecondsThreshold = 15;
    gv_trackSupplyUnitObjectivesUntil = 40;
    gv_buildOrderMaxGasSupply = 60;
    gv_maxCurrentBuildOrderStepsTracked = 50;
    gv_practiceAgainstBenchmarkBuildOrder = true;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_benchmarkBuildOrderStepObjectives[init_i] = c_invalidObjectiveId;
    }
    gv_workersCreated = 6;
    gv_winButtonHeight = 80;
    gv_winButtonWidth = 150;
    gv_winButtonXPadding = 10;
    gv_winButtonZergYPadding = 383;
    gv_winButtonProtossYPadding = 370;
    gv_winButtonTerranYPadding = 341;
    gv_screenButtonWidth = 120;
    gv_screenButtonHeight = 50;
    gv_screenButtonXPadding = 10;
    gv_screenButtonYPadding = 125;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_PauseAlertTimers ();
void gf_UnpauseAlertTimers ();
void gf_ResetAlertTimers ();
void gf_SaveAlertConfigurations ();
void gf_LoadAlertConfigurations ();
void gf_LoadAlertRowConfiguration (string lp_alertEnabledKey, string lp_alertThresholdKey, int lp_alertCheckbox, int lp_alertEditBox, int lp_defaultThresholdValue, int lp_rowNumber);
void gf_SaveMatchupBenchmarks (string lp_sectionKey);
void gf_LoadMatchupBenchmarks (string lp_sectionKey);
void gf_SaveBenchmarkBuildOrder ();
void gf_LoadBenchmarkBuildOrder ();
void gf_ClearBenchmarkBuildOrder ();
void gf_SaveCurrentStatsasNewBenchmark ();
void gf_ResetBenchmarkBuildStatistics ();
void gf_SaveIntAsSupplyBenchmark (int lp_value, string lp_entryKey);
void gf_LoadIntFromBankIfKeyisSetElseDefault (int lp_dialogItem, string lp_entryKey, string lp_sectionKey, int lp_defaultValue);
void gf_SaveRealAsBuildBenchmark (fixed lp_value, string lp_entryKey);
void gf_CreateAlertMenuDialog ();
void gf_CreateAlertMenuCheckbox (int lp_rowNumber);
void gf_CreateAlertMenuLabel (text lp_labelText, int lp_rowNum);
void gf_CreateAlertMenuThresholdEditBox (int lp_editBoxWidth, int lp_rowNum);
void gf_SetAlertCheckboxState (bool lp_markChecked, int lp_checkbox);
void gf_EnableDisableAlertRow (bool lp_checked, int lp_rowNum, int lp_numRowItems);
void gf_SelectAlertMenu ();
void gf_SelectBenchmarkMenu ();
void gf_CreateMenuSelectButtons (int lp_menuIndex);
void gf_CreateHelpDialog ();
void gf_CreateHelpInfoRow (text lp_commandText, text lp_hotkeyText, text lp_descriptionText, int lp_rowNum);
void gf_CloseHelpDialogandUnpause ();
void gf_CreateBenchmarkMenuDialog ();
void gf_CreateMatchupSelectionButton (text lp_buttonText, int lp_offsetPositionVariable);
void gf_CreateSupplyValueEditBox (text lp_labelText, int lp_rowNumber, int lp_defaultValue);
void gf_OpenMainMenu ();
void gf_EnablePracticeAgainstBenchmarkBuildOrderOptions ();
void gf_DisablePracticeAgainstBenchmarkBuildOrderOption ();
void gf_EvaluateAndDisableEnableBuildHintsOptions ();
void gf_CreatePostBuildReportDialog ();
void gf_CreatePostBuildDialogSectionLabel ();
void gf_CreatePostBuildMacroStatRow (text lp_labelText, int lp_rowOffset);
void gf_UpdatePostBuildReportDialogValues ();
void gf_UpdatePostBuildSupplyRowValueInt (int lp_value, string lp_benchmarkEntryKey, int lp_rowNumber, bool lp_higherIsBetter);
void gf_UpdatePostBuildSupplyRowValueReal (fixed lp_value, string lp_benchmarkEntryKey, int lp_rowNumber, bool lp_higherIsBetter);
void gf_ResetBuildOrderListBox ();
void gf_UpdateBuildStepsListBox ();
void gf_CreateStatsDialog ();
void gf_RefreshStatsDialog ();
void gf_CloseStatsDialogandUnpause ();
void gf_UpdateStatValueDialogItemText (int lp_rowOffset, text lp_statValue);
void gf_CreateStatsDialogRow (text lp_labelText, int lp_rowOffset);
void gf_InitializeBankDefaults ();
void gf_InitializeDialogDefaults ();
void gf_InitializeGameDefaults ();
void gf_InitializeMapResourcesUnitGroup ();
void gf_InitializeBank ();
void gf_ResetGameState ();
void gf_ResetMapResources ();
void gf_ResetTechTree ();
void gf_ResetCamera ();
void gf_PauseGame ();
void gf_UnpauseGame ();
void gf_StartBenchmarkTimers ();
void gf_UnpauseBenchmarkTimers ();
void gf_PauseBenchmarkTimers ();
void gf_ResetBenchmarkTimers ();
void gf_CreateHiddenBenchmarkSupplyObjectives ();
void gf_HideBenchmarkSupplyObjectives ();
void gf_ShowBenchmarkSupplyObjectives ();
void gf_ResetBenchmarkSupplyObjectives ();
void gf_CreateBenchmarkBuildOrderObjectives ();
void gf_CreateIndividualBenchmarkBuildOrderStepObjective (int lp_buildStep);
void gf_EvaluateBenchmarkBuildOrderStepObjective (string lp_unitType);
void gf_CompleteBenchmarkBuildOrderStepObjective (int lp_benchmarkBuildOrderIndex);
void gf_FailBenchmarkBuildOrderStepObjective (int lp_benchmarkBuildOrderIndex);
void gf_CorrectFailedBenchmarkBuildOrderStepObjective ();
void gf_ResetBenchmarkBuildOrderObjectives ();
void gf_InitializeBenchmarkBuildOrderObjectives ();
void gf_AddUnitBuildOrderStep (string lp_buildStepUnitType);
void gf_AddUpgradeBuildOrderStep (string lp_buildStepUnitType);
void gf_ResetCurrentBuildOrderStepsVariables ();
void gf_ResetBenchmarkBuildOrderStepsVariables ();
void gf_ResetStatistics ();
void gf_CreateScreenButtons ();
void gf_LookatandPanToUnit (unit lp_unit);
string gf_GetNextUpgrade (string lp_currentUpgrade);
text gf_GetRaceMacroUnitName ();
bool gf_IsRaceMacroEnergyAboveThreshold ();
bool gf_IsOverlordCurrentlyInProgress ();
bool gf_IsSupplyDepotorPylonUnderConstruction ();
unitgroup gf_GetAllPlayer1UnitsforType (string lp_unitType);
int gf_GetDefaultMacroEnergyThreshold ();
string gf_GetIconForBuildingType (string lp_unitType);
bool gf_IsUnitTypeTrainingQueueEmpty (string lp_unitType);
string gf_GetCurrentlySelectedMatchupasBankSectionKey ();
text gf_GetCurrentlySelectedMatchupasText ();
int gf_GetEditBoxIntValue (int lp_editBox);
bool gf_DoesSavedBuildOrderExistForCurrentMatchup ();
int gf_GetBenchmarkBuildOrderObjectiveIndexforBenchmarkBuildOrderIndex (int lp_cursor);
string gf_GetBenchmarkBuildOrderStepBankKey (int lp_stepNumber, string lp_stepEntryKeySuffix);
bool gf_IsUnitTypeCorrectForBenchmarkBuildOrderStep (string lp_unitType, int lp_benchmarkBuildOrderStepIndex);
bool gf_IsUpgradeTypeCorrectForBenchmarkBuildOrderStep (string lp_upgrade, int lp_benchmarkBuildOrderStepIndex);
bool gf_IsSupplyCountCorrectForBenchmarkBuildOrderStep (int lp_supplyCount, int lp_benchmarkBuildOrderStepIndex);
bool gf_IsNumUnitsCorrectForBenchmarkBuildOrderStep (int lp_numUnits, int lp_benchmarkBuildOrderStepIndex);
bool gf_IsUnitTypeValidForBuildOrder (string lp_unitType);
bool gf_IsUpgradeTypeValidForBuildOrder (string lp_upgrade);
text gf_GetCurrentBuildOrderStepText (int lp_stepNumber);
text gf_GetBenchmarkBuildOrderStepText (int lp_stepNumber);
text gf_GetFormattedCompleteBenchmarkBuildOrderStepText (int lp_stepNumber);
color gf_GetColorForBenchmarkBuildOrderStepCompletion (int lp_stepNumber);
text gf_GetBenchmarkandCurrentStepSupplyasText (int lp_stepNumber);
text gf_GetBenchmarkandCurrentStepSecondsDiffasText (int lp_stepNumber);
bool gf_IsProductionIdle ();
int gf_GetTimeSupplyBlocked ();
int gf_GetIdleProductionTime ();
int gf_GetAverageUnspentMinerals ();
int gf_GetAverageUnspentGas ();
int gf_GetAverageBuildAPM ();
fixed gf_GetSpendingQuotient ();
int gf_GetTotalArmySupply ();
int gf_GetTotalArmyValueMinerals ();
int gf_GetTotalArmyValueGas ();
int gf_GetNumUpgradesResearched ();
int gf_GetTotalMineralsCollected ();
int gf_GetTotalGasCollected ();
text gf_CalculateIntPercentDifferenceAsText (int lp_value, int lp_previousBest, bool lp_higherisBetter);
text gf_CalculateRealPercentDifferenceAsText (fixed lp_value, fixed lp_previousBest, bool lp_higherisBetter);
color gf_GetColorForPercentage (fixed lp_percentage, bool lp_higherIsBetter);
int gf_GetWinButtonYPadding ();
unitgroup gf_GetPlayer1Units ();
text gf_ConverttoTextWithSign (int lp_int);
string gf_TrimSOffArmors (string lp_string);
string gf_FormatCatalogStringwithSpaces (string lp_string);
bool gf_IsCapitalLetterOrDigit (string lp_letter);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MineralsAboveThreshold;
trigger gt_GasAboveThreshold;
trigger gt_SupplyBlockImminent;
trigger gt_RaceMacroEnergyAboveThreshold;
trigger gt_UpgradeGapAboveThresholdStartTimer;
trigger gt_UpgradeGapAboveThresholdTimerExpires;
trigger gt_UpgradeGapAboveThresholdNewUpgradeStarts;
trigger gt_ProductionIdleAboveThresholdStartTimer;
trigger gt_ProductionIdleAboveThresholdTimerExpires;
trigger gt_ProductionIdleAboveThresholdNewProductionStarts;
trigger gt_StartBuild;
trigger gt_ResetBuild;
trigger gt_CloseStatsandResumeBuildfromOkButton;
trigger gt_CloseStatsandResumeBuildfromHotkey;
trigger gt_CloseHelpandResumeBuildfromOkButton;
trigger gt_CloseHelpandResumeBuildfromHotkey;
trigger gt_EndBuildatMaxSupply;
trigger gt_EndBuildatSpecifiedGameTime;
trigger gt_EndBuildFromHotkey;
trigger gt_MuteUnmuteAlerts;
trigger gt_EnableDisableMineralAlert;
trigger gt_EnableDisableGasAlert;
trigger gt_EnableDisableSupplyBlockAlert;
trigger gt_EnableDisableMacroEnergyAlert;
trigger gt_EnableDisableUpgradeGapAlert;
trigger gt_EnableDisableProductionIdleAlert;
trigger gt_SelectBenchmarkMenu;
trigger gt_OpenHelpDialog;
trigger gt_SelectMatchup;
trigger gt_OpenMainMenu;
trigger gt_DisplayEndBuildGameTimeEdits;
trigger gt_HideEndBuildGameTimeEdits;
trigger gt_TogglePracticeAgainstSavedBuild;
trigger gt_SelectAlertMenu;
trigger gt_OpenPostBuildReportDialog;
trigger gt_SaveBenchmarkBuildStats;
trigger gt_ResetBenchmarkBuildStats;
trigger gt_ReturntoMainMenufromReport;
trigger gt_OpenStatsDialog;
trigger gt_MapInitialization;
trigger gt_EndGame;
trigger gt_Benchmark1TimerExpires;
trigger gt_Benchmark2TimerExpires;
trigger gt_Benchmark3TimerExpires;
trigger gt_MaxTimeTimerElapsed;
trigger gt_OnUpgradeStartUpdateCurrentBuildOrder;
trigger gt_OnUnitStartUpdateCurrentBuildOrder;
trigger gt_UpdateGasTaken;
trigger gt_UpdateProductionIdleTime;
trigger gt_UpdateTimeSupplyBlocked;
trigger gt_UpdateMineralsCollectedThisBuild;
trigger gt_UpdateGasCollectedThisBuild;
trigger gt_UpdateAverageUnspentMinerals;
trigger gt_UpdateAverageUnspentGas;
trigger gt_UpdateCumulativeAPM;
trigger gt_UpdateTotalWorkers;
trigger gt_UpdateNumUpgradesResearched;
trigger gt_OverlordInProgressFix;
trigger gt_OverlordCompletedorCancelledFix;
trigger gt_HatcheryLarvaSpawnFix;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_PauseAlertTimers () {
    int autoDAB23CA2_ae;
    int autoDAB23CA2_ai;
    int auto33B8CBD4_ae;
    int auto33B8CBD4_ai;

    // Variable Declarations
    int lv_i;
    int lv_j;

    // Variable Initialization

    // Implementation
    autoDAB23CA2_ae = gv_alertUpgradeGapNumUpgrades;
    autoDAB23CA2_ai = 1;
    lv_i = 0;
    for ( ; ( (autoDAB23CA2_ai >= 0 && lv_i <= autoDAB23CA2_ae) || (autoDAB23CA2_ai <= 0 && lv_i >= autoDAB23CA2_ae) ) ; lv_i += autoDAB23CA2_ai ) {
        TimerPause(gv_alertUpgradeGapTimers[lv_i], true);
        TimerPause(gv_alertUpgradeGapCooldownTimers[lv_i], true);
    }
    auto33B8CBD4_ae = gv_alertProductionIdleNumProductionTypes;
    auto33B8CBD4_ai = 1;
    lv_j = 0;
    for ( ; ( (auto33B8CBD4_ai >= 0 && lv_j <= auto33B8CBD4_ae) || (auto33B8CBD4_ai <= 0 && lv_j >= auto33B8CBD4_ae) ) ; lv_j += auto33B8CBD4_ai ) {
        TimerPause(gv_alertProductionIdleBuildingTimers[lv_i], true);
        TimerPause(gv_alertProductionIdleCooldownTimers[lv_i], true);
    }
}

void gf_UnpauseAlertTimers () {
    int auto88C88B75_ae;
    int auto88C88B75_ai;
    int autoA8434BF4_ae;
    int autoA8434BF4_ai;

    // Variable Declarations
    int lv_i;
    int lv_j;

    // Variable Initialization

    // Implementation
    auto88C88B75_ae = gv_alertUpgradeGapNumUpgrades;
    auto88C88B75_ai = 1;
    lv_i = 0;
    for ( ; ( (auto88C88B75_ai >= 0 && lv_i <= auto88C88B75_ae) || (auto88C88B75_ai <= 0 && lv_i >= auto88C88B75_ae) ) ; lv_i += auto88C88B75_ai ) {
        TimerPause(gv_alertUpgradeGapTimers[lv_i], false);
        TimerPause(gv_alertUpgradeGapCooldownTimers[lv_i], false);
    }
    autoA8434BF4_ae = gv_alertProductionIdleNumProductionTypes;
    autoA8434BF4_ai = 1;
    lv_i = 0;
    for ( ; ( (autoA8434BF4_ai >= 0 && lv_i <= autoA8434BF4_ae) || (autoA8434BF4_ai <= 0 && lv_i >= autoA8434BF4_ae) ) ; lv_i += autoA8434BF4_ai ) {
        TimerPause(gv_alertProductionIdleBuildingTimers[lv_i], false);
        TimerPause(gv_alertProductionIdleCooldownTimers[lv_i], false);
    }
}

void gf_ResetAlertTimers () {
    int auto453C1E1D_ae;
    int auto453C1E1D_ai;
    int auto5984B6EA_ae;
    int auto5984B6EA_ai;

    // Variable Declarations
    int lv_i;
    int lv_j;

    // Variable Initialization

    // Implementation
    gf_PauseAlertTimers();
    auto453C1E1D_ae = gv_alertUpgradeGapNumUpgrades;
    auto453C1E1D_ai = 1;
    lv_i = 0;
    for ( ; ( (auto453C1E1D_ai >= 0 && lv_i <= auto453C1E1D_ae) || (auto453C1E1D_ai <= 0 && lv_i >= auto453C1E1D_ae) ) ; lv_i += auto453C1E1D_ai ) {
        gv_alertUpgradeGapTimers[lv_i] = null;
        gv_alertUpgradeGapCooldownTimers[lv_i] = null;
        gv_alertUpgradeGapUpgrades[lv_i] = null;
    }
    auto5984B6EA_ae = gv_alertProductionIdleNumProductionTypes;
    auto5984B6EA_ai = 1;
    lv_j = 0;
    for ( ; ( (auto5984B6EA_ai >= 0 && lv_j <= auto5984B6EA_ae) || (auto5984B6EA_ai <= 0 && lv_j >= auto5984B6EA_ae) ) ; lv_j += auto5984B6EA_ai ) {
        gv_alertProductionIdleBuildingTimers[lv_i] = null;
        gv_alertProductionIdleCooldownTimers[lv_i] = null;
        gv_alertProductionIdleUnitTypes[lv_i] = null;
    }
}

void gf_SaveAlertConfigurations () {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertMineralsCheckEnabledEntryKey, gv_alertMineralsCheckEnabled);
    gv_alertMineralsThreshold = gf_GetEditBoxIntValue(gv_alertMenuDialogItemGrid[0][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertMineralsThresholdKey, gv_alertMineralsThreshold);
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertGasCheckEnabledEntryKey, gv_alertGasCheckEnabled);
    gv_alertGasThreshold = gf_GetEditBoxIntValue(gv_alertMenuDialogItemGrid[1][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertGasThresholdKey, gv_alertGasThreshold);
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockCheckEnabledEntryKey, gv_alertSupplyBlockCheckEnabled);
    gv_alertSupplyBlockWithinCapThreshold = gf_GetEditBoxIntValue(gv_alertMenuDialogItemGrid[2][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockWithinCapKey, gv_alertSupplyBlockWithinCapThreshold);
    gv_alertSupplyBlockStart = gf_GetEditBoxIntValue(gv_alertMenuDialogItemGrid[2][4]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockStartKey, gv_alertSupplyBlockStart);
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertMacroEnergyCheckEnabledEntryKey, gv_alertMacroEnergyCheckEnabled);
    gv_alertSelectedMacroEnergyThreshold = gf_GetEditBoxIntValue(gv_alertMenuDialogItemGrid[3][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertMacroEnergyThresholdKey, gv_alertSelectedMacroEnergyThreshold);
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertUpgradeGapCheckEnabledEntryKey, gv_alertUpgradeGapCheckEnabled);
    gv_alertUpgradeGapThreshold = gf_GetEditBoxIntValue(gv_alertMenuDialogItemGrid[4][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertUpgradeGapThresholdKey, gv_alertUpgradeGapThreshold);
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertProductionIdleCheckEnabledEntryKey, gv_alertProductionIdleCheckEnabled);
    gv_alertProductionIdleThreshold = gf_GetEditBoxIntValue(gv_alertMenuDialogItemGrid[5][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertProductionIdleThresholdKey, gv_alertProductionIdleThreshold);
    BankSave(gv_benchmarkerBank);
}

void gf_LoadAlertConfigurations () {
    // Implementation
    gf_LoadAlertRowConfiguration(gv_alertMineralsCheckEnabledEntryKey, gv_alertMineralsThresholdKey, gv_mineralAboveThresholdAlertCheckbox, gv_alertMenuDialogItemGrid[0][2], gv_alertMineralsThreshold, 0);
    gv_alertMineralsCheckEnabled = libNtve_gf_DialogItemIsChecked(gv_mineralAboveThresholdAlertCheckbox, 1);
    gv_alertMineralsThreshold = gf_GetEditBoxIntValue(gv_alertMenuDialogItemGrid[0][2]);
    gf_LoadAlertRowConfiguration(gv_alertGasCheckEnabledEntryKey, gv_alertGasThresholdKey, gv_gasAboveThresholdAlertCheckbox, gv_alertMenuDialogItemGrid[1][2], gv_alertGasThreshold, 1);
    gv_alertGasCheckEnabled = libNtve_gf_DialogItemIsChecked(gv_gasAboveThresholdAlertCheckbox, 1);
    gv_alertGasThreshold = gf_GetEditBoxIntValue(gv_alertMenuDialogItemGrid[1][2]);
    if ((BankKeyExists(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockCheckEnabledEntryKey) == true)) {
        if ((BankValueGetAsFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockCheckEnabledEntryKey) == true)) {
            gv_alertSupplyBlockCheckEnabled = true;
        }
        else {
            gv_alertSupplyBlockCheckEnabled = false;
        }
        gv_alertSupplyBlockWithinCapThreshold = BankValueGetAsInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockWithinCapKey);
        gv_alertSupplyBlockStart = BankValueGetAsInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockStartKey);
    }
    else {
    }
    gf_SetAlertCheckboxState(gv_alertSupplyBlockCheckEnabled, gv_supplyBlockImminentAlertCheckbox);
    gf_EnableDisableAlertRow(gv_alertSupplyBlockCheckEnabled, 2, 0);
    libNtve_gf_SetDialogItemEditorValue(gv_alertMenuDialogItemGrid[2][2], IntToString(gv_alertSupplyBlockWithinCapThreshold), PlayerGroupAll());
    libNtve_gf_SetDialogItemEditorValue(gv_alertMenuDialogItemGrid[2][4], IntToString(gv_alertSupplyBlockStart), PlayerGroupAll());
    gf_LoadAlertRowConfiguration(gv_alertMacroEnergyCheckEnabledEntryKey, gv_alertMacroEnergyThresholdKey, gv_macroEnergyAboveThresholdAlertCheckbox, gv_alertMenuDialogItemGrid[3][2], gf_GetDefaultMacroEnergyThreshold(), 3);
    gv_alertMacroEnergyCheckEnabled = libNtve_gf_DialogItemIsChecked(gv_macroEnergyAboveThresholdAlertCheckbox, 1);
    gv_alertSelectedMacroEnergyThreshold = gf_GetEditBoxIntValue(gv_alertMenuDialogItemGrid[3][2]);
    gf_LoadAlertRowConfiguration(gv_alertUpgradeGapCheckEnabledEntryKey, gv_alertUpgradeGapThresholdKey, gv_upgradeGapAboveThresholdAlertCheckbox, gv_alertMenuDialogItemGrid[4][2], gv_alertUpgradeGapThreshold, 4);
    gv_alertUpgradeGapCheckEnabled = libNtve_gf_DialogItemIsChecked(gv_upgradeGapAboveThresholdAlertCheckbox, 1);
    gv_alertSelectedMacroEnergyThreshold = gf_GetEditBoxIntValue(gv_alertMenuDialogItemGrid[4][2]);
    gf_LoadAlertRowConfiguration(gv_alertProductionIdleCheckEnabledEntryKey, gv_alertProductionIdleThresholdKey, gv_productionIdleAboveThresholdAlertCheckbox, gv_alertMenuDialogItemGrid[5][2], gv_alertProductionIdleThreshold, 5);
    gv_alertProductionIdleCheckEnabled = libNtve_gf_DialogItemIsChecked(gv_productionIdleAboveThresholdAlertCheckbox, 1);
    gv_alertProductionIdleThreshold = gf_GetEditBoxIntValue(gv_alertMenuDialogItemGrid[5][2]);
}

void gf_LoadAlertRowConfiguration (string lp_alertEnabledKey, string lp_alertThresholdKey, int lp_alertCheckbox, int lp_alertEditBox, int lp_defaultThresholdValue, int lp_rowNumber) {
    // Variable Declarations
    bool lv_checkEnabled;
    int lv_threshold;

    // Variable Initialization
    lv_checkEnabled = true;

    // Implementation
    if ((BankKeyExists(gv_benchmarkerBank, gv_alertConfigurationSectionKey, lp_alertEnabledKey) == true)) {
        if ((BankValueGetAsFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, lp_alertEnabledKey) == true)) {
            lv_checkEnabled = true;
        }
        else {
            lv_checkEnabled = false;
        }
        lv_threshold = BankValueGetAsInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, lp_alertThresholdKey);
    }
    else {
        lv_threshold = lp_defaultThresholdValue;
    }
    gf_SetAlertCheckboxState(lv_checkEnabled, lp_alertCheckbox);
    gf_EnableDisableAlertRow(lv_checkEnabled, lp_rowNumber, 0);
    libNtve_gf_SetDialogItemEditorValue(lp_alertEditBox, IntToString(lv_threshold), PlayerGroupAll());
}

void gf_SaveMatchupBenchmarks (string lp_sectionKey) {
    int autoA7CD85DF_ae;
    int autoA7CD85DF_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoA7CD85DF_ae = 2;
    autoA7CD85DF_ai = 1;
    lv_i = 0;
    for ( ; ( (autoA7CD85DF_ai >= 0 && lv_i <= autoA7CD85DF_ae) || (autoA7CD85DF_ai <= 0 && lv_i >= autoA7CD85DF_ae) ) ; lv_i += autoA7CD85DF_ai ) {
        gv_benchmarkSupplyValues[lv_i] = gf_GetEditBoxIntValue(gv_benchmarkSupplyEditBoxes[lv_i]);
        BankValueSetFromInt(gv_benchmarkerBank, lp_sectionKey, gv_benchmarkSupplyEntryKeys[lv_i], gv_benchmarkSupplyValues[lv_i]);
    }
    gv_benchmarkMaxTimeTotalSeconds = ((gf_GetEditBoxIntValue(gv_maxTimeMinutesEditBox)*60)+gf_GetEditBoxIntValue(gv_maxTimeSecondsEditBox));
    BankValueSetFromInt(gv_benchmarkerBank, lp_sectionKey, gv_benchmarkMaxTimeMinutesKey, gf_GetEditBoxIntValue(gv_maxTimeMinutesEditBox));
    BankValueSetFromInt(gv_benchmarkerBank, lp_sectionKey, gv_benchmarkMaxTimeSecondsKey, gf_GetEditBoxIntValue(gv_maxTimeSecondsEditBox));
    gv_endBuildPulldownSelection = DialogControlGetSelectedItem(gv_endBuildPulldown, 1);
    BankValueSetFromInt(gv_benchmarkerBank, gv_configurationOptionsSectionKey, gv_benchmarkEndBuildSelectionKey, DialogControlGetSelectedItem(gv_endBuildPulldown, 1));
    gv_benchmarkEndBuildatMinutes = gf_GetEditBoxIntValue(gv_endBuildMinutesEditBox);
    BankValueSetFromInt(gv_benchmarkerBank, gv_configurationOptionsSectionKey, gv_benchmarkEndBuildMinutesKey, gf_GetEditBoxIntValue(gv_endBuildMinutesEditBox));
    gv_benchmarkEndBuildatSeconds = gf_GetEditBoxIntValue(gv_endBuildSecondsEditBox);
    BankValueSetFromInt(gv_benchmarkerBank, gv_configurationOptionsSectionKey, gv_benchmarkEndBuildSecondsKey, gf_GetEditBoxIntValue(gv_endBuildSecondsEditBox));
    BankSave(gv_benchmarkerBank);
}

void gf_LoadMatchupBenchmarks (string lp_sectionKey) {
    int autoB80F7580_ae;
    int autoB80F7580_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoB80F7580_ae = 2;
    autoB80F7580_ai = 1;
    lv_i = 0;
    for ( ; ( (autoB80F7580_ai >= 0 && lv_i <= autoB80F7580_ae) || (autoB80F7580_ai <= 0 && lv_i >= autoB80F7580_ae) ) ; lv_i += autoB80F7580_ai ) {
        gf_LoadIntFromBankIfKeyisSetElseDefault(gv_benchmarkSupplyEditBoxes[lv_i], gv_benchmarkSupplyEntryKeys[lv_i], lp_sectionKey, gv_benchmarkSupplyDefaults[lv_i]);
    }
    gf_LoadIntFromBankIfKeyisSetElseDefault(gv_maxTimeMinutesEditBox, gv_benchmarkMaxTimeMinutesKey, lp_sectionKey, gv_benchmarkMaxTimeMinutes);
    gf_LoadIntFromBankIfKeyisSetElseDefault(gv_maxTimeSecondsEditBox, gv_benchmarkMaxTimeSecondsKey, lp_sectionKey, gv_benchmarkMaxTimeSeconds);
    if ((BankValueGetAsInt(gv_benchmarkerBank, gv_configurationOptionsSectionKey, gv_benchmarkEndBuildSelectionKey) > 0)) {
        DialogControlSelectItem(gv_endBuildPulldown, PlayerGroupAll(), BankValueGetAsInt(gv_benchmarkerBank, gv_configurationOptionsSectionKey, gv_benchmarkEndBuildSelectionKey));
    }
    else {
        DialogControlSelectItem(gv_endBuildPulldown, PlayerGroupAll(), gv_endBuildPulldownSelection);
    }
    gf_LoadIntFromBankIfKeyisSetElseDefault(gv_endBuildMinutesEditBox, gv_benchmarkEndBuildMinutesKey, gv_configurationOptionsSectionKey, gv_benchmarkEndBuildatMinutes);
    gf_LoadIntFromBankIfKeyisSetElseDefault(gv_endBuildSecondsEditBox, gv_benchmarkEndBuildSecondsKey, gv_configurationOptionsSectionKey, gv_benchmarkEndBuildatSeconds);
}

void gf_SaveBenchmarkBuildOrder () {
    int auto895F190E_ae;
    int auto895F190E_ai;

    // Variable Declarations
    int lv_currentStepNum;

    // Variable Initialization

    // Implementation
    if ((gv_debugBank == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D246724E"));
    }
    else {
    }
    auto895F190E_ae = (gv_currentBuildOrderStepCursor-1);
    auto895F190E_ai = 1;
    lv_currentStepNum = 0;
    for ( ; ( (auto895F190E_ai >= 0 && lv_currentStepNum <= auto895F190E_ae) || (auto895F190E_ai <= 0 && lv_currentStepNum >= auto895F190E_ae) ) ; lv_currentStepNum += auto895F190E_ai ) {
        BankValueSetFromString(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lv_currentStepNum, gv_unitTypeBuildOrderStepEntryKey), (gv_currentBuildOrderSteps[lv_currentStepNum].lv_unitType));
        BankValueSetFromInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lv_currentStepNum, gv_supplyCountBuildOrderStepEntryKey), gv_currentBuildOrderSteps[lv_currentStepNum].lv_supplyCount);
        BankValueSetFromInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lv_currentStepNum, gv_numUnitsBuildOrderStepEntryKey), gv_currentBuildOrderSteps[lv_currentStepNum].lv_numUnits);
        BankValueSetFromInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lv_currentStepNum, gv_elapsedSecondsBuildOrderStepEntryKey), gv_currentBuildOrderSteps[lv_currentStepNum].lv_elapsedSeconds);
        if ((gv_debugBank == true)) {
            TextExpressionSetToken("Param/Expression/7AE0547A", "A", gf_GetCurrentBuildOrderStepText(lv_currentStepNum));
            TextExpressionSetToken("Param/Expression/7AE0547A", "B", IntToText(lv_currentStepNum));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/7AE0547A"));
        }
        else {
        }
    }
    BankValueSetFromInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_numBenchmarkBuildOrderStepsEntryKey, gv_currentBuildOrderStepCursor);
    if ((gv_debugBank == true)) {
        TextExpressionSetToken("Param/Expression/D8431969", "A", IntToText(gv_currentBuildOrderStepCursor));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/D8431969"));
    }
    else {
    }
    BankSave(gv_benchmarkerBank);
}

void gf_LoadBenchmarkBuildOrder () {
    int auto8F962F3E_ae;
    int auto8F962F3E_ai;

    // Variable Declarations
    int lv_entryKeyPrefix;
    int lv_currentStepNum;

    // Variable Initialization

    // Implementation
    gv_totalNumBenchmarkBuildOrderSteps = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_numBenchmarkBuildOrderStepsEntryKey);
    if ((gv_debugBank == true)) {
        TextExpressionSetToken("Param/Expression/6EB05484", "A", IntToText(BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_numBenchmarkBuildOrderStepsEntryKey)));
        TextExpressionSetToken("Param/Expression/6EB05484", "B", StringToText(gf_GetCurrentlySelectedMatchupasBankSectionKey()));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/6EB05484"));
        TextExpressionSetToken("Param/Expression/A0919CC0", "A", IntToText(gv_totalNumBenchmarkBuildOrderSteps));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/A0919CC0"));
    }
    else {
    }
    if ((gv_totalNumBenchmarkBuildOrderSteps > 0)) {
        auto8F962F3E_ae = (gv_totalNumBenchmarkBuildOrderSteps-1);
        auto8F962F3E_ai = 1;
        lv_currentStepNum = 0;
        for ( ; ( (auto8F962F3E_ai >= 0 && lv_currentStepNum <= auto8F962F3E_ae) || (auto8F962F3E_ai <= 0 && lv_currentStepNum >= auto8F962F3E_ae) ) ; lv_currentStepNum += auto8F962F3E_ai ) {
            gv_benchmarkBuildOrderSteps[lv_currentStepNum].lv_unitType = (BankValueGetAsString(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lv_currentStepNum, gv_unitTypeBuildOrderStepEntryKey)));
            gv_benchmarkBuildOrderSteps[lv_currentStepNum].lv_supplyCount = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lv_currentStepNum, gv_supplyCountBuildOrderStepEntryKey));
            gv_benchmarkBuildOrderSteps[lv_currentStepNum].lv_numUnits = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lv_currentStepNum, gv_numUnitsBuildOrderStepEntryKey));
            gv_benchmarkBuildOrderSteps[lv_currentStepNum].lv_elapsedSeconds = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lv_currentStepNum, gv_elapsedSecondsBuildOrderStepEntryKey));
        }
        if ((gv_debugBank == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4E470FCF"));
        }
        else {
        }
    }
    else {
        if ((gv_debugBank == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BB4C5D6E"));
        }
        else {
        }
    }
}

void gf_ClearBenchmarkBuildOrder () {
    // Implementation
}

void gf_SaveCurrentStatsasNewBenchmark () {
    // Implementation
    gf_SaveRealAsBuildBenchmark(gf_GetSpendingQuotient(), gv_bestSpendingQuotientEntryKey);
    gf_SaveIntAsSupplyBenchmark(gv_workersCreated, gv_bestTotalWorkersCreatedEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetTotalArmySupply(), gv_bestTotalArmySupplyEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetTotalArmyValueMinerals(), gv_bestTotalArmyValueMineralsEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetTotalArmyValueGas(), gv_bestTotalArmyValueGasEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetNumUpgradesResearched(), gv_bestNumUpgradesResearchedEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetTotalMineralsCollected(), gv_bestTotalMineralsCollectedEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetTotalGasCollected(), gv_bestTotalGasCollectedEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetTimeSupplyBlocked(), gv_bestTimeSupplyBlockedEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetIdleProductionTime(), gv_bestIdleProductionTimeEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetAverageUnspentMinerals(), gv_bestAverageUnspentMineralsEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetAverageUnspentGas(), gv_bestAverageUnspentGasEntryKey);
    gf_SaveRealAsBuildBenchmark(gf_GetAverageBuildAPM(), gv_bestAverageAPMEntryKey);
    BankSave(gv_benchmarkerBank);
}

void gf_ResetBenchmarkBuildStatistics () {
    // Implementation
    gf_SaveRealAsBuildBenchmark(0.0, gv_bestSpendingQuotientEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestTotalWorkersCreatedEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestTotalArmySupplyEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestTotalArmyValueMineralsEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestTotalArmyValueGasEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestNumUpgradesResearchedEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestTotalMineralsCollectedEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestTotalGasCollectedEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestTimeSupplyBlockedEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestIdleProductionTimeEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestAverageUnspentMineralsEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestAverageUnspentGasEntryKey);
    gf_SaveRealAsBuildBenchmark(0.0, gv_bestAverageAPMEntryKey);
}

void gf_SaveIntAsSupplyBenchmark (int lp_value, string lp_entryKey) {
    // Implementation
    BankValueSetFromInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), lp_entryKey, lp_value);
}

void gf_LoadIntFromBankIfKeyisSetElseDefault (int lp_dialogItem, string lp_entryKey, string lp_sectionKey, int lp_defaultValue) {
    // Implementation
    if (((BankKeyExists(gv_benchmarkerBank, lp_sectionKey, lp_entryKey) == true) && (BankValueGetAsInt(gv_benchmarkerBank, lp_sectionKey, lp_entryKey) > -1))) {
        libNtve_gf_SetDialogItemEditorValue(lp_dialogItem, IntToString(BankValueGetAsInt(gv_benchmarkerBank, lp_sectionKey, lp_entryKey)), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemEditorValue(lp_dialogItem, IntToString(lp_defaultValue), PlayerGroupAll());
    }
}

void gf_SaveRealAsBuildBenchmark (fixed lp_value, string lp_entryKey) {
    // Implementation
    BankValueSetFromFixed(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), lp_entryKey, lp_value);
}

void gf_CreateAlertMenuDialog () {
    // Implementation
    DialogCreate(gv_benchmarkDialogWidth, gv_benchmarkDialogHeight, c_anchorCenter, 0, -150, true);
    gv_alertMenuDialog = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), gv_benchmarkDialogTitle);
    DialogSetTransparency(DialogLastCreated(), 0.0);
    gf_CreateMenuSelectButtons(1);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer), StringExternal("Param/Value/563148FB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gf_CreateAlertMenuCheckbox(0);
    gv_mineralAboveThresholdAlertCheckbox = DialogControlLastCreated();
    gf_CreateAlertMenuLabel(StringExternal("Param/Value/99232652"), 0);
    gf_CreateAlertMenuThresholdEditBox(gv__4DigitEditBoxWidth, 0);
    gf_CreateAlertMenuCheckbox(1);
    gv_gasAboveThresholdAlertCheckbox = DialogControlLastCreated();
    gf_CreateAlertMenuLabel(StringExternal("Param/Value/A472485E"), 1);
    gf_CreateAlertMenuThresholdEditBox(gv__4DigitEditBoxWidth, 1);
    gf_CreateAlertMenuCheckbox(2);
    gv_supplyBlockImminentAlertCheckbox = DialogControlLastCreated();
    gf_CreateAlertMenuLabel(StringExternal("Param/Value/31BD0349"), 2);
    gf_CreateAlertMenuThresholdEditBox(gv__2DigitEditBoxWidth, 2);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_alertRowLabelWidths[2][1], gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[2][0]+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_labelAlignmentSpacer+gv_sectionLabelHeight+2*gv_menuItemHeight), StringExternal("Param/Value/22895B11"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_alertMenuDialogItemGrid[2][3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__2DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[2][0]+gv__2DigitEditBoxWidth+gv_alertRowLabelWidths[2][1]), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight+2*gv_menuItemHeight));
    gv_alertMenuDialogItemGrid[2][4] = DialogControlLastCreated();
    gf_CreateAlertMenuCheckbox(3);
    gv_macroEnergyAboveThresholdAlertCheckbox = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/F5D99818", "A", gf_GetRaceMacroUnitName());
    gf_CreateAlertMenuLabel(TextExpressionAssemble("Param/Expression/F5D99818"), 3);
    gf_CreateAlertMenuThresholdEditBox(gv__2DigitEditBoxWidth, 3);
    gf_CreateAlertMenuCheckbox(4);
    gv_upgradeGapAboveThresholdAlertCheckbox = DialogControlLastCreated();
    gf_CreateAlertMenuLabel(StringExternal("Param/Value/CAFE4A70"), 4);
    gf_CreateAlertMenuThresholdEditBox(gv__2DigitEditBoxWidth, 4);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_alertRowLabelWidths[4][1], gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[4][0]+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_labelAlignmentSpacer+gv_sectionLabelHeight+4*gv_menuItemHeight), StringExternal("Param/Value/0F44E262"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_alertMenuDialogItemGrid[4][3] = DialogControlLastCreated();
    gf_CreateAlertMenuCheckbox(5);
    gv_productionIdleAboveThresholdAlertCheckbox = DialogControlLastCreated();
    gf_CreateAlertMenuLabel(StringExternal("Param/Value/683144D7"), 5);
    gf_CreateAlertMenuThresholdEditBox(gv__2DigitEditBoxWidth, 5);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_alertRowLabelWidths[5][1], gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[5][0]+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_labelAlignmentSpacer+gv_sectionLabelHeight+5*gv_menuItemHeight), StringExternal("Param/Value/C235BC69"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_alertMenuDialogItemGrid[5][3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_alertMenuDialog, gv_startButtonWidth, gv_startButtonHeight, c_anchorBottom, 0, gv_menuPadding, StringExternal("Param/Value/CD009FD2"), StringExternal("Param/Value/699F29D6"), "");
    gv_startButton[1] = DialogControlLastCreated();
}

void gf_CreateAlertMenuCheckbox (int lp_rowNumber) {
    // Implementation
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), gv_checkboxWidth, gv_checkboxHeight, c_anchorTopLeft, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight+lp_rowNumber*gv_checkboxHeight), StringExternal("Param/Value/85D3414C"), true);
    gv_alertMenuDialogItemGrid[lp_rowNumber][0] = DialogControlLastCreated();
}

void gf_CreateAlertMenuLabel (text lp_labelText, int lp_rowNum) {
    // Implementation
    TextExpressionSetToken("Param/Expression/539425D0", "A", lp_labelText);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_alertRowLabelWidths[lp_rowNum][0], gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_labelAlignmentSpacer+gv_sectionLabelHeight+lp_rowNum*gv_menuItemHeight), TextExpressionAssemble("Param/Expression/539425D0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_alertMenuDialogItemGrid[lp_rowNum][1] = DialogControlLastCreated();
}

void gf_CreateAlertMenuThresholdEditBox (int lp_editBoxWidth, int lp_rowNum) {
    // Implementation
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lp_editBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[lp_rowNum][0]), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight+lp_rowNum*gv_menuItemHeight));
    gv_alertMenuDialogItemGrid[lp_rowNum][2] = DialogControlLastCreated();
}

void gf_SetAlertCheckboxState (bool lp_markChecked, int lp_checkbox) {
    // Implementation
    if ((lp_markChecked == true)) {
        libNtve_gf_SetDialogItemChecked(lp_checkbox, true, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemChecked(lp_checkbox, false, PlayerGroupAll());
    }
}

void gf_EnableDisableAlertRow (bool lp_checked, int lp_rowNum, int lp_numRowItems) {
    int auto6C54BDE2_ae;
    int auto6C54BDE2_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto6C54BDE2_ae = lp_numRowItems;
    auto6C54BDE2_ai = 1;
    lv_i = 1;
    for ( ; ( (auto6C54BDE2_ai >= 0 && lv_i <= auto6C54BDE2_ae) || (auto6C54BDE2_ai <= 0 && lv_i >= auto6C54BDE2_ae) ) ; lv_i += auto6C54BDE2_ai ) {
        if ((lp_checked == true)) {
            DialogControlSetEnabled(gv_alertMenuDialogItemGrid[lp_rowNum][lv_i], PlayerGroupAll(), true);
        }
        else {
            DialogControlSetEnabled(gv_alertMenuDialogItemGrid[lp_rowNum][lv_i], PlayerGroupAll(), false);
        }
    }
}

void gf_SelectAlertMenu () {
    int auto2BD4AF57_ae;
    int auto2BD4AF57_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto2BD4AF57_ae = 1;
    auto2BD4AF57_ai = 1;
    lv_i = 0;
    for ( ; ( (auto2BD4AF57_ai >= 0 && lv_i <= auto2BD4AF57_ae) || (auto2BD4AF57_ai <= 0 && lv_i >= auto2BD4AF57_ae) ) ; lv_i += auto2BD4AF57_ai ) {
        libNtve_gf_SetDialogItemToggled(gv_benchmarksMenuButton[lv_i], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_alertMenuButton[lv_i], true, PlayerGroupAll());
    }
    DialogSetVisible(gv_benchmarkDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_alertMenuDialog, PlayerGroupAll(), true);
}

void gf_SelectBenchmarkMenu () {
    int auto1FD49190_ae;
    int auto1FD49190_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto1FD49190_ae = 1;
    auto1FD49190_ai = 1;
    lv_i = 0;
    for ( ; ( (auto1FD49190_ai >= 0 && lv_i <= auto1FD49190_ae) || (auto1FD49190_ai <= 0 && lv_i >= auto1FD49190_ae) ) ; lv_i += auto1FD49190_ai ) {
        libNtve_gf_SetDialogItemToggled(gv_alertMenuButton[lv_i], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_benchmarksMenuButton[lv_i], true, PlayerGroupAll());
    }
    DialogSetVisible(gv_alertMenuDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_benchmarkDialog, PlayerGroupAll(), true);
}

void gf_CreateMenuSelectButtons (int lp_menuIndex) {
    // Implementation
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_menuSelectButtonWidth, gv_menuSelectButtonHeight, c_anchorTop, (-(gv_menuSelectButtonWidth/2)), 0, StringExternal("Param/Value/5B6E2BC7"), StringExternal("Param/Value/2773FF33"), "");
    libNtve_gf_SetDialogItemClickOnDown(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemToggled(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_benchmarksMenuButton[lp_menuIndex] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_menuSelectButtonWidth, gv_menuSelectButtonHeight, c_anchorTop, (gv_menuSelectButtonWidth/2), 0, StringExternal("Param/Value/9DD48295"), StringExternal("Param/Value/54E2AB67"), "");
    libNtve_gf_SetDialogItemClickOnDown(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_alertMenuButton[lp_menuIndex] = DialogControlLastCreated();
}

void gf_CreateHelpDialog () {
    // Implementation
    DialogCreate(gv_benchmarkDialogWidth, gv_benchmarkDialogHeight, c_anchorCenter, 0, -150, true);
    gv_helpDialog = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), gv_helpDialogTitle);
    DialogSetTransparency(DialogLastCreated(), 0.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, (gv_menuPadding), (gv_menuPadding+gv_benchmarkDialogTitleSpacer), StringExternal("Param/Value/CBB81B85"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_helpCommandLabelWidth+gv_menuOptionIndent), (gv_menuPadding+gv_benchmarkDialogTitleSpacer), StringExternal("Param/Value/7A79B9B9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_helpCommandLabelWidth+gv_helpHotkeyLabelWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer), StringExternal("Param/Value/99445BE1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gf_CreateHelpInfoRow(StringExternal("Param/Value/0D7071BE"), StringExternal("Param/Value/B36B4059"), StringExternal("Param/Value/EFA43440"), 0);
    gf_CreateHelpInfoRow(StringExternal("Param/Value/5C5B6190"), StringExternal("Param/Value/3E7A53DD"), StringExternal("Param/Value/9CD7E854"), 1);
    gf_CreateHelpInfoRow(StringExternal("Param/Value/D498D14D"), StringExternal("Param/Value/D75B7086"), StringExternal("Param/Value/A963FAF3"), 2);
    gf_CreateHelpInfoRow(StringExternal("Param/Value/6639460A"), StringExternal("Param/Value/5AC1BD33"), StringExternal("Param/Value/945362B1"), 3);
    gf_CreateHelpInfoRow(StringExternal("Param/Value/732FD0CC"), StringExternal("Param/Value/E709BC6E"), StringExternal("Param/Value/7A5AB46F"), 4);
    gf_CreateHelpInfoRow(StringExternal("Param/Value/2EFCFDB5"), StringExternal("Param/Value/1234E292"), StringExternal("Param/Value/62BC3490"), 5);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_startButtonWidth, gv_startButtonHeight, c_anchorBottom, 0, gv_menuPadding, StringExternal("Param/Value/87960E2D"), StringExternal("Param/Value/208CDB48"), "");
    gv_helpOkButton = DialogControlLastCreated();
}

void gf_CreateHelpInfoRow (text lp_commandText, text lp_hotkeyText, text lp_descriptionText, int lp_rowNum) {
    // Variable Declarations
    int lv_rowXOffset;
    int lv_rowYOffset;

    // Variable Initialization

    // Implementation
    lv_rowXOffset = (gv_menuPadding+gv_menuOptionIndent);
    lv_rowYOffset = (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight+lp_rowNum*gv_helpDialogItemHeight);
    TextExpressionSetToken("Param/Expression/2D6CF9BC", "A", lp_commandText);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_helpCommandLabelWidth, gv_helpDialogItemHeight, c_anchorTopLeft, lv_rowXOffset, lv_rowYOffset, TextExpressionAssemble("Param/Expression/2D6CF9BC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    TextExpressionSetToken("Param/Expression/D6AE440F", "A", lp_hotkeyText);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_helpHotkeyLabelWidth, gv_helpDialogItemHeight, c_anchorTopLeft, (lv_rowXOffset+gv_helpCommandLabelWidth), lv_rowYOffset, TextExpressionAssemble("Param/Expression/D6AE440F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    TextExpressionSetToken("Param/Expression/0684E3AA", "A", lp_descriptionText);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_helpDescriptionLabelWidth, gv_helpDialogItemHeight, c_anchorTopLeft, (lv_rowXOffset+gv_helpCommandLabelWidth+gv_helpHotkeyLabelWidth), lv_rowYOffset, TextExpressionAssemble("Param/Expression/0684E3AA"), ColorWithAlpha(0,0,0,0), false, 2.0);
}

void gf_CloseHelpDialogandUnpause () {
    // Implementation
    DialogSetVisible(gv_helpDialog, PlayerGroupAll(), false);
    gf_UnpauseGame();
    Wait(0.1, c_timeGame);
    gv_helpDialogOpen = false;
}

void gf_CreateBenchmarkMenuDialog () {
    // Implementation
    DialogCreate(gv_benchmarkDialogWidth, gv_benchmarkDialogHeight, c_anchorCenter, 0, -150, true);
    gv_benchmarkDialog = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), gv_benchmarkDialogTitle);
    DialogSetTransparency(DialogLastCreated(), 0.0);
    gf_CreateMenuSelectButtons(0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_benchmarkMenuSectionLabelNudge), StringExternal("Param/Value/2D3C7DC9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gf_CreateMatchupSelectionButton(StringExternal("Param/Value/FE359903"), -1);
    gv_matchupSelectionButtons[0] = DialogControlLastCreated();
    gf_CreateMatchupSelectionButton(StringExternal("Param/Value/0892D77F"), 0);
    gv_matchupSelectionButtons[1] = DialogControlLastCreated();
    gf_CreateMatchupSelectionButton(StringExternal("Param/Value/9AC37339"), 1);
    gv_matchupSelectionButtons[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemToggled(gv_matchupSelectionButtons[0], true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_benchmarkMenuSectionLabelNudge+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer), StringExternal("Param/Value/507082F5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    TextExpressionSetToken("Param/Expression/86EE8952", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_benchmarkTimerDurations[0]));
    gf_CreateSupplyValueEditBox(TextExpressionAssemble("Param/Expression/86EE8952"), 1, gv_benchmarkSupplyDefaults[0]);
    gv_benchmarkSupplyEditBoxes[0] = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/0A2699D7", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_benchmarkTimerDurations[1]));
    gf_CreateSupplyValueEditBox(TextExpressionAssemble("Param/Expression/0A2699D7"), 2, gv_benchmarkSupplyDefaults[1]);
    gv_benchmarkSupplyEditBoxes[1] = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/B436D260", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_benchmarkTimerDurations[2]));
    gf_CreateSupplyValueEditBox(TextExpressionAssemble("Param/Expression/B436D260"), 3, gv_benchmarkSupplyDefaults[2]);
    gv_benchmarkSupplyEditBoxes[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_maxTimeLabelWidth, gv_supplyValueLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+4*gv_supplyValueLabelHeight), StringExternal("Param/Value/6B6F2419"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__2DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_maxTimeLabelWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+4*gv_benchmarkEditBoxHeight));
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_benchmarkMaxTimeMinutes), PlayerGroupAll());
    gv_maxTimeMinutesEditBox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_minutesLabelWidth, gv_supplyValueLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_maxTimeLabelWidth+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+4*gv_supplyValueLabelHeight), StringExternal("Param/Value/B80AD986"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__2DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_maxTimeLabelWidth+gv__2DigitEditBoxWidth+gv_minutesLabelWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+4*gv_benchmarkEditBoxHeight));
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_benchmarkMaxTimeSeconds), PlayerGroupAll());
    gv_maxTimeSecondsEditBox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_benchmarkDialog, gv_secondsLabelWidth, gv_supplyValueLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_maxTimeLabelWidth+gv__2DigitEditBoxWidth+gv_minutesLabelWidth+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+4*gv_supplyValueLabelHeight), StringExternal("Param/Value/76739197"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_benchmarkMenuSectionLabelNudge+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+gv_sectionLabelHeight+4*gv_supplyValueLabelHeight), StringExternal("Param/Value/E23A8A3F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_endBuildLabelWidth, gv_supplyValueLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+5*gv_supplyValueLabelHeight+gv_sectionLabelHeight), StringExternal("Param/Value/0F376BB5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_endBuildPulldown = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_endBuildPulldownWidth, gv_menuItemHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_endBuildLabelWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+5*gv_benchmarkEditBoxHeight+gv_sectionLabelHeight));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F1EFDEA1"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/AD584A2F"));
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__2DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_endBuildLabelWidth+gv_endBuildPulldownWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+5*gv_benchmarkEditBoxHeight+gv_sectionLabelHeight));
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_benchmarkEndBuildatMinutes), PlayerGroupAll());
    gv_endBuildMinutesEditBox = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_minutesLabelWidth, gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_endBuildLabelWidth+gv_endBuildPulldownWidth+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+5*gv_supplyValueLabelHeight+gv_sectionLabelHeight), StringExternal("Param/Value/36CC771D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_endBuildMinutesLabel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__2DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_endBuildLabelWidth+gv_endBuildPulldownWidth+gv__2DigitEditBoxWidth+gv_minutesLabelWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+5*gv_benchmarkEditBoxHeight+gv_sectionLabelHeight));
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_benchmarkEndBuildatSeconds), PlayerGroupAll());
    gv_endBuildSecondsEditBox = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_secondsLabelWidth, gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_endBuildLabelWidth+gv_endBuildPulldownWidth+gv__2DigitEditBoxWidth+gv_minutesLabelWidth+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+5*gv_supplyValueLabelHeight+gv_sectionLabelHeight), StringExternal("Param/Value/3513F291"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_endBuildSecondsLabel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCheckBox);
    gv_practiceAgainstSavedBuildOrderCheckbox = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_checkboxWidth, gv_menuItemHeight);
    libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+6*gv_benchmarkEditBoxHeight+gv_sectionLabelHeight));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/7FDBA57B"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_practiceAgainstSavedBuildOrderLabelWidth, gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_checkboxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+6*gv_supplyValueLabelHeight+gv_sectionLabelHeight), StringExternal("Param/Value/C981768C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_practiceAgainstSavedBuildOrderLabel = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCheckBox);
    gv_displayBuildOrderHintsCheckbox = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_checkboxWidth, gv_menuItemHeight);
    libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+7*gv_benchmarkEditBoxHeight+gv_sectionLabelHeight));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/5777D4C2"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_displayBuildOrderHintsLabelWidth, gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_checkboxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+7*gv_supplyValueLabelHeight+gv_sectionLabelHeight), StringExternal("Param/Value/1BB4532B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_displayBuildOrderHintsLabel = DialogControlLastCreated();
    if ((gf_DoesSavedBuildOrderExistForCurrentMatchup() == true)) {
        gf_EnablePracticeAgainstBenchmarkBuildOrderOptions();
    }
    else {
        gf_DisablePracticeAgainstBenchmarkBuildOrderOption();
    }
    libNtve_gf_CreateDialogItemButton(gv_benchmarkDialog, gv_startButtonWidth, gv_startButtonHeight, c_anchorBottom, 0, gv_menuPadding, StringExternal("Param/Value/84760B8B"), StringExternal("Param/Value/49A63E54"), "");
    gv_startButton[0] = DialogControlLastCreated();
}

void gf_CreateMatchupSelectionButton (text lp_buttonText, int lp_offsetPositionVariable) {
    // Implementation
    libNtve_gf_CreateDialogItemButton(gv_benchmarkDialog, gv_matchupButtonWidth, gv_matchupButtonHeight, c_anchorTop, (lp_offsetPositionVariable*(gv_matchupButtonWidth+gv_matchupButtonSpacing)), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight), StringExternal("Param/Value/4B6A2C26"), lp_buttonText, "");
    libNtve_gf_SetDialogItemClickOnDown(DialogControlLastCreated(), true, PlayerGroupAll());
}

void gf_CreateSupplyValueEditBox (text lp_labelText, int lp_rowNumber, int lp_defaultValue) {
    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_benchmarkDialog, gv_supplyValueLabelWidth, gv_supplyValueLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv__3DigitEditBoxWidth+gv_supplyValueSpacing), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+lp_rowNumber*gv_supplyValueLabelHeight), lp_labelText, ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(gv_benchmarkDialog, c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__3DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+lp_rowNumber*gv_benchmarkEditBoxHeight));
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(lp_defaultValue), PlayerGroupAll());
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 200.0, PlayerGroupAll());
}

void gf_OpenMainMenu () {
    // Implementation
    CinematicFade(false, 0.5, c_fadeStyleSquareRoot, Color(0.00, 0.00, 0.00), 0.0, false);
    gf_SelectBenchmarkMenu();
    gf_HideBenchmarkSupplyObjectives();
    gf_ResetBenchmarkBuildOrderObjectives();
    DialogSetVisible(gv_helpDialog, PlayerGroupAll(), false);
    gv_helpDialogOpen = false;
    DialogSetVisible(gv_statsDialog, PlayerGroupAll(), false);
    gv_statsDialogOpen = false;
    DialogSetVisible(gv_postBuildReportDialog, PlayerGroupAll(), false);
    Wait(0.25, c_timeGame);
    gf_LoadMatchupBenchmarks(gv_benchmarkMatchupSectionKeys[gv_currentlySelectedMatchupIndex]);
    gf_LoadAlertConfigurations();
    DialogSetVisible(gv_benchmarkDialog, PlayerGroupAll(), true);
    Wait(0.25, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    TimerRestart(gv_buildTimer);
    gf_ResetBenchmarkTimers();
    gf_PauseGame();
}

void gf_EnablePracticeAgainstBenchmarkBuildOrderOptions () {
    // Implementation
    DialogControlSetEnabled(gv_practiceAgainstSavedBuildOrderCheckbox, PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_practiceAgainstSavedBuildOrderLabel, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemChecked(gv_practiceAgainstSavedBuildOrderCheckbox, true, PlayerGroupAll());
    gf_EvaluateAndDisableEnableBuildHintsOptions();
}

void gf_DisablePracticeAgainstBenchmarkBuildOrderOption () {
    // Implementation
    DialogControlSetEnabled(gv_practiceAgainstSavedBuildOrderCheckbox, PlayerGroupAll(), false);
    DialogControlSetEnabled(gv_practiceAgainstSavedBuildOrderLabel, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemChecked(gv_practiceAgainstSavedBuildOrderCheckbox, false, PlayerGroupAll());
    gf_EvaluateAndDisableEnableBuildHintsOptions();
}

void gf_EvaluateAndDisableEnableBuildHintsOptions () {
    // Implementation
    if (((gf_DoesSavedBuildOrderExistForCurrentMatchup() == true) && (libNtve_gf_DialogItemIsChecked(gv_practiceAgainstSavedBuildOrderCheckbox, 1) == true))) {
        DialogControlSetEnabled(gv_displayBuildOrderHintsCheckbox, PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_displayBuildOrderHintsLabel, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemChecked(gv_displayBuildOrderHintsCheckbox, true, PlayerGroupAll());
    }
    else {
        DialogControlSetEnabled(gv_displayBuildOrderHintsCheckbox, PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_displayBuildOrderHintsLabel, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemChecked(gv_displayBuildOrderHintsCheckbox, false, PlayerGroupAll());
    }
}

void gf_CreatePostBuildReportDialog () {
    // Variable Declarations
    int lv_rowNum;
    int lv_labelHeightOffset;

    // Variable Initialization
    lv_labelHeightOffset = (gv_menuPadding+gv_benchmarkDialogTitleSpacer);

    // Implementation
    DialogCreate(gv_postBuildReportDialogWidth, gv_benchmarkDialogHeight, c_anchorCenter, 0, -150, true);
    gv_postBuildReportDialog = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), gv_postBuildReportDialogTitle);
    DialogSetTransparency(DialogLastCreated(), 0.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportMatchupLabelWidth, gv_postBuildReportMatchupLabelHeight, c_anchorTopLeft, gv_postBuildReportMatchupLabelXOffset, gv_postBuildReportMatchupLabelYOffset, StringExternal("Param/Value/CAB58423"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportMatchupLabel = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/14A9E66D", "A", StringExternal("Param/Value/F716237B"));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatLabelWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, gv_menuPadding, lv_labelHeightOffset, TextExpressionAssemble("Param/Expression/14A9E66D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatValueWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth), lv_labelHeightOffset, StringExternal("Param/Value/F5E658E8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatBestWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth+gv_postBuildReportStatValueWidth), lv_labelHeightOffset, StringExternal("Param/Value/F85B1717"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatPercentDifferenceWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth+gv_postBuildReportStatValueWidth+gv_postBuildReportStatBestWidth), lv_labelHeightOffset, StringExternal("Param/Value/E400253A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportBuildStepsListBoxWidth, gv_postBuildReportDialogItemHeight, c_anchorTopRight, (gv_menuPadding), lv_labelHeightOffset, StringExternal("Param/Value/C9C07C6F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gf_CreatePostBuildMacroStatRow(StringExternal("Param/Value/6B84EE69"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildMacroStatRow(StringExternal("Param/Value/0E4EEB09"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildMacroStatRow(StringExternal("Param/Value/20678D32"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildMacroStatRow(StringExternal("Param/Value/3C294871"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildMacroStatRow(StringExternal("Param/Value/73C24276"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildMacroStatRow(StringExternal("Param/Value/63136B44"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildMacroStatRow(StringExternal("Param/Value/EC88E789"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildMacroStatRow(StringExternal("Param/Value/5AB70D09"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildMacroStatRow(StringExternal("Param/Value/F41844C5"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildMacroStatRow(StringExternal("Param/Value/E2A18B66"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildMacroStatRow(StringExternal("Param/Value/36C10325"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildMacroStatRow(StringExternal("Param/Value/60211347"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildMacroStatRow(StringExternal("Param/Value/C219FD1E"), lv_rowNum);
    lv_rowNum += 1;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_postBuildReportBuildStepsListBoxWidth, gv_postBuildReportBuildStepsListBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight));
    gv_postBuildReportBuildOrderListBox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_postBuildReportBuildButtonWidth, gv_postBuildReportBuildButtonHeight, c_anchorTopRight, (gv_menuPadding+gv_postBuildReportBuildButtonWidth), gv_menuPadding, StringExternal("Param/Value/6781271F"), StringExternal("Param/Value/81D36081"), "");
    gv_postBuildReportSaveBuildButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_postBuildReportBuildButtonWidth, gv_postBuildReportBuildButtonHeight, c_anchorTopRight, (gv_menuPadding), gv_menuPadding, StringExternal("Param/Value/F104DC19"), StringExternal("Param/Value/755A8EDF"), "");
    gv_postBuildReportResetBuildButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_startButtonWidth, gv_startButtonHeight, c_anchorBottom, 0, gv_menuPadding, StringExternal("Param/Value/2C18426B"), StringExternal("Param/Value/12E7CB88"), "");
    gv_backToMenuButton = DialogControlLastCreated();
}

void gf_CreatePostBuildDialogSectionLabel () {
}

void gf_CreatePostBuildMacroStatRow (text lp_labelText, int lp_rowOffset) {
    // Variable Declarations
    int lv_yOffset;

    // Variable Initialization
    lv_yOffset = (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight+lp_rowOffset*gv_postBuildReportDialogItemHeight);

    // Implementation
    TextExpressionSetToken("Param/Expression/90E834B6", "A", lp_labelText);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatLabelWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, gv_menuPadding, lv_yOffset, TextExpressionAssemble("Param/Expression/90E834B6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportDialogItems[lp_rowOffset][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatValueWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth), lv_yOffset, StringExternal("Param/Value/DE7D7FEB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportDialogItems[lp_rowOffset][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatBestWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth+gv_postBuildReportStatValueWidth), lv_yOffset, StringExternal("Param/Value/B3580BC2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportDialogItems[lp_rowOffset][2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatPercentDifferenceWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth+gv_postBuildReportStatValueWidth+gv_postBuildReportStatBestWidth), lv_yOffset, StringExternal("Param/Value/A474714C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportDialogItems[lp_rowOffset][3] = DialogControlLastCreated();
}

void gf_UpdatePostBuildReportDialogValues () {
    // Implementation
    libNtve_gf_SetDialogItemTextWriteout(gv_postBuildReportMatchupLabel, true, PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteoutDuration(gv_postBuildReportMatchupLabel, 1.0, PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/122973C8", "A", gf_GetCurrentlySelectedMatchupasText());
    libNtve_gf_SetDialogItemText(gv_postBuildReportMatchupLabel, TextExpressionAssemble("Param/Expression/122973C8"), PlayerGroupAll());
    gf_UpdatePostBuildSupplyRowValueReal(gf_GetSpendingQuotient(), gv_bestSpendingQuotientEntryKey, 0, true);
    gf_UpdatePostBuildSupplyRowValueInt(gv_workersCreated, gv_bestTotalWorkersCreatedEntryKey, 1, true);
    gf_UpdatePostBuildSupplyRowValueInt(gf_GetTotalArmySupply(), gv_bestTotalArmySupplyEntryKey, 2, true);
    gf_UpdatePostBuildSupplyRowValueInt(gf_GetTotalArmyValueMinerals(), gv_bestTotalArmyValueMineralsEntryKey, 3, true);
    gf_UpdatePostBuildSupplyRowValueInt(gf_GetTotalArmyValueGas(), gv_bestTotalArmyValueGasEntryKey, 4, true);
    gf_UpdatePostBuildSupplyRowValueInt(gf_GetNumUpgradesResearched(), gv_bestNumUpgradesResearchedEntryKey, 5, true);
    gf_UpdatePostBuildSupplyRowValueInt(gf_GetTotalMineralsCollected(), gv_bestTotalMineralsCollectedEntryKey, 6, true);
    gf_UpdatePostBuildSupplyRowValueInt(gf_GetTotalGasCollected(), gv_bestTotalGasCollectedEntryKey, 7, true);
    gf_UpdatePostBuildSupplyRowValueInt(gf_GetTimeSupplyBlocked(), gv_bestTimeSupplyBlockedEntryKey, 8, false);
    gf_UpdatePostBuildSupplyRowValueInt(gf_GetIdleProductionTime(), gv_bestIdleProductionTimeEntryKey, 9, false);
    gf_UpdatePostBuildSupplyRowValueInt(gf_GetAverageUnspentMinerals(), gv_bestAverageUnspentMineralsEntryKey, 10, false);
    gf_UpdatePostBuildSupplyRowValueInt(gf_GetAverageUnspentGas(), gv_bestAverageUnspentGasEntryKey, 11, false);
    gf_UpdatePostBuildSupplyRowValueReal(gf_GetAverageBuildAPM(), gv_bestAverageAPMEntryKey, 12, true);
    gf_ResetBuildOrderListBox();
    gf_UpdateBuildStepsListBox();
    BankSave(gv_benchmarkerBank);
}

void gf_UpdatePostBuildSupplyRowValueInt (int lp_value, string lp_benchmarkEntryKey, int lp_rowNumber, bool lp_higherIsBetter) {
    // Variable Declarations
    int lv_benchmarkValue;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/B465A6FA", "A", IntToText(lp_value));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[lp_rowNumber][1], TextExpressionAssemble("Param/Expression/B465A6FA"), PlayerGroupAll());
    lv_benchmarkValue = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), lp_benchmarkEntryKey);
    TextExpressionSetToken("Param/Expression/F6BAF499", "A", IntToText(lv_benchmarkValue));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[lp_rowNumber][2], TextExpressionAssemble("Param/Expression/F6BAF499"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[lp_rowNumber][3], gf_CalculateIntPercentDifferenceAsText(lp_value, lv_benchmarkValue, lp_higherIsBetter), PlayerGroupAll());
}

void gf_UpdatePostBuildSupplyRowValueReal (fixed lp_value, string lp_benchmarkEntryKey, int lp_rowNumber, bool lp_higherIsBetter) {
    // Variable Declarations
    fixed lv_benchmarkValue;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/58FC52E5", "A", FixedToText(lp_value, 2));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[lp_rowNumber][1], TextExpressionAssemble("Param/Expression/58FC52E5"), PlayerGroupAll());
    lv_benchmarkValue = BankValueGetAsFixed(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), lp_benchmarkEntryKey);
    TextExpressionSetToken("Param/Expression/11DCA616", "A", FixedToText(lv_benchmarkValue, 2));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[lp_rowNumber][2], TextExpressionAssemble("Param/Expression/11DCA616"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[lp_rowNumber][3], gf_CalculateRealPercentDifferenceAsText(lp_value, lv_benchmarkValue, lp_higherIsBetter), PlayerGroupAll());
}

void gf_ResetBuildOrderListBox () {
    int autoA02A982D_ae;
    int autoA02A982D_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoA02A982D_ae = (gv_currentBuildOrderStepCursor+1);
    autoA02A982D_ai = 1;
    lv_i = 1;
    for ( ; ( (autoA02A982D_ai >= 0 && lv_i <= autoA02A982D_ae) || (autoA02A982D_ai <= 0 && lv_i >= autoA02A982D_ae) ) ; lv_i += autoA02A982D_ai ) {
        DialogControlRemoveItem(gv_postBuildReportBuildOrderListBox, PlayerGroupAll(), lv_i);
    }
}

void gf_UpdateBuildStepsListBox () {
    int autoF990DA09_ae;
    int autoF990DA09_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    gf_ResetBuildOrderListBox();
    autoF990DA09_ae = (gv_currentBuildOrderStepCursor-1);
    autoF990DA09_ai = 1;
    lv_i = 0;
    for ( ; ( (autoF990DA09_ai >= 0 && lv_i <= autoF990DA09_ae) || (autoF990DA09_ai <= 0 && lv_i >= autoF990DA09_ae) ) ; lv_i += autoF990DA09_ai ) {
        DialogControlAddItem(gv_postBuildReportBuildOrderListBox, PlayerGroupAll(), gf_GetCurrentBuildOrderStepText(lv_i));
    }
}

void gf_CreateStatsDialog () {
    // Implementation
    DialogCreate(gv_statsDialogWidth, gv_statsDialogHeight, c_anchorCenter, 0, -150, true);
    gv_statsDialog = DialogLastCreated();
    DialogSetTransparency(DialogLastCreated(), 0.0);
    DialogSetTitle(gv_statsDialog, gv_statsDialogTitle);
    gf_CreateStatsDialogRow(StringExternal("Param/Value/2C91DE39"), 0);
    gf_CreateStatsDialogRow(StringExternal("Param/Value/9765AA5A"), 1);
    gf_CreateStatsDialogRow(StringExternal("Param/Value/B4C85F93"), 2);
    gf_CreateStatsDialogRow(StringExternal("Param/Value/1D91E2F2"), 3);
    gf_CreateStatsDialogRow(StringExternal("Param/Value/D81ABE05"), 4);
    gf_CreateStatsDialogRow(StringExternal("Param/Value/8274E9D4"), 5);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_startButtonWidth, gv_startButtonHeight, c_anchorBottom, 0, gv_menuPadding, StringExternal("Param/Value/5BF28F50"), StringExternal("Param/Value/35192382"), "");
    gv_statsOkButton = DialogControlLastCreated();
}

void gf_RefreshStatsDialog () {
    // Implementation
    gf_UpdateStatValueDialogItemText(0, IntToText(gv_workersCreated));
    gf_UpdateStatValueDialogItemText(1, IntToText(gf_GetIdleProductionTime()));
    gf_UpdateStatValueDialogItemText(2, IntToText(gf_GetTimeSupplyBlocked()));
    gf_UpdateStatValueDialogItemText(3, IntToText(gf_GetAverageUnspentMinerals()));
    gf_UpdateStatValueDialogItemText(4, IntToText(gf_GetAverageUnspentGas()));
    gf_UpdateStatValueDialogItemText(5, IntToText(gf_GetAverageBuildAPM()));
}

void gf_CloseStatsDialogandUnpause () {
    // Implementation
    DialogSetVisible(gv_statsDialog, PlayerGroupAll(), false);
    gf_UnpauseGame();
    Wait(0.1, c_timeGame);
    gv_statsDialogOpen = false;
}

void gf_UpdateStatValueDialogItemText (int lp_rowOffset, text lp_statValue) {
    // Implementation
    TextExpressionSetToken("Param/Expression/AFE69EE0", "A", lp_statValue);
    libNtve_gf_SetDialogItemText(gv_statValueDialogItems[lp_rowOffset], TextExpressionAssemble("Param/Expression/AFE69EE0"), PlayerGroupAll());
}

void gf_CreateStatsDialogRow (text lp_labelText, int lp_rowOffset) {
    // Variable Declarations
    int lv_offset;

    // Variable Initialization
    lv_offset = -60;

    // Implementation
    TextExpressionSetToken("Param/Expression/0D0D4C72", "A", lp_labelText);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_statLabelWidth, gv_menuItemHeight, c_anchorTop, lv_offset, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+lp_rowOffset*gv_menuItemHeight), TextExpressionAssemble("Param/Expression/0D0D4C72"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_statValueWidth, gv_menuItemHeight, c_anchorTop, (gv_statLabelWidth+lv_offset), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+lp_rowOffset*gv_menuItemHeight), StringExternal("Param/Value/FA90A0B2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_statValueDialogItems[lp_rowOffset] = DialogControlLastCreated();
}

void gf_InitializeBankDefaults () {
    // Implementation
    gv_benchmarkSupplyEntryKeys[0] = "benchmark1";
    gv_benchmarkSupplyEntryKeys[1] = "benchmark2";
    gv_benchmarkSupplyEntryKeys[2] = "benchmark3";
}

void gf_InitializeDialogDefaults () {
    string auto6EDFB34C_val;

    // Implementation
    gv_alertRowLabelWidths[0][0] = 335;
    gv_alertRowLabelWidths[1][0] = 292;
    gv_alertRowLabelWidths[2][0] = 317;
    gv_alertRowLabelWidths[2][1] = 252;
    auto6EDFB34C_val = PlayerRace(1);
    if (auto6EDFB34C_val == "Prot") {
        gv_alertRowLabelWidths[3][0] = (gv_alertMenuSupplyBlockBaseWidth+gv_alertMenuNexusNameWidth);
    }
    else if (auto6EDFB34C_val == "Terr") {
        gv_alertRowLabelWidths[3][0] = (gv_alertMenuSupplyBlockBaseWidth+gv_alertMenuOrbitalNameWidth);
    }
    else if (auto6EDFB34C_val == "Zerg") {
        gv_alertRowLabelWidths[3][0] = (gv_alertMenuSupplyBlockBaseWidth+gv_alertMenuQueenNameWidth);
    }
    else {
    }
    gv_alertRowLabelWidths[4][0] = 400;
    gv_alertRowLabelWidths[4][1] = gv_secondsLabelWidth;
    gv_alertRowLabelWidths[5][0] = 483;
    gv_alertRowLabelWidths[5][1] = gv_secondsLabelWidth;
    gv_alertRowLabelWidths[6][0] = 357;
    gv_alertRowLabelWidths[7][0] = 335;
}

void gf_InitializeGameDefaults () {
    // Implementation
    gv_overlordMorphDuration = 25;
    gv_warningPingCooldownSeconds = 1.5;
    gv_alertCooldownSeconds = 15;
    gv_alertMineralsThreshold = 800;
    gv_alertGasThreshold = 400;
    gv_alertSupplyBlockStart = 50;
    gv_alertUpgradeGapThreshold = 20;
    gv_alertProductionIdleThreshold = 20;
    gv_alertSupplyBlockWithinCapThreshold = 6;
    gv_alertZergDefaultMacroEnergyThreshold = 40;
    gv_alertTerranDefaultMacroEnergyThreshold = 65;
    gv_alertProtossDefaultMacroEnergyThreshold = 60;
    gv_benchmarkTimerDurations[0] = 360;
    gv_benchmarkTimerDurations[1] = 480;
    gv_benchmarkTimerDurations[2] = 600;
    gv_benchmarkSupplyDefaults[0] = 30;
    gv_benchmarkSupplyDefaults[1] = 55;
    gv_benchmarkSupplyDefaults[2] = 80;
}

void gf_InitializeMapResourcesUnitGroup () {
    unitgroup auto59129081_g;
    int auto59129081_u;
    unitgroup autoAECA9D28_g;
    int autoAECA9D28_u;

    // Variable Declarations
    unit lv_currentResource;

    // Variable Initialization

    // Implementation
    auto59129081_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, 0, 0), 0);
    auto59129081_u = 1;
    for ( ; auto59129081_u <= UnitGroupCount(auto59129081_g, c_unitCountAll) ; auto59129081_u += BoolToInt(lv_currentResource == UnitGroupUnit(auto59129081_g, auto59129081_u)) ) {
        lv_currentResource = UnitGroupUnit(auto59129081_g, auto59129081_u);
        UnitGroupAdd(gv_resources, lv_currentResource);
        if ((gv_debugMapMechanics == true)) {
            TextExpressionSetToken("Param/Expression/2322ADF7", "A", UnitTypeGetName(UnitGetType(lv_currentResource)));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/2322ADF7"));
        }
        else {
        }
    }
    autoAECA9D28_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRawResource), 0, 0, 0), 0);
    autoAECA9D28_u = 1;
    for ( ; autoAECA9D28_u <= UnitGroupCount(autoAECA9D28_g, c_unitCountAll) ; autoAECA9D28_u += BoolToInt(lv_currentResource == UnitGroupUnit(autoAECA9D28_g, autoAECA9D28_u)) ) {
        lv_currentResource = UnitGroupUnit(autoAECA9D28_g, autoAECA9D28_u);
        UnitGroupAdd(gv_resources, lv_currentResource);
        if ((gv_debugMapMechanics == true)) {
            TextExpressionSetToken("Param/Expression/1C0F331A", "A", UnitTypeGetName(UnitGetType(lv_currentResource)));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/1C0F331A"));
        }
        else {
        }
    }
}

void gf_InitializeBank () {
    // Implementation
    BankLoad(gv_benchmarkerBankName, 1);
    BankSectionCreate(BankLastCreated(), gv_vZergMatchupSectionKey);
    BankSectionCreate(BankLastCreated(), gv_vTerranMatchupSectionKey);
    BankSectionCreate(BankLastCreated(), gv_vProtossMatchupSectionKey);
    gv_benchmarkerBank = BankLastCreated();
}

void gf_ResetGameState () {
    // Variable Declarations
    unitgroup lv_player1Units;

    // Variable Initialization
    lv_player1Units = UnitGroupEmpty();

    // Implementation
    gf_ResetMapResources();
    lv_player1Units = gf_GetPlayer1Units();
    if ((UnitGroupCount(lv_player1Units, c_unitCountAlive) >= 0)) {
        UnitGroupLoopBegin(lv_player1Units);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        MeleeInitUnits();
    }
    else {
    }
    MeleeInitResources();
    gf_ResetStatistics();
    gf_ResetCurrentBuildOrderStepsVariables();
    gf_ResetBenchmarkSupplyObjectives();
    gf_ResetBenchmarkBuildOrderStepsVariables();
    gf_ResetBenchmarkBuildOrderObjectives();
    gf_ResetAlertTimers();
    gf_ResetBenchmarkTimers();
    TimerRestart(gv_buildTimer);
    gf_ResetCamera();
}

void gf_ResetMapResources () {
    unitgroup auto239B13AC_g;
    int auto239B13AC_u;

    // Variable Declarations
    string lv_currentResourceType;
    point lv_currentPosition;
    unit lv_currentResource;
    int lv_resourcesReplaced;

    // Variable Initialization

    // Implementation
    auto239B13AC_g = gv_resources;
    auto239B13AC_u = 1;
    for ( ; auto239B13AC_u <= UnitGroupCount(auto239B13AC_g, c_unitCountAll) ; auto239B13AC_u += BoolToInt(lv_currentResource == UnitGroupUnit(auto239B13AC_g, auto239B13AC_u)) ) {
        lv_currentResource = UnitGroupUnit(auto239B13AC_g, auto239B13AC_u);
        lv_currentResourceType = UnitGetType(lv_currentResource);
        if (((((lv_currentResourceType == "VespeneGeyser") || (lv_currentResourceType == "RichVespeneGeyser") || (lv_currentResourceType == "ProtossVespeneGeyser") || (lv_currentResourceType == "SpacePlatformGeyser")) && (libNtve_gf_UnitGetPropertyResources(lv_currentResource, c_unitPropCurrent) < 2500)) || (((lv_currentResourceType == "MineralField") || (lv_currentResourceType == "RichMineralField")) && (libNtve_gf_UnitGetPropertyResources(lv_currentResource, c_unitPropCurrent) < 1500)))) {
            lv_currentPosition = UnitGetPosition(lv_currentResource);
            UnitRemove(lv_currentResource);
            UnitGroupRemove(gv_resources, lv_currentResource);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_currentResourceType, 0, 0, lv_currentPosition);
            UnitGroupAdd(gv_resources, UnitLastCreated());
            lv_resourcesReplaced += 1;
        }
        else {
        }
    }
    if ((gv_debugMapMechanics == true)) {
        TextExpressionSetToken("Param/Expression/F4AFF87D", "A", IntToText(lv_resourcesReplaced));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/F4AFF87D"));
    }
    else {
    }
}

void gf_ResetTechTree () {
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergGroundArmorsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergGroundArmorsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergGroundArmorsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerArmorsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerArmorsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerArmorsLevel3", 0);
}

void gf_ResetCamera () {
    // Implementation
    CameraRestore(1, 0.75, -1, 10.0);
}

void gf_PauseGame () {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    gv_paused = true;
    TimerPause(gv_buildTimer, true);
    gf_PauseBenchmarkTimers();
    gf_PauseAlertTimers();
    UnitPauseAll(true);
}

void gf_UnpauseGame () {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    gv_paused = false;
    UnitPauseAll(false);
    gf_UnpauseBenchmarkTimers();
    gf_UnpauseAlertTimers();
    TimerPause(gv_buildTimer, false);
}

void gf_StartBenchmarkTimers () {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    TimerStart(gv_benchmark1Timer, gv_benchmarkTimerDurations[0], false, c_timeGame);
    TimerStart(gv_benchmark2Timer, gv_benchmarkTimerDurations[1], false, c_timeGame);
    TimerStart(gv_benchmark3Timer, gv_benchmarkTimerDurations[2], false, c_timeGame);
    TimerStart(gv_benchmarkMaxTimeTimer, gv_benchmarkMaxTimeTotalSeconds, false, c_timeGame);
}

void gf_UnpauseBenchmarkTimers () {
    // Implementation
    TimerPause(gv_benchmark1Timer, false);
    TimerPause(gv_benchmark2Timer, false);
    TimerPause(gv_benchmark3Timer, false);
    TimerPause(gv_benchmarkMaxTimeTimer, false);
}

void gf_PauseBenchmarkTimers () {
    // Implementation
    TimerPause(gv_benchmark1Timer, true);
    TimerPause(gv_benchmark2Timer, true);
    TimerPause(gv_benchmark3Timer, true);
    TimerPause(gv_benchmarkMaxTimeTimer, true);
}

void gf_ResetBenchmarkTimers () {
    // Implementation
    TimerRestart(gv_benchmark1Timer);
    TimerRestart(gv_benchmark2Timer);
    TimerRestart(gv_benchmark3Timer);
    TimerRestart(gv_benchmarkMaxTimeTimer);
}

void gf_CreateHiddenBenchmarkSupplyObjectives () {
    int auto672AD999_ae;
    int auto672AD999_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto672AD999_ae = 2;
    auto672AD999_ai = 1;
    lv_i = 0;
    for ( ; ( (auto672AD999_ai >= 0 && lv_i <= auto672AD999_ae) || (auto672AD999_ai <= 0 && lv_i >= auto672AD999_ae) ) ; lv_i += auto672AD999_ai ) {
        ObjectiveCreate(StringExternal("Param/Value/7196AAC4"), StringExternal("Param/Value/D6D94F6E"), c_objectiveStateHidden, true);
        gv_benchmarkSupplyObjectives[lv_i] = ObjectiveLastCreated();
    }
    ObjectiveCreate(StringExternal("Param/Value/A11C3A0B"), StringExternal("Param/Value/BC9BE74F"), c_objectiveStateHidden, true);
    gv_benchmarkMaxTimeObjective = ObjectiveLastCreated();
}

void gf_HideBenchmarkSupplyObjectives () {
    int autoA3763877_ae;
    int autoA3763877_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoA3763877_ae = 2;
    autoA3763877_ai = 1;
    lv_i = 0;
    for ( ; ( (autoA3763877_ai >= 0 && lv_i <= autoA3763877_ae) || (autoA3763877_ai <= 0 && lv_i >= autoA3763877_ae) ) ; lv_i += autoA3763877_ai ) {
        ObjectiveShow(gv_benchmarkSupplyObjectives[lv_i], PlayerGroupAll(), false);
    }
    ObjectiveShow(gv_benchmarkMaxTimeObjective, PlayerGroupAll(), false);
}

void gf_ShowBenchmarkSupplyObjectives () {
    int auto0FC1EE86_ae;
    int auto0FC1EE86_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto0FC1EE86_ae = 2;
    auto0FC1EE86_ai = 1;
    lv_i = 0;
    for ( ; ( (auto0FC1EE86_ai >= 0 && lv_i <= auto0FC1EE86_ae) || (auto0FC1EE86_ai <= 0 && lv_i >= auto0FC1EE86_ae) ) ; lv_i += auto0FC1EE86_ai ) {
        ObjectiveShow(gv_benchmarkSupplyObjectives[lv_i], PlayerGroupAll(), true);
    }
    ObjectiveShow(gv_benchmarkMaxTimeObjective, PlayerGroupAll(), true);
}

void gf_ResetBenchmarkSupplyObjectives () {
    int auto197B812D_ae;
    int auto197B812D_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto197B812D_ae = 2;
    auto197B812D_ai = 1;
    lv_i = 0;
    for ( ; ( (auto197B812D_ai >= 0 && lv_i <= auto197B812D_ae) || (auto197B812D_ai <= 0 && lv_i >= auto197B812D_ae) ) ; lv_i += auto197B812D_ai ) {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[lv_i], c_objectiveStateActive);
        TextExpressionSetToken("Param/Expression/0ED07185", "C", TextWithColor(IntToText(gv_benchmarkSupplyValues[lv_i]), gv_objectiveSupplyColor));
        TextExpressionSetToken("Param/Expression/0ED07185", "B", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_benchmarkTimerDurations[lv_i]));
        ObjectiveSetName(gv_benchmarkSupplyObjectives[lv_i], TextExpressionAssemble("Param/Expression/0ED07185"));
        Wait(0.25, c_timeGame);
    }
    ObjectiveSetState(gv_benchmarkMaxTimeObjective, c_objectiveStateActive);
    TextExpressionSetToken("Param/Expression/B6B33C58", "B", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_benchmarkMaxTimeTotalSeconds), gv_objectiveSupplyColor));
    ObjectiveSetName(gv_benchmarkMaxTimeObjective, TextExpressionAssemble("Param/Expression/B6B33C58"));
}

void gf_CreateBenchmarkBuildOrderObjectives () {
    int auto98326FC4_ae;
    int auto98326FC4_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((gv_debugBuildOrderTracking == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8B1A10FA"));
    }
    else {
    }
    auto98326FC4_ae = 9;
    auto98326FC4_ai = 1;
    lv_i = 0;
    for ( ; ( (auto98326FC4_ai >= 0 && lv_i <= auto98326FC4_ae) || (auto98326FC4_ai <= 0 && lv_i >= auto98326FC4_ae) ) ; lv_i += auto98326FC4_ai ) {
        if ((lv_i < gv_totalNumBenchmarkBuildOrderSteps)) {
            gf_CreateIndividualBenchmarkBuildOrderStepObjective(lv_i);
            gv_benchmarkBuildOrderStepObjectives[lv_i] = ObjectiveLastCreated();
        }
        else {
        }
    }
}

void gf_CreateIndividualBenchmarkBuildOrderStepObjective (int lp_buildStep) {
    // Variable Declarations
    text lv_stepObjectiveText;

    // Variable Initialization

    // Implementation
    lv_stepObjectiveText = gf_GetBenchmarkBuildOrderStepText(lp_buildStep);
    ObjectiveCreate(lv_stepObjectiveText, StringExternal("Param/Value/63BE4A54"), c_objectiveStateActive, false);
}

void gf_EvaluateBenchmarkBuildOrderStepObjective (string lp_unitType) {
    // Implementation
    if ((gv_benchmarkBuildOrderStepCursor > 0) && ((ObjectiveGetState(gv_benchmarkBuildOrderStepObjectives[(gv_benchmarkBuildOrderStepCursor-1)]) == c_objectiveStateFailed) && (gf_IsUnitTypeCorrectForBenchmarkBuildOrderStep(lp_unitType, (gv_benchmarkBuildOrderStepCursor-1)) == true))) {
        if ((gv_debugBuildOrderTracking == true)) {
            TextExpressionSetToken("Param/Expression/FB79BAF4", "B", UnitTypeGetName(lp_unitType));
            TextExpressionSetToken("Param/Expression/FB79BAF4", "A", IntToText((gv_benchmarkBuildOrderStepCursor-1)));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/FB79BAF4"));
        }
        else {
        }
        gf_CorrectFailedBenchmarkBuildOrderStepObjective();
    }
    else {
        if ((gf_IsUnitTypeCorrectForBenchmarkBuildOrderStep(lp_unitType, gv_benchmarkBuildOrderStepCursor) == true)) {
            if ((gv_debugBuildOrderTracking == true)) {
                TextExpressionSetToken("Param/Expression/6697D031", "A", IntToText(gv_benchmarkBuildOrderStepCursor));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/6697D031"));
            }
            else {
            }
            if (((gf_IsNumUnitsCorrectForBenchmarkBuildOrderStep(gv_currentBuildOrderSteps[(gv_currentBuildOrderStepCursor)].lv_numUnits, gv_benchmarkBuildOrderStepCursor) == true) && (ObjectiveGetState(gv_benchmarkBuildOrderStepObjectives[(gv_benchmarkBuildOrderStepCursor)]) == c_objectiveStateActive))) {
                if ((gv_debugBuildOrderTracking == true)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/36B26B35"));
                }
                else {
                }
                gf_CompleteBenchmarkBuildOrderStepObjective(gv_benchmarkBuildOrderStepCursor);
            }
            else {
                if ((gv_debugBuildOrderTracking == true)) {
                    TextExpressionSetToken("Param/Expression/0A0B2E84", "A", IntToText(gv_currentBuildOrderSteps[(gv_currentBuildOrderStepCursor)].lv_numUnits));
                    TextExpressionSetToken("Param/Expression/0A0B2E84", "B", IntToText(gv_benchmarkBuildOrderSteps[gv_benchmarkBuildOrderStepCursor].lv_numUnits));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/0A0B2E84"));
                }
                else {
                }
            }
        }
        else {
            if ((gv_debugBuildOrderTracking == true)) {
                TextExpressionSetToken("Param/Expression/53A44017", "A", IntToText((gv_benchmarkBuildOrderStepCursor-1)));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/53A44017"));
            }
            else {
            }
            gf_FailBenchmarkBuildOrderStepObjective(gv_benchmarkBuildOrderStepCursor);
        }
    }
}

void gf_CompleteBenchmarkBuildOrderStepObjective (int lp_benchmarkBuildOrderIndex) {
    // Variable Declarations
    text lv_objectiveText;

    // Variable Initialization

    // Implementation
    if ((gv_debugBuildOrderTracking == true)) {
        TextExpressionSetToken("Param/Expression/83361AD6", "A", IntToText(lp_benchmarkBuildOrderIndex));
        TextExpressionSetToken("Param/Expression/83361AD6", "B", IntToText(gf_GetBenchmarkBuildOrderObjectiveIndexforBenchmarkBuildOrderIndex(lp_benchmarkBuildOrderIndex)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/83361AD6"));
    }
    else {
    }
    lv_objectiveText = gf_GetFormattedCompleteBenchmarkBuildOrderStepText(lp_benchmarkBuildOrderIndex);
    ObjectiveSetState(gv_benchmarkBuildOrderStepObjectives[gf_GetBenchmarkBuildOrderObjectiveIndexforBenchmarkBuildOrderIndex(lp_benchmarkBuildOrderIndex)], c_objectiveStateCompleted);
    TextExpressionSetToken("Param/Expression/97DCFF5F", "A", gf_GetFormattedCompleteBenchmarkBuildOrderStepText(lp_benchmarkBuildOrderIndex));
    ObjectiveSetName(gv_benchmarkBuildOrderStepObjectives[gf_GetBenchmarkBuildOrderObjectiveIndexforBenchmarkBuildOrderIndex(lp_benchmarkBuildOrderIndex)], TextExpressionAssemble("Param/Expression/97DCFF5F"));
    gv_benchmarkBuildOrderStepCursor += 1;
}

void gf_FailBenchmarkBuildOrderStepObjective (int lp_benchmarkBuildOrderIndex) {
    // Implementation
    if ((gv_debugBuildOrderTracking == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C8622CB1"));
    }
    else {
    }
    ObjectiveSetState(gv_benchmarkBuildOrderStepObjectives[gf_GetBenchmarkBuildOrderObjectiveIndexforBenchmarkBuildOrderIndex(lp_benchmarkBuildOrderIndex)], c_objectiveStateFailed);
    gv_benchmarkBuildOrderStepCursor += 1;
    gv_numFailedBenchmarkBuildOrderSteps += 1;
}

void gf_CorrectFailedBenchmarkBuildOrderStepObjective () {
    // Implementation
    TextExpressionSetToken("Param/Expression/45B375BE", "A", ObjectiveGetName(gv_benchmarkBuildOrderStepObjectives[(gv_benchmarkBuildOrderStepCursor-1)]));
    TextExpressionSetToken("Param/Expression/45B375BE", "B", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetElapsed(gv_buildTimer))));
    ObjectiveSetName(gv_benchmarkBuildOrderStepObjectives[(gv_benchmarkBuildOrderStepCursor-1)], TextExpressionAssemble("Param/Expression/45B375BE"));
    gv_numFailedBenchmarkBuildOrderSteps += 1;
}

void gf_ResetBenchmarkBuildOrderObjectives () {
    int auto8EFD539D_ae;
    int auto8EFD539D_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto8EFD539D_ae = 9;
    auto8EFD539D_ai = 1;
    lv_i = 0;
    for ( ; ( (auto8EFD539D_ai >= 0 && lv_i <= auto8EFD539D_ae) || (auto8EFD539D_ai <= 0 && lv_i >= auto8EFD539D_ae) ) ; lv_i += auto8EFD539D_ai ) {
        ObjectiveDestroy(gv_benchmarkBuildOrderStepObjectives[lv_i]);
    }
}

void gf_InitializeBenchmarkBuildOrderObjectives () {
    // Implementation
    if ((gv_practiceAgainstBenchmarkBuildOrder == true)) {
        gf_LoadBenchmarkBuildOrder();
        if ((gv_totalNumBenchmarkBuildOrderSteps > 0)) {
            gf_CreateBenchmarkBuildOrderObjectives();
        }
        else {
        }
    }
    else {
    }
}

void gf_AddUnitBuildOrderStep (string lp_buildStepUnitType) {
    // Variable Declarations
    int lv_buildOrderStepSupplyCount;

    // Variable Initialization

    // Implementation
    if (((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_buildStepUnitType, "Attributes[" + IntToString(7) + "]", c_playerAny) == 1) && (PlayerRace(EventPlayer()) == "Zerg"))) {
        lv_buildOrderStepSupplyCount = (PlayerScoreValueGetAsInt(1, "FoodUsed")+1);
    }
    else {
        lv_buildOrderStepSupplyCount = PlayerScoreValueGetAsInt(1, "FoodUsed");
    }
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_unitType = lp_buildStepUnitType;
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_numUnits = 1;
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_supplyCount = lv_buildOrderStepSupplyCount;
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_elapsedSeconds = FixedToInt(TimerGetElapsed(gv_buildTimer));
    gv_lastCreatedBuildOrderUnitType = lp_buildStepUnitType;
    gv_lastCreatedUnitTimestamp = TimerGetElapsed(gv_buildTimer);
    if ((gv_debugBuildOrderTracking == true)) {
        TextExpressionSetToken("Param/Expression/7FAB1454", "A", gf_GetCurrentBuildOrderStepText(gv_currentBuildOrderStepCursor));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/7FAB1454"));
    }
    else {
    }
}

void gf_AddUpgradeBuildOrderStep (string lp_buildStepUnitType) {
    // Implementation
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_unitType = lp_buildStepUnitType;
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_numUnits = 1;
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_supplyCount = PlayerScoreValueGetAsInt(1, "FoodUsed");
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_elapsedSeconds = FixedToInt(TimerGetElapsed(gv_buildTimer));
    gv_lastCreatedBuildOrderUnitType = lp_buildStepUnitType;
    gv_lastCreatedUnitTimestamp = TimerGetElapsed(gv_buildTimer);
}

void gf_ResetCurrentBuildOrderStepsVariables () {
    int autoA13422C8_ae;
    int autoA13422C8_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    gv_lastCreatedBuildOrderUnitType = null;
    autoA13422C8_ae = gv_currentBuildOrderStepCursor;
    autoA13422C8_ai = 1;
    lv_i = 0;
    for ( ; ( (autoA13422C8_ai >= 0 && lv_i <= autoA13422C8_ae) || (autoA13422C8_ai <= 0 && lv_i >= autoA13422C8_ae) ) ; lv_i += autoA13422C8_ai ) {
        gv_currentBuildOrderSteps[lv_i].lv_unitType = null;
        gv_currentBuildOrderSteps[lv_i].lv_supplyCount = 0;
        gv_currentBuildOrderSteps[lv_i].lv_numUnits = 0;
        gv_currentBuildOrderSteps[lv_i].lv_elapsedSeconds = 0;
    }
    gv_currentBuildOrderStepCursor = 0;
}

void gf_ResetBenchmarkBuildOrderStepsVariables () {
    int auto488B3271_ae;
    int auto488B3271_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto488B3271_ae = gv_benchmarkBuildOrderStepCursor;
    auto488B3271_ai = 1;
    lv_i = 0;
    for ( ; ( (auto488B3271_ai >= 0 && lv_i <= auto488B3271_ae) || (auto488B3271_ai <= 0 && lv_i >= auto488B3271_ae) ) ; lv_i += auto488B3271_ai ) {
        gv_benchmarkBuildOrderSteps[lv_i].lv_unitType = null;
        gv_benchmarkBuildOrderSteps[lv_i].lv_supplyCount = 0;
        gv_benchmarkBuildOrderSteps[lv_i].lv_numUnits = 0;
        gv_benchmarkBuildOrderSteps[lv_i].lv_elapsedSeconds = 0;
    }
    gv_benchmarkBuildOrderStepCursor = 0;
    gv_totalNumBenchmarkBuildOrderSteps = 0;
}

void gf_ResetStatistics () {
    // Implementation
    gv_workersCreated = 6;
    gv_timeProductionIdleThisBuild = 0;
    gv_timeSupplyBlockedThisBuild = 0;
    gv_cumulativeUnspentMinerals = 0;
    gv_totalMineralSamplesThisBuild = 0;
    gv_cumulativeUnspentGas = 0;
    gv_totalGasSamplesThisBuild = 0;
    gv_cumulativeAPM = 0;
    gv_totalAPMSamplesThisBuild = 0;
    gv_totalMineralsCollected = 50;
    gv_totalGasCollected = 0;
}

void gf_CreateScreenButtons () {
    // Implementation
    libNtve_gf_DisplayScreenButton(1, StringExternal("Param/Value/91F27B53"), gv_screenButtonWidth, gv_screenButtonHeight, c_anchorTopRight, gv_screenButtonXPadding, gv_screenButtonYPadding, gt_OpenMainMenu);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/B441E0B5"), PlayerGroupAll());
    libNtve_gf_DisplayScreenButton(2, StringExternal("Param/Value/A77D2D5B"), gv_screenButtonWidth, gv_screenButtonHeight, c_anchorTopRight, gv_screenButtonXPadding, (gv_screenButtonYPadding+gv_screenButtonHeight), gt_OpenHelpDialog);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/D2D6DF2E"), PlayerGroupAll());
    libNtve_gf_DisplayScreenButton(3, StringExternal("Param/Value/70C261D0"), gv_screenButtonWidth, gv_screenButtonHeight, c_anchorTopRight, gv_screenButtonXPadding, (gv_screenButtonYPadding+2*gv_screenButtonHeight), gt_OpenStatsDialog);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/E706FEFB"), PlayerGroupAll());
    libNtve_gf_DisplayScreenButton(4, StringExternal("Param/Value/5091C154"), gv_screenButtonWidth, gv_screenButtonHeight, c_anchorTopRight, gv_screenButtonXPadding, (gv_screenButtonYPadding+3*gv_screenButtonHeight), gt_ResetBuild);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/55E832AB"), PlayerGroupAll());
    libNtve_gf_DisplayScreenButton(5, StringExternal("Param/Value/13AB0492"), gv_winButtonWidth, gv_winButtonHeight, c_anchorBottomRight, gv_winButtonXPadding, gf_GetWinButtonYPadding(), gt_EndGame);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/1CABB5B1"), PlayerGroupAll());
}

void gf_LookatandPanToUnit (unit lp_unit) {
    // Implementation
    CameraLookAt(1, UnitGetPosition(lp_unit), 0.5, 50.0, 10.0);
    CameraPan(1, libNtve_gf_PointWithZOffset(UnitGetPosition(lp_unit), ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance))+8)), 0.2, 50.0, 10.0, false);
    libNtve_gf_SwooshCamera(1, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), UnitGetPosition(lp_unit), 0.2);
}

string gf_GetNextUpgrade (string lp_currentUpgrade) {
    string autoB7B7DC32_val;

    // Implementation
    autoB7B7DC32_val = lp_currentUpgrade;
    if (autoB7B7DC32_val == "ProtossAirArmorsLevel1") {
        return "ProtossAirArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "ProtossAirArmorsLevel2") {
        return "ProtossAirArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "ProtossGroundArmorsLevel1") {
        return "ProtossGroundArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "ProtossGroundArmorsLevel2") {
        return "ProtossGroundArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "ProtossShieldsLevel1") {
        return "ProtossShieldsLevel2";
    }
    else if (autoB7B7DC32_val == "ProtossShieldsLevel2") {
        return "ProtossShieldsLevel3";
    }
    else if (autoB7B7DC32_val == "ProtossAirWeaponsLevel1") {
        return "ProtossAirWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "ProtossAirWeaponsLevel2") {
        return "ProtossAirWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "ProtossGroundWeaponsLevel1") {
        return "ProtossGroundWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "ProtossGroundWeaponsLevel2") {
        return "ProtossGroundWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranInfantryArmorsLevel1") {
        return "TerranInfantryArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranInfantryArmorsLevel2") {
        return "TerranInfantryArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranShipArmorsLevel1") {
        return "TerranShipArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranShipArmorsLevel2") {
        return "TerranShipArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranVehicleArmorsLevel1") {
        return "TerranVehicleArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranVehicleArmorsLevel2") {
        return "TerranVehicleArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranInfantryWeaponsLevel1") {
        return "TerranInfantryWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranInfantryWeaponsLevel2") {
        return "TerranInfantryWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranShipWeaponsLevel1") {
        return "TerranShipWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranShipWeaponsLevel2") {
        return "TerranShipWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranVehicleWeaponsLevel1") {
        return "TerranVehicleWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranVehicleWeaponsLevel2") {
        return "TerranVehicleWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "ZergFlyerArmorsLevel1") {
        return "ZergFlyerArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "ZergFlyerArmorsLevel2") {
        return "ZergFlyerArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "ZergGroundArmorsLevel1") {
        return "ZergGroundArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "ZergGroundArmorsLevel2") {
        return "ZergGroundArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "ZergFlyerWeaponsLevel1") {
        return "ZergFlyerWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "ZergFlyerWeaponsLevel2") {
        return "ZergFlyerWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "ZergMeleeWeaponsLevel1") {
        return "ZergMeleeWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "ZergMeleeWeaponsLevel2") {
        return "ZergMeleeWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "ZergMissileWeaponsLevel1") {
        return "ZergMissileWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "ZergMissileWeaponsLevel2") {
        return "ZergMissileWeaponsLevel3";
    }
    else {
        return "";
    }
}

text gf_GetRaceMacroUnitName () {
    string auto30CFABC8_val;

    // Implementation
    auto30CFABC8_val = PlayerRace(1);
    if (auto30CFABC8_val == "Terr") {
        return UnitTypeGetName("OrbitalCommand");
    }
    else if (auto30CFABC8_val == "Prot") {
        return UnitTypeGetName("Nexus");
    }
    else if (auto30CFABC8_val == "Zerg") {
        return UnitTypeGetName("Queen");
    }
    else {
        return StringExternal("Param/Value/584FC4D9");
    }
}

bool gf_IsRaceMacroEnergyAboveThreshold () {
    unitgroup autoEE6E2050_g;
    int autoEE6E2050_u;

    // Variable Declarations
    bool lv_result;
    unit lv_currentunit;

    // Variable Initialization

    // Implementation
    autoEE6E2050_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEE6E2050_u = 1;
    for ( ; autoEE6E2050_u <= UnitGroupCount(autoEE6E2050_g, c_unitCountAll) ; autoEE6E2050_u += BoolToInt(lv_currentunit == UnitGroupUnit(autoEE6E2050_g, autoEE6E2050_u)) ) {
        lv_currentunit = UnitGroupUnit(autoEE6E2050_g, autoEE6E2050_u);
        if (((UnitGetPropertyFixed(lv_currentunit, c_unitPropEnergy, c_unitPropCurrent) > gv_alertSelectedMacroEnergyThreshold) && ((UnitGetType(lv_currentunit) == "Queen") || (UnitGetType(lv_currentunit) == "QueenBurrowed") || (UnitGetType(lv_currentunit) == "OrbitalCommand") || (UnitGetType(lv_currentunit) == "OrbitalCommandFlying") || (UnitGetType(lv_currentunit) == "Nexus")))) {
            lv_result = true;
        }
        else {
        }
    }
    return lv_result;
}

bool gf_IsOverlordCurrentlyInProgress () {
    // Implementation
    if ((gv_numMorphingOverlords > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsSupplyDepotorPylonUnderConstruction () {
    unitgroup auto54B9016D_g;
    int auto54B9016D_u;

    // Variable Declarations
    unit lv_currentUnit;
    bool lv_result;

    // Variable Initialization

    // Implementation
    auto54B9016D_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), 0, 0), 0);
    auto54B9016D_u = 1;
    for ( ; auto54B9016D_u <= UnitGroupCount(auto54B9016D_g, c_unitCountAll) ; auto54B9016D_u += BoolToInt(lv_currentUnit == UnitGroupUnit(auto54B9016D_g, auto54B9016D_u)) ) {
        lv_currentUnit = UnitGroupUnit(auto54B9016D_g, auto54B9016D_u);
        if (((UnitGetType(lv_currentUnit) == "SupplyDepot") || (UnitGetType(lv_currentUnit) == "Pylon"))) {
            lv_result = true;
        }
        else {
        }
    }
    return lv_result;
}

unitgroup gf_GetAllPlayer1UnitsforType (string lp_unitType) {
    unitgroup auto7054DA5F_g;
    int auto7054DA5F_u;

    // Variable Declarations
    unit lv_currentUnit;
    unitgroup lv_result;

    // Variable Initialization
    lv_result = UnitGroupEmpty();

    // Implementation
    auto7054DA5F_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7054DA5F_u = 1;
    for ( ; auto7054DA5F_u <= UnitGroupCount(auto7054DA5F_g, c_unitCountAll) ; auto7054DA5F_u += BoolToInt(lv_currentUnit == UnitGroupUnit(auto7054DA5F_g, auto7054DA5F_u)) ) {
        lv_currentUnit = UnitGroupUnit(auto7054DA5F_g, auto7054DA5F_u);
        if ((UnitGetType(lv_currentUnit) == lp_unitType)) {
            UnitGroupAdd(lv_result, lv_currentUnit);
        }
        else {
        }
    }
    return lv_result;
}

int gf_GetDefaultMacroEnergyThreshold () {
    string autoBAC892F0_val;

    // Variable Declarations
    int lv_result;

    // Variable Initialization

    // Implementation
    autoBAC892F0_val = PlayerRace(1);
    if (autoBAC892F0_val == "Terr") {
        lv_result = gv_alertTerranDefaultMacroEnergyThreshold;
    }
    else if (autoBAC892F0_val == "Zerg") {
        lv_result = gv_alertZergDefaultMacroEnergyThreshold;
    }
    else if (autoBAC892F0_val == "Prot") {
        lv_result = gv_alertProtossDefaultMacroEnergyThreshold;
    }
    else {
    }
    return lv_result;
}

string gf_GetIconForBuildingType (string lp_unitType) {
    string auto77F30C81_val;

    // Implementation
    auto77F30C81_val = lp_unitType;
    if (auto77F30C81_val == "Nexus") {
        return "Assets\\Textures\\btn-building-protoss-nexus.dds";
    }
    else if (auto77F30C81_val == "Gateway") {
        return "Assets\\Textures\\btn-building-protoss-gateway.dds";
    }
    else if (auto77F30C81_val == "RoboticsFacility") {
        return "Assets\\Textures\\btn-building-protoss-roboticsfacility.dds";
    }
    else if (auto77F30C81_val == "Stargate") {
        return "Assets\\Textures\\btn-building-protoss-stargate.dds";
    }
    else if (auto77F30C81_val == "CommandCenter") {
        return "Assets\\Textures\\btn-building-terran-commandcenter.dds";
    }
    else if (auto77F30C81_val == "OrbitalCommand") {
        return "Assets\\Textures\\btn-techupgrade-terran-orbitalcommand.dds";
    }
    else if (auto77F30C81_val == "PlanetaryFortress") {
        return "Assets\\Textures\\btn-building-terran-planetaryfortress.dds";
    }
    else if (auto77F30C81_val == "Barracks") {
        return "Assets\\Textures\\btn-building-terran-barracks.dds";
    }
    else if (auto77F30C81_val == "Factory") {
        return "Assets\\Textures\\btn-building-terran-factory.dds";
    }
    else if (auto77F30C81_val == "Starport") {
        return "Assets\\Textures\\btn-building-terran-starport.dds";
    }
    else if (auto77F30C81_val == "Larva") {
        return "Assets\\Textures\\btn-unit-zerg-larva.dds";
    }
    else if (auto77F30C81_val == "Hatchery") {
        return "Assets\\Textures\\btn-building-zerg-hatchery.dds";
    }
    else if (auto77F30C81_val == "Lair") {
        return "Assets\\Textures\\btn-building-zerg-lair.dds";
    }
    else if (auto77F30C81_val == "Hive") {
        return "Assets\\Textures\\btn-building-zerg-hive.dds";
    }
    else {
        return null;
    }
}

bool gf_IsUnitTypeTrainingQueueEmpty (string lp_unitType) {
    unitgroup auto9BA590D3_g;
    int auto9BA590D3_u;

    // Variable Declarations
    unit lv_currenUnit;
    bool lv_queueIsEmpty;

    // Variable Initialization

    // Implementation
    if ((PlayerRace(1) == "Zerg")) {
        if (((lp_unitType == "Larva") && (TechTreeUnitCount(1, "Egg", c_techCountQueuedOrBetter) == 0) && (TechTreeUnitCount(1, "Larva", c_techCountQueuedOrBetter) > 0) && (PlayerScoreValueGetAsInt(1, "FoodUsed") >= 12))) {
            lv_queueIsEmpty = true;
            if ((gv_debugAlerts == true)) {
                TextExpressionSetToken("Param/Expression/40B9E7CE", "A", IntToText(TechTreeUnitCount(1, "Larva", c_techCountQueuedOrBetter)));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/40B9E7CE"));
            }
            else {
            }
        }
        else {
            lv_queueIsEmpty = false;
        }
    }
    else {
        lv_queueIsEmpty = true;
        auto9BA590D3_g = gf_GetAllPlayer1UnitsforType(lp_unitType);
        auto9BA590D3_u = 1;
        for ( ; auto9BA590D3_u <= UnitGroupCount(auto9BA590D3_g, c_unitCountAll) ; auto9BA590D3_u += BoolToInt(lv_currenUnit == UnitGroupUnit(auto9BA590D3_g, auto9BA590D3_u)) ) {
            lv_currenUnit = UnitGroupUnit(auto9BA590D3_g, auto9BA590D3_u);
            if ((UnitQueueGetProperty(lv_currenUnit, c_unitQueuePropertyUsed) > 0)) {
                lv_queueIsEmpty = false;
                if ((gv_debugAlerts == true)) {
                    TextExpressionSetToken("Param/Expression/7886B8D3", "A", UnitTypeGetName(lp_unitType));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/7886B8D3"));
                }
                else {
                }
            }
            else {
            }
            if (((lp_unitType == "CommandCenter") && (TechTreeUnitCount(1, "OrbitalCommand", c_techCountInProgressOnly) > 0))) {
                lv_queueIsEmpty = false;
                if ((gv_debugAlerts == true)) {
                    TextExpressionSetToken("Param/Expression/63F41F72", "A", UnitTypeGetName(lp_unitType));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/63F41F72"));
                }
                else {
                }
            }
            else {
            }
        }
    }
    if ((gv_debugAlerts == true)) {
        TextExpressionSetToken("Param/Expression/8865A9BB", "A", UnitTypeGetName(lp_unitType));
        TextExpressionSetToken("Param/Expression/8865A9BB", "B", libNtve_gf_ConvertBooleanToText(lv_queueIsEmpty));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/8865A9BB"));
    }
    else {
    }
    return lv_queueIsEmpty;
}

string gf_GetCurrentlySelectedMatchupasBankSectionKey () {
    // Implementation
    return ((PlayerRace(1)) + gv_benchmarkMatchupSectionKeys[gv_currentlySelectedMatchupIndex]);
}

text gf_GetCurrentlySelectedMatchupasText () {
    // Implementation
    return libNtve_gf_DialogItemText(gv_matchupSelectionButtons[gv_currentlySelectedMatchupIndex], 1);
}

int gf_GetEditBoxIntValue (int lp_editBox) {
    // Implementation
    return StringToInt(libNtve_gf_DialogItemEditValue(lp_editBox, 1));
}

bool gf_DoesSavedBuildOrderExistForCurrentMatchup () {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if ((BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_numBenchmarkBuildOrderStepsEntryKey) > 0)) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    if ((gv_debugBuildOrderTracking == true)) {
        TextExpressionSetToken("Param/Expression/449A463F", "A", libNtve_gf_ConvertBooleanToText(lv_result));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/449A463F"));
    }
    else {
    }
    return lv_result;
}

int gf_GetBenchmarkBuildOrderObjectiveIndexforBenchmarkBuildOrderIndex (int lp_cursor) {
    // Variable Declarations
    int lv_result;

    // Variable Initialization

    // Implementation
    lv_result = lp_cursor;
    return lv_result;
}

string gf_GetBenchmarkBuildOrderStepBankKey (int lp_stepNumber, string lp_stepEntryKeySuffix) {
    // Variable Declarations
    string lv_stepKeyString;

    // Variable Initialization
    lv_stepKeyString = "";

    // Implementation
    lv_stepKeyString = (gv_benchmarkBuildStepEntryKeyPrefix + "_" + IntToString(lp_stepNumber) + "_" + lp_stepEntryKeySuffix);
    return lv_stepKeyString;
}

bool gf_IsUnitTypeCorrectForBenchmarkBuildOrderStep (string lp_unitType, int lp_benchmarkBuildOrderStepIndex) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if ((lp_unitType == gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_unitType)) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    if ((gv_debugBuildOrderTracking == true)) {
        TextExpressionSetToken("Param/Expression/161A937D", "A", UnitTypeGetName(gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_unitType));
        TextExpressionSetToken("Param/Expression/161A937D", "B", UnitTypeGetName(lp_unitType));
        TextExpressionSetToken("Param/Expression/161A937D", "C", libNtve_gf_ConvertBooleanToText(lv_result));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/161A937D"));
    }
    else {
    }
    return lv_result;
}

bool gf_IsUpgradeTypeCorrectForBenchmarkBuildOrderStep (string lp_upgrade, int lp_benchmarkBuildOrderStepIndex) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if ((lp_upgrade == gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_upgradeType)) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    if ((gv_debugBuildOrderTracking == true)) {
        TextExpressionSetToken("Param/Expression/FD541E74", "A", UnitTypeGetName(gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_upgradeType));
        TextExpressionSetToken("Param/Expression/FD541E74", "B", StringToText((lp_upgrade)));
        TextExpressionSetToken("Param/Expression/FD541E74", "C", libNtve_gf_ConvertBooleanToText(lv_result));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/FD541E74"));
    }
    else {
    }
    return lv_result;
}

bool gf_IsSupplyCountCorrectForBenchmarkBuildOrderStep (int lp_supplyCount, int lp_benchmarkBuildOrderStepIndex) {
    // Implementation
    if ((lp_supplyCount <= (gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_supplyCount+15))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsNumUnitsCorrectForBenchmarkBuildOrderStep (int lp_numUnits, int lp_benchmarkBuildOrderStepIndex) {
    // Implementation
    if ((lp_numUnits == gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_numUnits)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsUnitTypeValidForBuildOrder (string lp_unitType) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if (((PlayerScoreValueGetAsInt(1, "FoodUsed") <= 40) && ((lp_unitType == "Overlord") || (lp_unitType == "Queen")))) {
        lv_result = true;
    }
    else {
    }
    if (((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "Attributes[" + IntToString(7) + "]", c_playerAny) == 1) && (!(((lp_unitType == "SupplyDepot") || (lp_unitType == "Pylon") || (lp_unitType == "CreepTumor")))) && (!(((PlayerScoreValueGetAsInt(1, "FoodUsed") > gv_buildOrderMaxGasSupply) && ((lp_unitType == "Extractor") || (lp_unitType == "Assimilator") || (lp_unitType == "Refinery"))))))) {
        lv_result = true;
    }
    else {
    }
    if ((gv_debugBuildOrderTracking == true)) {
        TextExpressionSetToken("Param/Expression/C9374463", "A", UnitTypeGetName(lp_unitType));
        TextExpressionSetToken("Param/Expression/C9374463", "B", libNtve_gf_ConvertBooleanToText(lv_result));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/C9374463"));
    }
    else {
    }
    return lv_result;
}

bool gf_IsUpgradeTypeValidForBuildOrder (string lp_upgrade) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if (((lp_upgrade == "WarpGateResearch") || (lp_upgrade == "BlinkTech") || (lp_upgrade == "ExtendedThermalLance") || (lp_upgrade == "Stimpack") || (lp_upgrade == "PunisherGrenades") || (lp_upgrade == "ShieldWall") || (lp_upgrade == "zerglingmovementspeed") || (lp_upgrade == "Burrow") || (lp_upgrade == "ProtossAirArmorsLevel1") || (lp_upgrade == "ProtossAirArmorsLevel2") || (lp_upgrade == "ProtossAirArmorsLevel3") || (lp_upgrade == "ProtossGroundArmorsLevel1") || (lp_upgrade == "ProtossGroundArmorsLevel2") || (lp_upgrade == "ProtossGroundArmorsLevel3") || (lp_upgrade == "ProtossShieldsLevel1") || (lp_upgrade == "ProtossShieldsLevel2") || (lp_upgrade == "ProtossShieldsLevel3") || (lp_upgrade == "ProtossAirWeaponsLevel1") || (lp_upgrade == "ProtossAirWeaponsLevel2") || (lp_upgrade == "ProtossAirWeaponsLevel3") || (lp_upgrade == "ProtossGroundWeaponsLevel1") || (lp_upgrade == "ProtossGroundWeaponsLevel2") || (lp_upgrade == "ProtossGroundWeaponsLevel3") || (lp_upgrade == "TerranInfantryArmorsLevel1") || (lp_upgrade == "TerranInfantryArmorsLevel2") || (lp_upgrade == "TerranInfantryArmorsLevel3") || (lp_upgrade == "TerranShipArmorsLevel1") || (lp_upgrade == "TerranShipArmorsLevel2") || (lp_upgrade == "TerranShipArmorsLevel3") || (lp_upgrade == "TerranVehicleArmorsLevel1") || (lp_upgrade == "TerranVehicleArmorsLevel2") || (lp_upgrade == "TerranVehicleArmorsLevel3") || (lp_upgrade == "TerranInfantryWeaponsLevel1") || (lp_upgrade == "TerranInfantryWeaponsLevel2") || (lp_upgrade == "TerranInfantryWeaponsLevel3") || (lp_upgrade == "TerranShipWeaponsLevel1") || (lp_upgrade == "TerranShipWeaponsLevel2") || (lp_upgrade == "TerranShipWeaponsLevel3") || (lp_upgrade == "TerranVehicleWeaponsLevel1") || (lp_upgrade == "TerranVehicleWeaponsLevel2") || (lp_upgrade == "TerranVehicleWeaponsLevel3") || (lp_upgrade == "ZergFlyerArmorsLevel1") || (lp_upgrade == "ZergFlyerArmorsLevel2") || (lp_upgrade == "ZergFlyerArmorsLevel3") || (lp_upgrade == "ZergGroundArmorsLevel1") || (lp_upgrade == "ZergGroundArmorsLevel2") || (lp_upgrade == "ZergGroundArmorsLevel3") || (lp_upgrade == "ZergFlyerWeaponsLevel1") || (lp_upgrade == "ZergFlyerWeaponsLevel2") || (lp_upgrade == "ZergFlyerWeaponsLevel3") || (lp_upgrade == "ZergMeleeWeaponsLevel1") || (lp_upgrade == "ZergMeleeWeaponsLevel2") || (lp_upgrade == "ZergMeleeWeaponsLevel3") || (lp_upgrade == "ZergMissileWeaponsLevel1") || (lp_upgrade == "ZergMissileWeaponsLevel2") || (lp_upgrade == "ZergMissileWeaponsLevel3"))) {
        lv_result = true;
    }
    else {
    }
    if ((gv_debugBuildOrderTracking == true)) {
        TextExpressionSetToken("Param/Expression/D87C562D", "A", StringToText((lp_upgrade)));
        TextExpressionSetToken("Param/Expression/D87C562D", "B", libNtve_gf_ConvertBooleanToText(lv_result));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/D87C562D"));
    }
    else {
    }
    return lv_result;
}

text gf_GetCurrentBuildOrderStepText (int lp_stepNumber) {
    // Variable Declarations
    text lv_numUnits;
    text lv_unitType;
    text lv_supplyCount;
    text lv_elapsedTime;
    text lv_result;

    // Variable Initialization
    lv_numUnits = StringExternal("Param/Value/29A8F1DC");

    // Implementation
    lv_unitType = UnitTypeGetName(gv_currentBuildOrderSteps[lp_stepNumber].lv_unitType);
    if ((gv_currentBuildOrderSteps[lp_stepNumber].lv_numUnits > 1)) {
        TextExpressionSetToken("Param/Expression/A6714026", "A", IntToText(gv_currentBuildOrderSteps[lp_stepNumber].lv_numUnits));
        lv_numUnits = TextExpressionAssemble("Param/Expression/A6714026");
    }
    else {
    }
    lv_supplyCount = IntToText(gv_currentBuildOrderSteps[lp_stepNumber].lv_supplyCount);
    lv_elapsedTime = TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_currentBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds);
    TextExpressionSetToken("Param/Expression/81102448", "A", lv_supplyCount);
    TextExpressionSetToken("Param/Expression/81102448", "D", lv_numUnits);
    TextExpressionSetToken("Param/Expression/81102448", "B", lv_unitType);
    TextExpressionSetToken("Param/Expression/81102448", "C", lv_elapsedTime);
    lv_result = TextExpressionAssemble("Param/Expression/81102448");
    return lv_result;
}

text gf_GetBenchmarkBuildOrderStepText (int lp_stepNumber) {
    // Variable Declarations
    text lv_numUnits;
    text lv_unitType;
    text lv_supplyCount;
    text lv_elapsedTime;
    text lv_result;

    // Variable Initialization
    lv_numUnits = StringExternal("Param/Value/B286C09B");

    // Implementation
    lv_unitType = UnitTypeGetName(gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_unitType);
    if ((gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_numUnits > 1)) {
        TextExpressionSetToken("Param/Expression/02DB92AF", "A", IntToText(gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_numUnits));
        lv_numUnits = TextExpressionAssemble("Param/Expression/02DB92AF");
    }
    else {
    }
    lv_supplyCount = IntToText(gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supplyCount);
    lv_elapsedTime = TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds);
    TextExpressionSetToken("Param/Expression/1734DB71", "A", lv_supplyCount);
    TextExpressionSetToken("Param/Expression/1734DB71", "D", lv_numUnits);
    TextExpressionSetToken("Param/Expression/1734DB71", "B", lv_unitType);
    TextExpressionSetToken("Param/Expression/1734DB71", "C", lv_elapsedTime);
    lv_result = TextExpressionAssemble("Param/Expression/1734DB71");
    return lv_result;
}

text gf_GetFormattedCompleteBenchmarkBuildOrderStepText (int lp_stepNumber) {
    // Variable Declarations
    text lv_result;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/C5F8A524", "A", gf_GetBenchmarkandCurrentStepSupplyasText(lp_stepNumber));
    TextExpressionSetToken("Param/Expression/C5F8A524", "B", gf_GetBenchmarkandCurrentStepSecondsDiffasText(lp_stepNumber));
    TextExpressionSetToken("Param/Expression/236BD2AB", "A", gf_GetBenchmarkBuildOrderStepText(lp_stepNumber));
    TextExpressionSetToken("Param/Expression/236BD2AB", "D", TextWithColor(TextExpressionAssemble("Param/Expression/C5F8A524"), gf_GetColorForBenchmarkBuildOrderStepCompletion(lp_stepNumber)));
    lv_result = TextExpressionAssemble("Param/Expression/236BD2AB");
    return lv_result;
}

color gf_GetColorForBenchmarkBuildOrderStepCompletion (int lp_stepNumber) {
    // Variable Declarations
    int lv_currentElaspedSeconds;
    int lv_currentSupplyCount;
    color lv_color;
    text lv_result;

    // Variable Initialization
    lv_color = Color(100,100,100);

    // Implementation
    lv_currentElaspedSeconds = FixedToInt(TimerGetElapsed(gv_buildTimer));
    lv_currentSupplyCount = PlayerScoreValueGetAsInt(1, "FoodUsed");
    if (((lv_currentSupplyCount <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supplyCount+0)) && (lv_currentElaspedSeconds <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds+0)))) {
        lv_color = Color(66.67, 79.22, 100.00);
    }
    else if (((lv_currentSupplyCount <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supplyCount+gv_greenBenchmarkSupplyThreshold)) && (lv_currentElaspedSeconds <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds+gv_greenBenchmarkSecondsThreshold)))) {
        lv_color = Color(50.20, 100.00, 50.20);
    }
    else if (((lv_currentSupplyCount <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supplyCount+gv_yellowBenchmarkSupplyThreshold)) && (lv_currentElaspedSeconds <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds+gv_yellowBenchmarkSecondsThreshold)))) {
        lv_color = Color(100.00, 100.00, 50.20);
    }
    else if (((lv_currentSupplyCount <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supplyCount+gv_orangeBenchmarkSupplyThreshold)) && (lv_currentElaspedSeconds <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds+gv_orangeBenchmarkSecondsThreshold)))) {
        lv_color = Color(100.00, 74.51, 40.00);
    }
    else if ((true == true)) {
        lv_color = Color(100.00, 50.20, 50.20);
    }
    return lv_color;
}

text gf_GetBenchmarkandCurrentStepSupplyasText (int lp_stepNumber) {
    // Variable Declarations
    int lv_diff;
    text lv_result;

    // Variable Initialization

    // Implementation
    lv_diff = (PlayerScoreValueGetAsInt(1, "FoodUsed")-gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supplyCount);
    lv_diff = (PlayerScoreValueGetAsInt(1, "FoodUsed"));
    lv_result = IntToText(lv_diff);
    return lv_result;
}

text gf_GetBenchmarkandCurrentStepSecondsDiffasText (int lp_stepNumber) {
    // Variable Declarations
    int lv_diff;
    text lv_result;

    // Variable Initialization

    // Implementation
    lv_diff = (FixedToInt(TimerGetElapsed(gv_buildTimer))-gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds);
    if ((lv_diff < 0)) {
        lv_diff = (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds-FixedToInt(TimerGetElapsed(gv_buildTimer)));
        TextExpressionSetToken("Param/Expression/D17BAC5D", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_diff));
        lv_result = TextExpressionAssemble("Param/Expression/D17BAC5D");
    }
    else {
        TextExpressionSetToken("Param/Expression/8F0B85E2", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_diff));
        lv_result = TextExpressionAssemble("Param/Expression/8F0B85E2");
    }
    return lv_result;
}

bool gf_IsProductionIdle () {
    int autoBD02A5A8_ae;
    int autoBD02A5A8_ai;

    // Variable Declarations
    bool lv_result;
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((gv_alertProductionIdleNumProductionTypes > 0)) {
        autoBD02A5A8_ae = (gv_alertProductionIdleNumProductionTypes-1);
        autoBD02A5A8_ai = 1;
        lv_i = 0;
        for ( ; ( (autoBD02A5A8_ai >= 0 && lv_i <= autoBD02A5A8_ae) || (autoBD02A5A8_ai <= 0 && lv_i >= autoBD02A5A8_ae) ) ; lv_i += autoBD02A5A8_ai ) {
            if ((gf_IsUnitTypeTrainingQueueEmpty(gv_alertProductionIdleUnitTypes[lv_i]) == true)) {
                lv_result = true;
            }
            else {
            }
        }
    }
    else {
    }
    return lv_result;
}

int gf_GetTimeSupplyBlocked () {
    // Implementation
    return gv_timeSupplyBlockedThisBuild;
}

int gf_GetIdleProductionTime () {
    // Implementation
    if ((TimerGetElapsed(gv_buildTimer) >= 1)) {
        return gv_timeProductionIdleThisBuild;
    }
    else {
        return 0;
    }
}

int gf_GetAverageUnspentMinerals () {
    // Implementation
    if ((gv_totalMineralSamplesThisBuild >= 1)) {
        return FixedToInt((gv_cumulativeUnspentMinerals/gv_totalMineralSamplesThisBuild));
    }
    else {
        return 0;
    }
}

int gf_GetAverageUnspentGas () {
    // Implementation
    if ((gv_totalGasSamplesThisBuild >= 1)) {
        return FixedToInt((gv_cumulativeUnspentGas/gv_totalGasSamplesThisBuild));
    }
    else {
        return 0;
    }
}

int gf_GetAverageBuildAPM () {
    // Implementation
    if ((gv_totalAPMSamplesThisBuild >= 1)) {
        return FixedToInt((gv_cumulativeAPM/gv_totalAPMSamplesThisBuild));
    }
    else {
        return 0;
    }
}

fixed gf_GetSpendingQuotient () {
    // Implementation
    return (35*(0.00137*0.0-0.0)+240);
}

int gf_GetTotalArmySupply () {
    // Implementation
    return PlayerScoreValueGetAsInt(1, "FoodUsedArmy");
}

int gf_GetTotalArmyValueMinerals () {
    // Implementation
    return PlayerScoreValueGetAsInt(1, "MineralsUsedTotalArmy");
}

int gf_GetTotalArmyValueGas () {
    // Implementation
    return PlayerScoreValueGetAsInt(1, "VespeneUsedTotalArmy");
}

int gf_GetNumUpgradesResearched () {
    // Implementation
    return gv_totalNumberofUpgradesResearched;
}

int gf_GetTotalMineralsCollected () {
    // Implementation
    return gv_totalMineralsCollected;
}

int gf_GetTotalGasCollected () {
    // Implementation
    return gv_totalGasCollected;
}

text gf_CalculateIntPercentDifferenceAsText (int lp_value, int lp_previousBest, bool lp_higherisBetter) {
    // Variable Declarations
    fixed lv_percentDifference;
    text lv_percentDifferenceText;
    text lv_coloredPercentDifferenceText;

    // Variable Initialization

    // Implementation
    if (((lp_value > 0) && (lp_previousBest > 0))) {
        lv_percentDifference = (100*((IntToFixed(lp_value)-IntToFixed(lp_previousBest))/IntToFixed(lp_previousBest)));
        TextExpressionSetToken("Param/Expression/C52C6861", "A", FixedToText(lv_percentDifference, 2));
        lv_percentDifferenceText = TextExpressionAssemble("Param/Expression/C52C6861");
    }
    else {
        lv_percentDifferenceText = StringExternal("Param/Value/69E3E79E");
    }
    TextExpressionSetToken("Param/Expression/627D2026", "A", TextWithColor(lv_percentDifferenceText, gf_GetColorForPercentage(lv_percentDifference, lp_higherisBetter)));
    lv_coloredPercentDifferenceText = TextExpressionAssemble("Param/Expression/627D2026");
    return lv_coloredPercentDifferenceText;
}

text gf_CalculateRealPercentDifferenceAsText (fixed lp_value, fixed lp_previousBest, bool lp_higherisBetter) {
    // Variable Declarations
    fixed lv_percentDifference;
    text lv_percentDifferenceText;
    text lv_coloredPercentDifferenceText;

    // Variable Initialization

    // Implementation
    if (((lp_value > 0) && (lp_previousBest > 0))) {
        lv_percentDifference = (100*((lp_value-lp_previousBest)/lp_previousBest));
        TextExpressionSetToken("Param/Expression/57AF9E6B", "A", FixedToText(lv_percentDifference, 2));
        lv_percentDifferenceText = TextExpressionAssemble("Param/Expression/57AF9E6B");
    }
    else {
        lv_percentDifferenceText = StringExternal("Param/Value/5EC7DC33");
    }
    TextExpressionSetToken("Param/Expression/25E9AAD7", "A", TextWithColor(lv_percentDifferenceText, gf_GetColorForPercentage(lv_percentDifference, lp_higherisBetter)));
    lv_coloredPercentDifferenceText = TextExpressionAssemble("Param/Expression/25E9AAD7");
    return lv_coloredPercentDifferenceText;
}

color gf_GetColorForPercentage (fixed lp_percentage, bool lp_higherIsBetter) {
    // Variable Declarations
    color lv_result;

    // Variable Initialization
    lv_result = Color(149*100/255,150*100/255,151*100/255);

    // Implementation
    if ((((lp_percentage > 0.0) && (lp_higherIsBetter == true)) || ((lp_percentage < 0.0) && (lp_higherIsBetter == false)))) {
        lv_result = Color(22*100/255,128*100/255,0);
    }
    else if ((((lp_percentage < 0.0) && (lp_higherIsBetter == true)) || ((lp_percentage > 0.0) && (lp_higherIsBetter == false)))) {
        lv_result = Color(100.00, 0.00, 0.00);
    }
    return lv_result;
}

int gf_GetWinButtonYPadding () {
    string autoDB867731_val;

    // Implementation
    autoDB867731_val = PlayerRace(1);
    if (autoDB867731_val == "Terr") {
        return gv_winButtonTerranYPadding;
    }
    else if (autoDB867731_val == "Prot") {
        return gv_winButtonProtossYPadding;
    }
    else if (autoDB867731_val == "Zerg") {
        return gv_winButtonZergYPadding;
    }
    else {
        return 0;
    }
}

unitgroup gf_GetPlayer1Units () {
    // Variable Declarations
    unitgroup lv_result;

    // Variable Initialization
    lv_result = UnitGroupEmpty();

    // Implementation
    UnitGroupLoopBegin(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(lv_result, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return lv_result;
}

text gf_ConverttoTextWithSign (int lp_int) {
    // Variable Declarations
    text lv_result;

    // Variable Initialization

    // Implementation
    if ((lp_int > 0)) {
        TextExpressionSetToken("Param/Expression/B99F7846", "A", IntToText(lp_int));
        lv_result = TextExpressionAssemble("Param/Expression/B99F7846");
    }
    else {
        TextExpressionSetToken("Param/Expression/DD4AB624", "A", IntToText(lp_int));
        lv_result = TextExpressionAssemble("Param/Expression/DD4AB624");
    }
    return lv_result;
}

string gf_TrimSOffArmors (string lp_string) {
    // Implementation
    if ((lp_string == "Armors")) {
        return "Armor";
    }
    else {
        return lp_string;
    }
}

string gf_FormatCatalogStringwithSpaces (string lp_string) {
    int auto6F8A5183_ae;
    int auto6F8A5183_ai;

    // Variable Declarations
    string lv_currentLetter;
    string lv_result;
    int lv_i;

    // Variable Initialization
    lv_currentLetter = "";
    lv_result = "";

    // Implementation
    auto6F8A5183_ae = StringLength(lp_string);
    auto6F8A5183_ai = 1;
    lv_i = 0;
    for ( ; ( (auto6F8A5183_ai >= 0 && lv_i <= auto6F8A5183_ae) || (auto6F8A5183_ai <= 0 && lv_i >= auto6F8A5183_ae) ) ; lv_i += auto6F8A5183_ai ) {
        lv_currentLetter = StringSub(lp_string, lv_i, lv_i);
        if ((gf_IsCapitalLetterOrDigit(lv_currentLetter) == true)) {
            lv_result = (lv_result + " " + lv_currentLetter);
        }
        else {
            lv_result = (lv_result + lv_currentLetter);
        }
    }
    return lv_result;
}

bool gf_IsCapitalLetterOrDigit (string lp_letter) {
    // Implementation
    if (((lp_letter == "A") || (lp_letter == "B") || (lp_letter == "C") || (lp_letter == "D") || (lp_letter == "E") || (lp_letter == "F") || (lp_letter == "G") || (lp_letter == "H") || (lp_letter == "I") || (lp_letter == "J") || (lp_letter == "K") || (lp_letter == "L") || (lp_letter == "M") || (lp_letter == "N") || (lp_letter == "O") || (lp_letter == "P") || (lp_letter == "Q") || (lp_letter == "R") || (lp_letter == "S") || (lp_letter == "T") || (lp_letter == "U") || (lp_letter == "V") || (lp_letter == "W") || (lp_letter == "X") || (lp_letter == "Y") || (lp_letter == "Z") || (lp_letter == "1") || (lp_letter == "2") || (lp_letter == "3") || (lp_letter == "4") || (lp_letter == "5") || (lp_letter == "6") || (lp_letter == "7") || (lp_letter == "8") || (lp_letter == "9") || (lp_letter == "0"))) {
        return true;
    }
    else {
        return false;
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minerals Above Threshold
//--------------------------------------------------------------------------------------------------
bool gt_MineralsAboveThreshold_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((TimerGetRemaining(gv_alertMineralsCooldownTimer) == 0.0) && (PlayerScoreValueGetAsInt(1, "MineralsCurrent") > gv_alertMineralsThreshold) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) <= 200) && (gv_paused == false) && (gv_alertMineralsCheckEnabled == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_alertMineralsCooldownTimer, gv_alertCooldownSeconds, false, c_timeGame);
    UIAlert("MineralsTooHigh", 1, StringExternal("Param/Value/40F47144"), null);
    if ((gv_muteAlertsEnabled == false)) {
        SoundPlay(SoundLink("Alert_BaseUnderAttackKlaxon", -1), PlayerGroupAll(), 50.0, 4.8);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralsAboveThreshold_Init () {
    gt_MineralsAboveThreshold = TriggerCreate("gt_MineralsAboveThreshold_Func");
    TriggerAddEventTimePeriodic(gt_MineralsAboveThreshold, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gas Above Threshold
//--------------------------------------------------------------------------------------------------
bool gt_GasAboveThreshold_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((TimerGetRemaining(gv_alertGasCooldownTimer) == 0.0) && (PlayerScoreValueGetAsInt(1, "VespeneCurrent") > gv_alertGasThreshold) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) <= 200) && (gv_paused == false) && (gv_alertGasCheckEnabled == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_alertGasCooldownTimer, gv_alertCooldownSeconds, false, c_timeGame);
    UIAlert("GasTooHigh", 1, StringExternal("Param/Value/F8A6C784"), null);
    if ((gv_muteAlertsEnabled == false)) {
        SoundPlay(SoundLink("Doodad_ProtossWarpInPad_Alert", -1), PlayerGroupAll(), 50.0, 0.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GasAboveThreshold_Init () {
    gt_GasAboveThreshold = TriggerCreate("gt_GasAboveThreshold_Func");
    TriggerAddEventTimePeriodic(gt_GasAboveThreshold, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Block Imminent
//--------------------------------------------------------------------------------------------------
bool gt_SupplyBlockImminent_Func (bool testConds, bool runActions) {
    string auto281F1F30_val;

    // Conditions
    if (testConds) {
        if (!(((TimerGetRemaining(gv_alertSupplyBlockCooldownTimer) == 0.0) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) > gv_alertSupplyBlockStart) && (((PlayerGetPropertyInt(1, c_playerPropSuppliesMade)-PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)) >= 0) && ((PlayerGetPropertyInt(1, c_playerPropSuppliesMade)-PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)) <= gv_alertSupplyBlockWithinCapThreshold)) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) <= (200-gv_alertSupplyBlockWithinCapThreshold)) && (gf_IsSupplyDepotorPylonUnderConstruction() == false) && (gf_IsOverlordCurrentlyInProgress() == false) && (gv_paused == false) && (gv_alertSupplyBlockCheckEnabled == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_alertSupplyBlockCooldownTimer, gv_warningPingCooldownSeconds, false, c_timeGame);
    auto281F1F30_val = PlayerRace(1);
    if (auto281F1F30_val == "Prot") {
        UIAlert("SupplyBlockImminentProtoss", 1, StringExternal("Param/Value/7533586F"), null);
    }
    else if (auto281F1F30_val == "Terr") {
        UIAlert("SupplyBlockImminentTerran", 1, StringExternal("Param/Value/02411A2F"), null);
    }
    else if (auto281F1F30_val == "Zerg") {
        UIAlert("SupplyBlockImminentZerg", 1, StringExternal("Param/Value/657B8378"), null);
    }
    else {
    }
    if ((gv_muteAlertsEnabled == false)) {
        SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 50.0, 2.3);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyBlockImminent_Init () {
    gt_SupplyBlockImminent = TriggerCreate("gt_SupplyBlockImminent_Func");
    TriggerAddEventTimePeriodic(gt_SupplyBlockImminent, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Race Macro Energy Above Threshold
//--------------------------------------------------------------------------------------------------
bool gt_RaceMacroEnergyAboveThreshold_Func (bool testConds, bool runActions) {
    unitgroup autoF5F9D5CD_g;
    int autoF5F9D5CD_u;
    string autoB329AA1E_val;

    // Variable Declarations
    unit lv_currentunit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventPlayer() == 1) && (gf_IsRaceMacroEnergyAboveThreshold() == true) && (TimerGetRemaining(gv_alertMacroEnergyCooldownTimer) == 0.0) && (gv_paused == false) && (gv_alertMacroEnergyCheckEnabled == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_alertMacroEnergyCooldownTimer, gv_alertCooldownSeconds, false, c_timeGame);
    autoF5F9D5CD_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF5F9D5CD_u = 1;
    for ( ; autoF5F9D5CD_u <= UnitGroupCount(autoF5F9D5CD_g, c_unitCountAll) ; autoF5F9D5CD_u += BoolToInt(lv_currentunit == UnitGroupUnit(autoF5F9D5CD_g, autoF5F9D5CD_u)) ) {
        lv_currentunit = UnitGroupUnit(autoF5F9D5CD_g, autoF5F9D5CD_u);
        if (((UnitGetPropertyFixed(lv_currentunit, c_unitPropEnergy, c_unitPropCurrent) > gv_alertSelectedMacroEnergyThreshold) && ((UnitGetType(lv_currentunit) == "Queen") || (UnitGetType(lv_currentunit) == "QueenBurrowed") || (UnitGetType(lv_currentunit) == "OrbitalCommand") || (UnitGetType(lv_currentunit) == "OrbitalCommandFlying") || (UnitGetType(lv_currentunit) == "Nexus")))) {
            autoB329AA1E_val = PlayerRace(1);
            if (autoB329AA1E_val == "Zerg") {
                TextExpressionSetToken("Param/Expression/23180F1D", "A", UnitTypeGetName(UnitGetType(lv_currentunit)));
                UIAlertUnit("NexusEnergyTooHigh", 1, TextExpressionAssemble("Param/Expression/23180F1D"), null, lv_currentunit);
            }
            else if (autoB329AA1E_val == "Terr") {
                TextExpressionSetToken("Param/Expression/BF1F3D17", "A", UnitTypeGetName(UnitGetType(lv_currentunit)));
                UIAlertUnit("OrbitalCommandEnergyTooHigh", 1, TextExpressionAssemble("Param/Expression/BF1F3D17"), null, lv_currentunit);
            }
            else if (autoB329AA1E_val == "Prot") {
                TextExpressionSetToken("Param/Expression/BB1E6CB1", "A", UnitTypeGetName(UnitGetType(lv_currentunit)));
                UIAlertUnit("QueenEnergyTooHigh", 1, TextExpressionAssemble("Param/Expression/BB1E6CB1"), null, lv_currentunit);
            }
            else {
            }
            PingCreate(PlayerGroupAll(), "MinimapPing", UnitGetPosition(lv_currentunit), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 4.0);
            PingSetUnit(PingLastCreated(), lv_currentunit);
            if ((gv_muteAlertsEnabled == false)) {
                SoundPlay(SoundLink("UI_Bnet_PopUp_Generic", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else {
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaceMacroEnergyAboveThreshold_Init () {
    gt_RaceMacroEnergyAboveThreshold = TriggerCreate("gt_RaceMacroEnergyAboveThreshold_Func");
    TriggerAddEventTimePeriodic(gt_RaceMacroEnergyAboveThreshold, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Gap Above Threshold - Start Timer
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeGapAboveThresholdStartTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_tempTimer;

    // Variable Initialization
    lv_tempTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && ((libNtve_gf_TriggeringProgressUpgrade() == "ZergMeleeWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMeleeWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergGroundArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergGroundArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossShieldsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossShieldsLevel2"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_tempTimer, gv_alertUpgradeGapThreshold, false, c_timeGame);
    gv_alertUpgradeGapTimers[gv_alertUpgradeGapNumUpgrades] = TimerLastStarted();
    gv_alertUpgradeGapCooldownTimers[gv_alertUpgradeGapNumUpgrades] = TimerCreate();
    gv_alertUpgradeGapUpgrades[gv_alertUpgradeGapNumUpgrades] = libNtve_gf_TriggeringProgressUpgrade();
    gv_alertUpgradeGapNumUpgrades += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeGapAboveThresholdStartTimer_Init () {
    gt_UpgradeGapAboveThresholdStartTimer = TriggerCreate("gt_UpgradeGapAboveThresholdStartTimer_Func");
    TriggerAddEventUnitResearchProgress(gt_UpgradeGapAboveThresholdStartTimer, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Gap Above Threshold - Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeGapAboveThresholdTimerExpires_Func (bool testConds, bool runActions) {
    int auto4B6990F6_ae;
    int auto4B6990F6_ai;

    // Variable Declarations
    string lv_currentNextUpgrade;
    string lv_currentNextUpgradeName;
    string lv_currentNextUpgradeNameFormatted;
    int lv_i;

    // Variable Initialization
    lv_currentNextUpgradeName = "";
    lv_currentNextUpgradeNameFormatted = "";

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_alertUpgradeGapCheckEnabled == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4B6990F6_ae = gv_alertUpgradeGapNumUpgrades;
    auto4B6990F6_ai = 1;
    lv_i = 0;
    for ( ; ( (auto4B6990F6_ai >= 0 && lv_i <= auto4B6990F6_ae) || (auto4B6990F6_ai <= 0 && lv_i >= auto4B6990F6_ae) ) ; lv_i += auto4B6990F6_ai ) {
        if (((EventTimer() == gv_alertUpgradeGapTimers[lv_i]) || (EventTimer() == gv_alertUpgradeGapCooldownTimers[lv_i]))) {
            lv_currentNextUpgrade = gf_GetNextUpgrade(gv_alertUpgradeGapUpgrades[lv_i]);
            lv_currentNextUpgradeName = CatalogFieldValueGet(c_gameCatalogUpgrade, lv_currentNextUpgrade, "Name", c_playerAny);
            lv_currentNextUpgradeNameFormatted = gf_FormatCatalogStringwithSpaces(lv_currentNextUpgradeName);
            TextExpressionSetToken("Param/Expression/DDA3FDF3", "A", StringToText(StringWord(lv_currentNextUpgradeNameFormatted, 4)));
            TextExpressionSetToken("Param/Expression/DDA3FDF3", "B", StringToText(gf_TrimSOffArmors(StringWord(lv_currentNextUpgradeNameFormatted, 5))));
            TextExpressionSetToken("Param/Expression/DDA3FDF3", "C", StringToText(StringWord(lv_currentNextUpgradeNameFormatted, 7)));
            UIAlert("UpgradeDelayed", 1, TextExpressionAssemble("Param/Expression/DDA3FDF3"), (CatalogFieldValueGet(c_gameCatalogUpgrade, lv_currentNextUpgrade, "Icon", c_playerAny)));
            if ((gv_muteAlertsEnabled == false)) {
                SoundPlay(SoundLink("UI_ObjectiveUpdate", -1), PlayerGroupAll(), 50.0, 0.0);
            }
            else {
            }
            TimerStart(gv_alertUpgradeGapCooldownTimers[lv_i], gv_alertCooldownSeconds, false, c_timeGame);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeGapAboveThresholdTimerExpires_Init () {
    gt_UpgradeGapAboveThresholdTimerExpires = TriggerCreate("gt_UpgradeGapAboveThresholdTimerExpires_Func");
    TriggerAddEventTimer(gt_UpgradeGapAboveThresholdTimerExpires, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Gap Above Threshold - New Upgrade Starts
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeGapAboveThresholdNewUpgradeStarts_Func (bool testConds, bool runActions) {
    int auto54EAB7A2_ae;
    int auto54EAB7A2_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "ZergMeleeWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMeleeWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergGroundArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergGroundArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergGroundArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossShieldsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossShieldsLevel3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto54EAB7A2_ae = gv_alertUpgradeGapNumUpgrades;
    auto54EAB7A2_ai = 1;
    lv_i = 0;
    for ( ; ( (auto54EAB7A2_ai >= 0 && lv_i <= auto54EAB7A2_ae) || (auto54EAB7A2_ai <= 0 && lv_i >= auto54EAB7A2_ae) ) ; lv_i += auto54EAB7A2_ai ) {
        if ((libNtve_gf_TriggeringProgressUpgrade() == gf_GetNextUpgrade(gv_alertUpgradeGapUpgrades[lv_i]))) {
            TimerRestart(gv_alertUpgradeGapTimers[lv_i]);
            TimerPause(gv_alertUpgradeGapTimers[lv_i], true);
            TimerRestart(gv_alertUpgradeGapCooldownTimers[lv_i]);
            TimerPause(gv_alertUpgradeGapCooldownTimers[lv_i], true);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeGapAboveThresholdNewUpgradeStarts_Init () {
    gt_UpgradeGapAboveThresholdNewUpgradeStarts = TriggerCreate("gt_UpgradeGapAboveThresholdNewUpgradeStarts_Func");
    TriggerAddEventUnitResearchProgress(gt_UpgradeGapAboveThresholdNewUpgradeStarts, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production Idle Above Threshold - Start Timer
//--------------------------------------------------------------------------------------------------
bool gt_ProductionIdleAboveThresholdStartTimer_Func (bool testConds, bool runActions) {
    int auto4C73585D_ae;
    int auto4C73585D_ai;
    int auto6B257B32_ae;
    int auto6B257B32_ai;

    // Variable Declarations
    bool lv_productionUnitTypeExists;
    timer lv_tempTimer;
    int lv_i;

    // Variable Initialization
    lv_tempTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (((UnitGetType(EventUnit()) == "Larva")) || (UnitGetType(EventUnit()) == "CommandCenter") || (UnitGetType(EventUnit()) == "OrbitalCommand") || (UnitGetType(EventUnit()) == "PlanetaryFortress") || (UnitGetType(EventUnit()) == "Barracks") || (UnitGetType(EventUnit()) == "Factory") || (UnitGetType(EventUnit()) == "Starport") || (UnitGetType(EventUnit()) == "Nexus") || (UnitGetType(EventUnit()) == "Gateway") || (UnitGetType(EventUnit()) == "RoboticsFacility") || (UnitGetType(EventUnit()) == "Stargate")) && (gf_IsUnitTypeTrainingQueueEmpty(UnitGetType(EventUnit())) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_alertProductionIdleNumProductionTypes > 0)) {
        auto4C73585D_ae = gv_alertProductionIdleNumProductionTypes;
        auto4C73585D_ai = 1;
        lv_i = 0;
        for ( ; ( (auto4C73585D_ai >= 0 && lv_i <= auto4C73585D_ae) || (auto4C73585D_ai <= 0 && lv_i >= auto4C73585D_ae) ) ; lv_i += auto4C73585D_ai ) {
            if ((UnitGetType(EventUnit()) == gv_alertProductionIdleUnitTypes[lv_i])) {
                lv_productionUnitTypeExists = true;
            }
            else {
            }
        }
    }
    else {
        lv_productionUnitTypeExists = false;
    }
    if ((lv_productionUnitTypeExists == false)) {
        TimerStart(lv_tempTimer, gv_alertProductionIdleThreshold, false, c_timeGame);
        gv_alertProductionIdleBuildingTimers[gv_alertProductionIdleNumProductionTypes] = TimerLastStarted();
        gv_alertProductionIdleCooldownTimers[gv_alertProductionIdleNumProductionTypes] = TimerCreate();
        gv_alertProductionIdleUnitTypes[gv_alertProductionIdleNumProductionTypes] = UnitGetType(EventUnit());
        gv_alertProductionIdleNumProductionTypes += 1;
    }
    else {
        auto6B257B32_ae = gv_alertProductionIdleNumProductionTypes;
        auto6B257B32_ai = 1;
        lv_i = 0;
        for ( ; ( (auto6B257B32_ai >= 0 && lv_i <= auto6B257B32_ae) || (auto6B257B32_ai <= 0 && lv_i >= auto6B257B32_ae) ) ; lv_i += auto6B257B32_ai ) {
            if ((UnitGetType(EventUnit()) == gv_alertProductionIdleUnitTypes[lv_i])) {
                TimerStart(gv_alertProductionIdleBuildingTimers[lv_i], gv_alertProductionIdleThreshold, false, c_timeGame);
            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProductionIdleAboveThresholdStartTimer_Init () {
    gt_ProductionIdleAboveThresholdStartTimer = TriggerCreate("gt_ProductionIdleAboveThresholdStartTimer_Func");
    TriggerAddEventUnitTrainProgress(gt_ProductionIdleAboveThresholdStartTimer, null, c_unitProgressStageComplete);
    TriggerAddEventUnitTrainProgress(gt_ProductionIdleAboveThresholdStartTimer, null, c_unitProgressStageCancel);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdStartTimer, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdStartTimer, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdStartTimer, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdStartTimer, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdStartTimer, null, AbilityCommand("BarracksAddOns", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdStartTimer, null, AbilityCommand("BarracksAddOns", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdStartTimer, null, AbilityCommand("BarracksAddOns", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdStartTimer, null, AbilityCommand("BarracksAddOns", 1), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdStartTimer, null, AbilityCommand("FactoryAddOns", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdStartTimer, null, AbilityCommand("FactoryAddOns", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdStartTimer, null, AbilityCommand("FactoryAddOns", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdStartTimer, null, AbilityCommand("FactoryAddOns", 1), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdStartTimer, null, AbilityCommand("StarportAddOns", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdStartTimer, null, AbilityCommand("StarportAddOns", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdStartTimer, null, AbilityCommand("StarportAddOns", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdStartTimer, null, AbilityCommand("StarportAddOns", 1), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production Idle Above Threshold - Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_ProductionIdleAboveThresholdTimerExpires_Func (bool testConds, bool runActions) {
    int auto505100F0_ae;
    int auto505100F0_ai;

    // Variable Declarations
    string lv_currentUnitType;
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) <= 200) && (gv_alertProductionIdleCheckEnabled == true) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto505100F0_ae = gv_alertProductionIdleNumProductionTypes;
    auto505100F0_ai = 1;
    lv_i = 0;
    for ( ; ( (auto505100F0_ai >= 0 && lv_i <= auto505100F0_ae) || (auto505100F0_ai <= 0 && lv_i >= auto505100F0_ae) ) ; lv_i += auto505100F0_ai ) {
        if (((EventTimer() == gv_alertProductionIdleBuildingTimers[lv_i]) || (EventTimer() == gv_alertProductionIdleCooldownTimers[lv_i]))) {
            lv_currentUnitType = gv_alertProductionIdleUnitTypes[lv_i];
            TextExpressionSetToken("Param/Expression/FFDFB39E", "A", UnitTypeGetName(lv_currentUnitType));
            UIAlert("ProductionIdleTooLong", 1, TextExpressionAssemble("Param/Expression/FFDFB39E"), gf_GetIconForBuildingType(lv_currentUnitType));
            SoundPlay(SoundLink("Alert_UniObjectiveCompleted", -1), PlayerGroupAll(), 50.0, 0.0);
            if ((gf_IsUnitTypeTrainingQueueEmpty(lv_currentUnitType) == true)) {
                TimerStart(gv_alertProductionIdleCooldownTimers[lv_i], gv_alertCooldownSeconds, false, c_timeGame);
            }
            else {
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProductionIdleAboveThresholdTimerExpires_Init () {
    gt_ProductionIdleAboveThresholdTimerExpires = TriggerCreate("gt_ProductionIdleAboveThresholdTimerExpires_Func");
    TriggerAddEventTimer(gt_ProductionIdleAboveThresholdTimerExpires, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production Idle Above Threshold - New Production Starts
//--------------------------------------------------------------------------------------------------
bool gt_ProductionIdleAboveThresholdNewProductionStarts_Func (bool testConds, bool runActions) {
    int autoE0E17448_ae;
    int autoE0E17448_ai;

    // Variable Declarations
    string lv_triggeringUnitType;
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Egg") || (UnitGetType(EventUnit()) == "Larva") || (UnitGetType(EventUnit()) == "CommandCenter") || (UnitGetType(EventUnit()) == "OrbitalCommand") || (UnitGetType(EventUnit()) == "PlanetaryFortress") || (UnitGetType(EventUnit()) == "Barracks") || (UnitGetType(EventUnit()) == "Factory") || (UnitGetType(EventUnit()) == "Starport") || (UnitGetType(EventUnit()) == "Nexus") || (UnitGetType(EventUnit()) == "Gateway") || (UnitGetType(EventUnit()) == "RoboticsFacility") || (UnitGetType(EventUnit()) == "Stargate")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Egg")) {
        lv_triggeringUnitType = "Larva";
    }
    else {
        lv_triggeringUnitType = UnitGetType(EventUnit());
    }
    autoE0E17448_ae = gv_alertProductionIdleNumProductionTypes;
    autoE0E17448_ai = 1;
    lv_i = 0;
    for ( ; ( (autoE0E17448_ai >= 0 && lv_i <= autoE0E17448_ae) || (autoE0E17448_ai <= 0 && lv_i >= autoE0E17448_ae) ) ; lv_i += autoE0E17448_ai ) {
        if ((lv_triggeringUnitType == gv_alertProductionIdleUnitTypes[lv_i])) {
            TimerRestart(gv_alertProductionIdleBuildingTimers[lv_i]);
            TimerPause(gv_alertProductionIdleBuildingTimers[lv_i], true);
            TimerRestart(gv_alertProductionIdleCooldownTimers[lv_i]);
            TimerPause(gv_alertProductionIdleCooldownTimers[lv_i], true);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProductionIdleAboveThresholdNewProductionStarts_Init () {
    gt_ProductionIdleAboveThresholdNewProductionStarts = TriggerCreate("gt_ProductionIdleAboveThresholdNewProductionStarts_Func");
    TriggerAddEventUnitTrainProgress(gt_ProductionIdleAboveThresholdNewProductionStarts, null, c_unitProgressStageStart);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionStarts, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionStarts, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionStarts, null, AbilityCommand("BarracksAddOns", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionStarts, null, AbilityCommand("BarracksAddOns", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionStarts, null, AbilityCommand("FactoryAddOns", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionStarts, null, AbilityCommand("FactoryAddOns", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionStarts, null, AbilityCommand("StarportAddOns", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionStarts, null, AbilityCommand("StarportAddOns", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Build
//--------------------------------------------------------------------------------------------------
bool gt_StartBuild_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_startButton[0]) || (EventDialogControl() == gv_startButton[1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_benchmarkDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_alertMenuDialog, PlayerGroupAll(), false);
    gf_SaveMatchupBenchmarks(gf_GetCurrentlySelectedMatchupasBankSectionKey());
    gf_SaveAlertConfigurations();
    gf_ResetGameState();
    gf_ShowBenchmarkSupplyObjectives();
    gf_InitializeBenchmarkBuildOrderObjectives();
    TimerStart(gv_buildTimer, gv_onehourinsecondsof, false, c_timeGame);
    gf_StartBenchmarkTimers();
    gf_UnpauseGame();
    CameraPan(1, PlayerStartLocation(1), 0.5, -1, 5.0, true);
    CinematicFade(true, 0.5, c_fadeStyleSquareRoot, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBuild_Init () {
    gt_StartBuild = TriggerCreate("gt_StartBuild_Func");
    TriggerAddEventDialogControl(gt_StartBuild, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Build
//--------------------------------------------------------------------------------------------------
bool gt_ResetBuild_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_paused == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/B010EEE3"));
    CinematicFade(false, 0.5, c_fadeStyleSquareRoot, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(0.5, c_timeGame);
    gf_PauseGame();
    gf_ResetGameState();
    Wait(0.5, c_timeGame);
    gf_UnpauseGame();
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    CameraPan(1, PlayerStartLocation(1), 0.5, -1, 5.0, true);
    CinematicFade(true, 0.5, c_fadeStyleSquareRoot, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetBuild_Init () {
    gt_ResetBuild = TriggerCreate("gt_ResetBuild_Func");
    TriggerAddEventChatMessage(gt_ResetBuild, c_playerAny, "-r", true);
    TriggerAddEventChatMessage(gt_ResetBuild, c_playerAny, "-reset", true);
    TriggerAddEventKeyPressed(gt_ResetBuild, 1, c_keyR, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Stats and Resume Build from Ok Button
//--------------------------------------------------------------------------------------------------
bool gt_CloseStatsandResumeBuildfromOkButton_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_statsOkButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CloseStatsDialogandUnpause();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseStatsandResumeBuildfromOkButton_Init () {
    gt_CloseStatsandResumeBuildfromOkButton = TriggerCreate("gt_CloseStatsandResumeBuildfromOkButton_Func");
    TriggerAddEventDialogControl(gt_CloseStatsandResumeBuildfromOkButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Stats and Resume Build from Hotkey
//--------------------------------------------------------------------------------------------------
bool gt_CloseStatsandResumeBuildfromHotkey_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_statsDialogOpen == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CloseStatsDialogandUnpause();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseStatsandResumeBuildfromHotkey_Init () {
    gt_CloseStatsandResumeBuildfromHotkey = TriggerCreate("gt_CloseStatsandResumeBuildfromHotkey_Func");
    TriggerAddEventKeyPressed(gt_CloseStatsandResumeBuildfromHotkey, 1, c_keyZ, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Help and Resume Build from Ok Button
//--------------------------------------------------------------------------------------------------
bool gt_CloseHelpandResumeBuildfromOkButton_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_helpOkButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CloseHelpDialogandUnpause();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseHelpandResumeBuildfromOkButton_Init () {
    gt_CloseHelpandResumeBuildfromOkButton = TriggerCreate("gt_CloseHelpandResumeBuildfromOkButton_Func");
    TriggerAddEventDialogControl(gt_CloseHelpandResumeBuildfromOkButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Help and Resume Build from Hotkey
//--------------------------------------------------------------------------------------------------
bool gt_CloseHelpandResumeBuildfromHotkey_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_helpDialogOpen == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CloseHelpDialogandUnpause();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseHelpandResumeBuildfromHotkey_Init () {
    gt_CloseHelpandResumeBuildfromHotkey = TriggerCreate("gt_CloseHelpandResumeBuildfromHotkey_Func");
    TriggerAddEventKeyPressed(gt_CloseHelpandResumeBuildfromHotkey, 1, c_keyX, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Build at Max Supply
//--------------------------------------------------------------------------------------------------
bool gt_EndBuildatMaxSupply_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((DialogControlGetSelectedItem(gv_endBuildPulldown, 1) == 1) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) >= 200) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_benchmarkMaxTimeObjective) == c_objectiveStateActive)) {
        ObjectiveSetState(gv_benchmarkMaxTimeObjective, c_objectiveStateCompleted);
        TextExpressionSetToken("Param/Expression/739A89F7", "A", ObjectiveGetName(gv_benchmarkMaxTimeObjective));
        TextExpressionSetToken("Param/Expression/739A89F7", "B", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetElapsed(gv_buildTimer))));
        ObjectiveSetName(gv_benchmarkMaxTimeObjective, TextExpressionAssemble("Param/Expression/739A89F7"));
    }
    else {
    }
    TriggerExecute(gt_OpenPostBuildReportDialog, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndBuildatMaxSupply_Init () {
    gt_EndBuildatMaxSupply = TriggerCreate("gt_EndBuildatMaxSupply_Func");
    TriggerAddEventUnitCreated(gt_EndBuildatMaxSupply, null, null, null);
    TriggerAddEventTimePeriodic(gt_EndBuildatMaxSupply, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Build at Specified Game Time
//--------------------------------------------------------------------------------------------------
bool gt_EndBuildatSpecifiedGameTime_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((DialogControlGetSelectedItem(gv_endBuildPulldown, 1) == 2) && (TimerGetElapsed(gv_buildTimer) >= (60*gv_benchmarkEndBuildatMinutes+gv_benchmarkEndBuildatSeconds)) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_PauseGame();
    TriggerExecute(gt_OpenPostBuildReportDialog, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndBuildatSpecifiedGameTime_Init () {
    gt_EndBuildatSpecifiedGameTime = TriggerCreate("gt_EndBuildatSpecifiedGameTime_Func");
    TriggerAddEventTimePeriodic(gt_EndBuildatSpecifiedGameTime, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Build From Hotkey
//--------------------------------------------------------------------------------------------------
bool gt_EndBuildFromHotkey_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PauseGame();
    TriggerExecute(gt_OpenPostBuildReportDialog, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndBuildFromHotkey_Init () {
    gt_EndBuildFromHotkey = TriggerCreate("gt_EndBuildFromHotkey_Func");
    TriggerAddEventKeyPressed(gt_EndBuildFromHotkey, c_playerAny, c_keyNumPad0, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mute/Unmute Alerts
//--------------------------------------------------------------------------------------------------
bool gt_MuteUnmuteAlerts_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_muteAlertsEnabled == false)) {
        gv_muteAlertsEnabled = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/053D400F"));
    }
    else {
        gv_muteAlertsEnabled = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5BC648F7"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MuteUnmuteAlerts_Init () {
    gt_MuteUnmuteAlerts = TriggerCreate("gt_MuteUnmuteAlerts_Func");
    TriggerAddEventChatMessage(gt_MuteUnmuteAlerts, c_playerAny, "-a", true);
    TriggerAddEventChatMessage(gt_MuteUnmuteAlerts, c_playerAny, "-alerts", true);
    TriggerAddEventKeyPressed(gt_MuteUnmuteAlerts, 1, c_keyA, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Mineral Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableMineralAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_mineralAboveThresholdAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alertMineralsCheckEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_alertMineralsCheckEnabled, 0, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableMineralAlert_Init () {
    gt_EnableDisableMineralAlert = TriggerCreate("gt_EnableDisableMineralAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableMineralAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Gas Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableGasAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_gasAboveThresholdAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alertGasCheckEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_alertGasCheckEnabled, 1, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableGasAlert_Init () {
    gt_EnableDisableGasAlert = TriggerCreate("gt_EnableDisableGasAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableGasAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Supply Block Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableSupplyBlockAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_supplyBlockImminentAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alertSupplyBlockCheckEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_alertSupplyBlockCheckEnabled, 2, 4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableSupplyBlockAlert_Init () {
    gt_EnableDisableSupplyBlockAlert = TriggerCreate("gt_EnableDisableSupplyBlockAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableSupplyBlockAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Macro Energy Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableMacroEnergyAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_macroEnergyAboveThresholdAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alertMacroEnergyCheckEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_alertMacroEnergyCheckEnabled, 3, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableMacroEnergyAlert_Init () {
    gt_EnableDisableMacroEnergyAlert = TriggerCreate("gt_EnableDisableMacroEnergyAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableMacroEnergyAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Upgrade Gap Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableUpgradeGapAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_upgradeGapAboveThresholdAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alertUpgradeGapCheckEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_alertUpgradeGapCheckEnabled, 4, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableUpgradeGapAlert_Init () {
    gt_EnableDisableUpgradeGapAlert = TriggerCreate("gt_EnableDisableUpgradeGapAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableUpgradeGapAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Production Idle Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableProductionIdleAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_productionIdleAboveThresholdAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alertProductionIdleCheckEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_alertProductionIdleCheckEnabled, 5, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableProductionIdleAlert_Init () {
    gt_EnableDisableProductionIdleAlert = TriggerCreate("gt_EnableDisableProductionIdleAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableProductionIdleAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Benchmark Menu
//--------------------------------------------------------------------------------------------------
bool gt_SelectBenchmarkMenu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_benchmarksMenuButton[0]) || (EventDialogControl() == gv_benchmarksMenuButton[1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SelectBenchmarkMenu();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectBenchmarkMenu_Init () {
    gt_SelectBenchmarkMenu = TriggerCreate("gt_SelectBenchmarkMenu_Func");
    TriggerAddEventDialogControl(gt_SelectBenchmarkMenu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Help Dialog
//--------------------------------------------------------------------------------------------------
bool gt_OpenHelpDialog_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_helpDialogOpen == false) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_PauseGame();
    DialogSetVisible(gv_statsDialog, PlayerGroupAll(), false);
    gv_statsDialogOpen = false;
    DialogSetVisible(gv_benchmarkDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_helpDialog, PlayerGroupAll(), true);
    gv_helpDialogOpen = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenHelpDialog_Init () {
    gt_OpenHelpDialog = TriggerCreate("gt_OpenHelpDialog_Func");
    TriggerAddEventChatMessage(gt_OpenHelpDialog, c_playerAny, "-h", true);
    TriggerAddEventChatMessage(gt_OpenHelpDialog, c_playerAny, "-help", true);
    TriggerAddEventKeyPressed(gt_OpenHelpDialog, 1, c_keyX, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Matchup
//--------------------------------------------------------------------------------------------------
bool gt_SelectMatchup_Func (bool testConds, bool runActions) {
    int auto31D15147_ae;
    int auto31D15147_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_matchupSelectionButtons[0]) || (EventDialogControl() == gv_matchupSelectionButtons[1]) || (EventDialogControl() == gv_matchupSelectionButtons[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SaveMatchupBenchmarks(gv_benchmarkMatchupSectionKeys[gv_currentlySelectedMatchupIndex]);
    libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupAll());
    auto31D15147_ae = 2;
    auto31D15147_ai = 1;
    lv_i = 0;
    for ( ; ( (auto31D15147_ai >= 0 && lv_i <= auto31D15147_ae) || (auto31D15147_ai <= 0 && lv_i >= auto31D15147_ae) ) ; lv_i += auto31D15147_ai ) {
        if ((gv_matchupSelectionButtons[lv_i] != EventDialogControl())) {
            libNtve_gf_SetDialogItemToggled(gv_matchupSelectionButtons[lv_i], false, PlayerGroupAll());
        }
        else {
            gf_LoadMatchupBenchmarks(gv_benchmarkMatchupSectionKeys[lv_i]);
            gv_currentlySelectedMatchupIndex = lv_i;
            gv_currentlySelectedMatchupButton = gv_matchupSelectionButtons[lv_i];
        }
    }
    if ((gf_DoesSavedBuildOrderExistForCurrentMatchup() == true)) {
        gf_EnablePracticeAgainstBenchmarkBuildOrderOptions();
    }
    else {
        gf_DisablePracticeAgainstBenchmarkBuildOrderOption();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectMatchup_Init () {
    gt_SelectMatchup = TriggerCreate("gt_SelectMatchup_Func");
    TriggerAddEventDialogControl(gt_SelectMatchup, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Main Menu
//--------------------------------------------------------------------------------------------------
bool gt_OpenMainMenu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_OpenMainMenu();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenMainMenu_Init () {
    gt_OpenMainMenu = TriggerCreate("gt_OpenMainMenu_Func");
    TriggerAddEventChatMessage(gt_OpenMainMenu, c_playerAny, "-m", true);
    TriggerAddEventChatMessage(gt_OpenMainMenu, c_playerAny, "-menu", true);
    TriggerAddEventKeyPressed(gt_OpenMainMenu, 1, c_keyC, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display End Build Game Time Edits
//--------------------------------------------------------------------------------------------------
bool gt_DisplayEndBuildGameTimeEdits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_endBuildPulldown) && (DialogControlGetSelectedItem(EventDialogControl(), 1) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_endBuildMinutesEditBox, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_endBuildMinutesLabel, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_endBuildSecondsEditBox, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_endBuildSecondsLabel, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplayEndBuildGameTimeEdits_Init () {
    gt_DisplayEndBuildGameTimeEdits = TriggerCreate("gt_DisplayEndBuildGameTimeEdits_Func");
    TriggerAddEventDialogControl(gt_DisplayEndBuildGameTimeEdits, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide End Build Game Time Edits
//--------------------------------------------------------------------------------------------------
bool gt_HideEndBuildGameTimeEdits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_endBuildPulldown) && (DialogControlGetSelectedItem(EventDialogControl(), 1) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_endBuildMinutesEditBox, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_endBuildMinutesLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_endBuildSecondsEditBox, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_endBuildSecondsLabel, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HideEndBuildGameTimeEdits_Init () {
    gt_HideEndBuildGameTimeEdits = TriggerCreate("gt_HideEndBuildGameTimeEdits_Func");
    TriggerAddEventDialogControl(gt_HideEndBuildGameTimeEdits, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Practice Against Saved Build
//--------------------------------------------------------------------------------------------------
bool gt_TogglePracticeAgainstSavedBuild_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_practiceAgainstSavedBuildOrderCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_practiceAgainstBenchmarkBuildOrder = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EvaluateAndDisableEnableBuildHintsOptions();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TogglePracticeAgainstSavedBuild_Init () {
    gt_TogglePracticeAgainstSavedBuild = TriggerCreate("gt_TogglePracticeAgainstSavedBuild_Func");
    TriggerAddEventDialogControl(gt_TogglePracticeAgainstSavedBuild, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Alert Menu
//--------------------------------------------------------------------------------------------------
bool gt_SelectAlertMenu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_alertMenuButton[0]) || (EventDialogControl() == gv_alertMenuButton[1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SelectAlertMenu();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectAlertMenu_Init () {
    gt_SelectAlertMenu = TriggerCreate("gt_SelectAlertMenu_Func");
    TriggerAddEventDialogControl(gt_SelectAlertMenu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Post-Build Report Dialog
//--------------------------------------------------------------------------------------------------
bool gt_OpenPostBuildReportDialog_Func (bool testConds, bool runActions) {
    unitgroup auto8DF230F2_g;
    int auto8DF230F2_u;

    // Variable Declarations
    unit lv_currentUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    gf_PauseGame();
    gf_UpdatePostBuildReportDialogValues();
    DialogSetVisible(gv_postBuildReportDialog, PlayerGroupAll(), true);
    libNtve_gf_SwooshCamera(1, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 0.0), (CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)+10), PlayerStartLocation(1), 10.0);
    auto8DF230F2_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto8DF230F2_u = 1;
    for ( ; auto8DF230F2_u <= UnitGroupCount(auto8DF230F2_g, c_unitCountAll) ; auto8DF230F2_u += BoolToInt(lv_currentUnit == UnitGroupUnit(auto8DF230F2_g, auto8DF230F2_u)) ) {
        lv_currentUnit = UnitGroupUnit(auto8DF230F2_g, auto8DF230F2_u);
        Wait(0.2, c_timeGame);
        UnitKill(lv_currentUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenPostBuildReportDialog_Init () {
    gt_OpenPostBuildReportDialog = TriggerCreate("gt_OpenPostBuildReportDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save Benchmark Build Stats
//--------------------------------------------------------------------------------------------------
bool gt_SaveBenchmarkBuildStats_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_postBuildReportSaveBuildButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SaveCurrentStatsasNewBenchmark();
    gf_UpdatePostBuildReportDialogValues();
    gf_SaveBenchmarkBuildOrder();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SaveBenchmarkBuildStats_Init () {
    gt_SaveBenchmarkBuildStats = TriggerCreate("gt_SaveBenchmarkBuildStats_Func");
    TriggerAddEventDialogControl(gt_SaveBenchmarkBuildStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Benchmark Build Stats
//--------------------------------------------------------------------------------------------------
bool gt_ResetBenchmarkBuildStats_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_postBuildReportResetBuildButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetBenchmarkBuildStatistics();
    gf_UpdatePostBuildReportDialogValues();
    gf_ClearBenchmarkBuildOrder();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetBenchmarkBuildStats_Init () {
    gt_ResetBenchmarkBuildStats = TriggerCreate("gt_ResetBenchmarkBuildStats_Func");
    TriggerAddEventDialogControl(gt_ResetBenchmarkBuildStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return to Main Menu from Report
//--------------------------------------------------------------------------------------------------
bool gt_ReturntoMainMenufromReport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_backToMenuButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_OpenMainMenu();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturntoMainMenufromReport_Init () {
    gt_ReturntoMainMenufromReport = TriggerCreate("gt_ReturntoMainMenufromReport_Func");
    TriggerAddEventDialogControl(gt_ReturntoMainMenufromReport, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Stats Dialog
//--------------------------------------------------------------------------------------------------
bool gt_OpenStatsDialog_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_statsDialogOpen == false) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_PauseGame();
    DialogSetVisible(gv_benchmarkDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_helpDialog, PlayerGroupAll(), false);
    gv_helpDialogOpen = false;
    gf_RefreshStatsDialog();
    DialogSetVisible(gv_statsDialog, PlayerGroupAll(), true);
    gv_statsDialogOpen = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenStatsDialog_Init () {
    gt_OpenStatsDialog = TriggerCreate("gt_OpenStatsDialog_Func");
    TriggerAddEventChatMessage(gt_OpenStatsDialog, c_playerAny, "-s", true);
    TriggerAddEventChatMessage(gt_OpenStatsDialog, c_playerAny, "-stats", true);
    TriggerAddEventKeyPressed(gt_OpenStatsDialog, 1, c_keyZ, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetSpeedValue(c_gameSpeedFaster);
    CameraSave(1);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_InitializeGameDefaults();
    gf_InitializeDialogDefaults();
    gf_InitializeBankDefaults();
    gf_InitializeMapResourcesUnitGroup();
    MeleeInitUnits();
    gf_PauseGame();
    gf_InitializeBank();
    gf_CreateBenchmarkMenuDialog();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gf_CreateAlertMenuDialog();
    gf_CreateStatsDialog();
    gf_CreateHelpDialog();
    gf_CreatePostBuildReportDialog();
    gf_CreateScreenButtons();
    TimerWindowCreate(gv_buildTimer, StringExternal("Param/Value/EAED3202"), true, true);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorTopRight, 0, 0);
    gf_LoadMatchupBenchmarks(gv_vZergMatchupSectionKey);
    gf_LoadAlertConfigurations();
    gf_CreateHiddenBenchmarkSupplyObjectives();
    gv_debugMapMechanics = false;
    gv_debugBuildOrderTracking = true;
    gv_debugAlerts = false;
    gv_debugBank = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInitialization_Init () {
    gt_MapInitialization = TriggerCreate("gt_MapInitialization_Func");
    TriggerAddEventMapInit(gt_MapInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Game
//--------------------------------------------------------------------------------------------------
bool gt_EndGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    GameOver(1, c_gameOverVictory, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndGame_Init () {
    gt_EndGame = TriggerCreate("gt_EndGame_Func");
    TriggerAddEventChatMessage(gt_EndGame, c_playerAny, "gg", false);
    TriggerAddEventKeyPressed(gt_EndGame, 1, c_keyW, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Benchmark 1 Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_Benchmark1TimerExpires_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) > gv_benchmarkSupplyValues[0])) {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[0], c_objectiveStateCompleted);
    }
    else {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[0], c_objectiveStateFailed);
    }
    TextExpressionSetToken("Param/Expression/B53438FA", "A", ObjectiveGetName(gv_benchmarkSupplyObjectives[0]));
    TextExpressionSetToken("Param/Expression/B53438FA", "B", IntToText(PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)));
    ObjectiveSetName(gv_benchmarkSupplyObjectives[0], TextExpressionAssemble("Param/Expression/B53438FA"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Benchmark1TimerExpires_Init () {
    gt_Benchmark1TimerExpires = TriggerCreate("gt_Benchmark1TimerExpires_Func");
    TriggerAddEventTimer(gt_Benchmark1TimerExpires, gv_benchmark1Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Benchmark 2 Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_Benchmark2TimerExpires_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) > gv_benchmarkSupplyValues[1])) {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[1], c_objectiveStateCompleted);
    }
    else {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[1], c_objectiveStateFailed);
    }
    TextExpressionSetToken("Param/Expression/E571E892", "A", ObjectiveGetName(gv_benchmarkSupplyObjectives[1]));
    TextExpressionSetToken("Param/Expression/E571E892", "B", IntToText(PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)));
    ObjectiveSetName(gv_benchmarkSupplyObjectives[1], TextExpressionAssemble("Param/Expression/E571E892"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Benchmark2TimerExpires_Init () {
    gt_Benchmark2TimerExpires = TriggerCreate("gt_Benchmark2TimerExpires_Func");
    TriggerAddEventTimer(gt_Benchmark2TimerExpires, gv_benchmark2Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Benchmark 3 Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_Benchmark3TimerExpires_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) > gv_benchmarkSupplyValues[2])) {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[2], c_objectiveStateCompleted);
    }
    else {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[2], c_objectiveStateFailed);
    }
    TextExpressionSetToken("Param/Expression/D3C9632E", "A", ObjectiveGetName(gv_benchmarkSupplyObjectives[2]));
    TextExpressionSetToken("Param/Expression/D3C9632E", "B", IntToText(PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)));
    ObjectiveSetName(gv_benchmarkSupplyObjectives[2], TextExpressionAssemble("Param/Expression/D3C9632E"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Benchmark3TimerExpires_Init () {
    gt_Benchmark3TimerExpires = TriggerCreate("gt_Benchmark3TimerExpires_Func");
    TriggerAddEventTimer(gt_Benchmark3TimerExpires, gv_benchmark3Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MaxTime Timer Elapsed
//--------------------------------------------------------------------------------------------------
bool gt_MaxTimeTimerElapsed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) == 200)) {
        ObjectiveSetState(gv_benchmarkMaxTimeObjective, c_objectiveStateCompleted);
    }
    else {
        ObjectiveSetState(gv_benchmarkMaxTimeObjective, c_objectiveStateFailed);
    }
    TextExpressionSetToken("Param/Expression/A9D9AADE", "A", ObjectiveGetName(gv_benchmarkMaxTimeObjective));
    TextExpressionSetToken("Param/Expression/A9D9AADE", "B", IntToText(PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)));
    ObjectiveSetName(gv_benchmarkMaxTimeObjective, TextExpressionAssemble("Param/Expression/A9D9AADE"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MaxTimeTimerElapsed_Init () {
    gt_MaxTimeTimerElapsed = TriggerCreate("gt_MaxTimeTimerElapsed_Func");
    TriggerAddEventTimer(gt_MaxTimeTimerElapsed, gv_benchmarkMaxTimeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: On Upgrade Start - Update Current Build Order
//--------------------------------------------------------------------------------------------------
bool gt_OnUpgradeStartUpdateCurrentBuildOrder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gf_IsUpgradeTypeValidForBuildOrder(libNtve_gf_TriggeringProgressUpgrade()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugBuildOrderTracking == true)) {
        TextExpressionSetToken("Param/Expression/4B44ADEB", "A", StringToText((libNtve_gf_TriggeringProgressUpgrade())));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/4B44ADEB"));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnUpgradeStartUpdateCurrentBuildOrder_Init () {
    gt_OnUpgradeStartUpdateCurrentBuildOrder = TriggerCreate("gt_OnUpgradeStartUpdateCurrentBuildOrder_Func");
    TriggerAddEventUnitResearchProgress(gt_OnUpgradeStartUpdateCurrentBuildOrder, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: On Unit Start - Update Current Build Order
//--------------------------------------------------------------------------------------------------
bool gt_OnUnitStartUpdateCurrentBuildOrder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gf_IsUnitTypeValidForBuildOrder(libNtve_gf_TriggeringProgressUnitType()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugBuildOrderTracking == true)) {
        TextExpressionSetToken("Param/Expression/776434DE", "A", UnitTypeGetName(libNtve_gf_TriggeringProgressUnitType()));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/776434DE"));
    }
    else {
    }
    if ((((TimerGetElapsed(gv_buildTimer)-gv_lastCreatedUnitTimestamp) <= 15.0) && (UnitGetType(EventUnitProgressUnit()) == gv_lastCreatedBuildOrderUnitType))) {
        if ((gv_debugBuildOrderTracking == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/50D360E2"));
            TextExpressionSetToken("Param/Expression/2A0E9DD3", "A", gf_GetCurrentBuildOrderStepText((gv_currentBuildOrderStepCursor-1)));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/2A0E9DD3"));
        }
        else {
        }
        gv_currentBuildOrderSteps[(gv_currentBuildOrderStepCursor-1)].lv_numUnits += 1;
    }
    else {
        if (((gv_currentBuildOrderStepCursor) < gv_maxCurrentBuildOrderStepsTracked)) {
            gf_AddUnitBuildOrderStep(libNtve_gf_TriggeringProgressUnitType());
            if (((gv_totalNumBenchmarkBuildOrderSteps > 0) && (gv_practiceAgainstBenchmarkBuildOrder == true) && ((gv_currentBuildOrderStepCursor) < (gv_totalNumBenchmarkBuildOrderSteps+gv_numCorrectedBenchmarkBuildOrderSteps)))) {
                if ((gv_debugBuildOrderTracking == true)) {
                    TextExpressionSetToken("Param/Expression/F78FD77D", "A", UnitTypeGetName(libNtve_gf_TriggeringProgressUnitType()));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/F78FD77D"));
                }
                else {
                }
                gf_EvaluateBenchmarkBuildOrderStepObjective(libNtve_gf_TriggeringProgressUnitType());
            }
            else {
                if ((gv_debugBuildOrderTracking == true)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E10856B1"));
                }
                else {
                }
            }
            gv_currentBuildOrderStepCursor += 1;
        }
        else {
            if ((gv_debugBuildOrderTracking == true)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/15C40397"));
            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnUnitStartUpdateCurrentBuildOrder_Init () {
    gt_OnUnitStartUpdateCurrentBuildOrder = TriggerCreate("gt_OnUnitStartUpdateCurrentBuildOrder_Func");
    TriggerAddEventUnitTrainProgress(gt_OnUnitStartUpdateCurrentBuildOrder, null, c_unitProgressStageStart);
    TriggerAddEventUnitConstructProgress(gt_OnUnitStartUpdateCurrentBuildOrder, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Gas Taken
//--------------------------------------------------------------------------------------------------
bool gt_UpdateGasTaken_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Assimilator") || (UnitGetType(EventUnit()) == "Extractor") || (UnitGetType(EventUnit()) == "Refinery")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gasTaken = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateGasTaken_Init () {
    gt_UpdateGasTaken = TriggerCreate("gt_UpdateGasTaken_Func");
    TriggerAddEventUnitConstructProgress(gt_UpdateGasTaken, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Production Idle Time
//--------------------------------------------------------------------------------------------------
bool gt_UpdateProductionIdleTime_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gf_IsProductionIdle() == true) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_timeProductionIdleThisBuild += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateProductionIdleTime_Init () {
    gt_UpdateProductionIdleTime = TriggerCreate("gt_UpdateProductionIdleTime_Func");
    TriggerAddEventTimePeriodic(gt_UpdateProductionIdleTime, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Time Supply Blocked
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTimeSupplyBlocked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((PlayerScoreValueGetAsInt(1, "FoodUsed") == PlayerScoreValueGetAsInt(1, "FoodMade")) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_timeSupplyBlockedThisBuild += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateTimeSupplyBlocked_Init () {
    gt_UpdateTimeSupplyBlocked = TriggerCreate("gt_UpdateTimeSupplyBlocked_Func");
    TriggerAddEventTimePeriodic(gt_UpdateTimeSupplyBlocked, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Minerals Collected This Build
//--------------------------------------------------------------------------------------------------
bool gt_UpdateMineralsCollectedThisBuild_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayerPropertyChangeInt() > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_totalMineralsCollected += EventPlayerPropertyChangeInt();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateMineralsCollectedThisBuild_Init () {
    gt_UpdateMineralsCollectedThisBuild = TriggerCreate("gt_UpdateMineralsCollectedThisBuild_Func");
    TriggerAddEventPlayerPropChange(gt_UpdateMineralsCollectedThisBuild, 1, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Gas Collected This Build
//--------------------------------------------------------------------------------------------------
bool gt_UpdateGasCollectedThisBuild_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayerPropertyChangeInt() > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_totalGasCollected += EventPlayerPropertyChangeInt();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateGasCollectedThisBuild_Init () {
    gt_UpdateGasCollectedThisBuild = TriggerCreate("gt_UpdateGasCollectedThisBuild_Func");
    TriggerAddEventPlayerPropChange(gt_UpdateGasCollectedThisBuild, 1, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Average Unspent Minerals
//--------------------------------------------------------------------------------------------------
bool gt_UpdateAverageUnspentMinerals_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_paused == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_cumulativeUnspentMinerals += PlayerScoreValueGetAsInt(1, "MineralsCurrent");
    gv_totalMineralSamplesThisBuild += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateAverageUnspentMinerals_Init () {
    gt_UpdateAverageUnspentMinerals = TriggerCreate("gt_UpdateAverageUnspentMinerals_Func");
    TriggerAddEventTimePeriodic(gt_UpdateAverageUnspentMinerals, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Average Unspent Gas
//--------------------------------------------------------------------------------------------------
bool gt_UpdateAverageUnspentGas_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_gasTaken == true) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_cumulativeUnspentGas += PlayerScoreValueGetAsInt(1, "VespeneCurrent");
    gv_totalGasSamplesThisBuild += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateAverageUnspentGas_Init () {
    gt_UpdateAverageUnspentGas = TriggerCreate("gt_UpdateAverageUnspentGas_Func");
    TriggerAddEventTimePeriodic(gt_UpdateAverageUnspentGas, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Cumulative APM
//--------------------------------------------------------------------------------------------------
bool gt_UpdateCumulativeAPM_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_paused == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_cumulativeAPM += PlayerScoreValueGetAsInt(1, "APM");
    gv_totalAPMSamplesThisBuild += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateCumulativeAPM_Init () {
    gt_UpdateCumulativeAPM = TriggerCreate("gt_UpdateCumulativeAPM_Func");
    TriggerAddEventTimePeriodic(gt_UpdateCumulativeAPM, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Total Workers
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTotalWorkers_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnitCreatedUnit()) == 1) && ((UnitGetType(EventUnitCreatedUnit()) == "Drone") || (UnitGetType(EventUnitCreatedUnit()) == "Probe") || (UnitGetType(EventUnitCreatedUnit()) == "SCV"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_workersCreated += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateTotalWorkers_Init () {
    gt_UpdateTotalWorkers = TriggerCreate("gt_UpdateTotalWorkers_Func");
    TriggerAddEventUnitCreated(gt_UpdateTotalWorkers, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Num Upgrades Researched
//--------------------------------------------------------------------------------------------------
bool gt_UpdateNumUpgradesResearched_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_totalNumberofUpgradesResearched += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateNumUpgradesResearched_Init () {
    gt_UpdateNumUpgradesResearched = TriggerCreate("gt_UpdateNumUpgradesResearched_Func");
    TriggerAddEventUnitResearchProgress(gt_UpdateNumUpgradesResearched, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord InProgress Fix
//--------------------------------------------------------------------------------------------------
bool gt_OverlordInProgressFix_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_morphingOverlords, EventUnit());
    gv_numMorphingOverlords += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordInProgressFix_Init () {
    gt_OverlordInProgressFix = TriggerCreate("gt_OverlordInProgressFix_Func");
    TriggerAddEventUnitAbility(gt_OverlordInProgressFix, null, AbilityCommand("LarvaTrain", 2), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Completed or Cancelled Fix
//--------------------------------------------------------------------------------------------------
bool gt_OverlordCompletedorCancelledFix_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_numMorphingOverlords -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordCompletedorCancelledFix_Init () {
    gt_OverlordCompletedorCancelledFix = TriggerCreate("gt_OverlordCompletedorCancelledFix_Func");
    TriggerAddEventUnitAbility(gt_OverlordCompletedorCancelledFix, null, AbilityCommand("LarvaTrain", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_OverlordCompletedorCancelledFix, null, AbilityCommand("LarvaTrain", 2), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Larva Spawn Fix
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryLarvaSpawnFix_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((GameGetMissionTime() > 1.0) && (UnitGroupCount(UnitGroup(null, 1, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0), c_unitCountAll) == 1) && (UnitGetType(EventUnit()) == "Hatchery")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "SpawnMutantLarvaApplySpawnBehavior3", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryLarvaSpawnFix_Init () {
    gt_HatcheryLarvaSpawnFix = TriggerCreate("gt_HatcheryLarvaSpawnFix_Func");
    TriggerAddEventUnitRegion(gt_HatcheryLarvaSpawnFix, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MineralsAboveThreshold_Init();
    gt_GasAboveThreshold_Init();
    gt_SupplyBlockImminent_Init();
    gt_RaceMacroEnergyAboveThreshold_Init();
    gt_UpgradeGapAboveThresholdStartTimer_Init();
    gt_UpgradeGapAboveThresholdTimerExpires_Init();
    gt_UpgradeGapAboveThresholdNewUpgradeStarts_Init();
    gt_ProductionIdleAboveThresholdStartTimer_Init();
    gt_ProductionIdleAboveThresholdTimerExpires_Init();
    gt_ProductionIdleAboveThresholdNewProductionStarts_Init();
    gt_StartBuild_Init();
    gt_ResetBuild_Init();
    gt_CloseStatsandResumeBuildfromOkButton_Init();
    gt_CloseStatsandResumeBuildfromHotkey_Init();
    gt_CloseHelpandResumeBuildfromOkButton_Init();
    gt_CloseHelpandResumeBuildfromHotkey_Init();
    gt_EndBuildatMaxSupply_Init();
    gt_EndBuildatSpecifiedGameTime_Init();
    gt_EndBuildFromHotkey_Init();
    gt_MuteUnmuteAlerts_Init();
    gt_EnableDisableMineralAlert_Init();
    gt_EnableDisableGasAlert_Init();
    gt_EnableDisableSupplyBlockAlert_Init();
    gt_EnableDisableMacroEnergyAlert_Init();
    gt_EnableDisableUpgradeGapAlert_Init();
    gt_EnableDisableProductionIdleAlert_Init();
    gt_SelectBenchmarkMenu_Init();
    gt_OpenHelpDialog_Init();
    gt_SelectMatchup_Init();
    gt_OpenMainMenu_Init();
    gt_DisplayEndBuildGameTimeEdits_Init();
    gt_HideEndBuildGameTimeEdits_Init();
    gt_TogglePracticeAgainstSavedBuild_Init();
    gt_SelectAlertMenu_Init();
    gt_OpenPostBuildReportDialog_Init();
    gt_SaveBenchmarkBuildStats_Init();
    gt_ResetBenchmarkBuildStats_Init();
    gt_ReturntoMainMenufromReport_Init();
    gt_OpenStatsDialog_Init();
    gt_MapInitialization_Init();
    gt_EndGame_Init();
    gt_Benchmark1TimerExpires_Init();
    gt_Benchmark2TimerExpires_Init();
    gt_Benchmark3TimerExpires_Init();
    gt_MaxTimeTimerElapsed_Init();
    gt_OnUpgradeStartUpdateCurrentBuildOrder_Init();
    gt_OnUnitStartUpdateCurrentBuildOrder_Init();
    gt_UpdateGasTaken_Init();
    gt_UpdateProductionIdleTime_Init();
    gt_UpdateTimeSupplyBlocked_Init();
    gt_UpdateMineralsCollectedThisBuild_Init();
    gt_UpdateGasCollectedThisBuild_Init();
    gt_UpdateAverageUnspentMinerals_Init();
    gt_UpdateAverageUnspentGas_Init();
    gt_UpdateCumulativeAPM_Init();
    gt_UpdateTotalWorkers_Init();
    gt_UpdateNumUpgradesResearched_Init();
    gt_OverlordInProgressFix_Init();
    gt_OverlordCompletedorCancelledFix_Init();
    gt_HatcheryLarvaSpawnFix_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
