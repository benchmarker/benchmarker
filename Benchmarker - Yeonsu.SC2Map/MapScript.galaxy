//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Benchmarker - Yeonsu [BETA]
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_BuildOrderStep {
    string lv_stepType;
    string lv_unitType;
    string lv_upgrade;
    int lv_amount;
    int lv_supply;
    int lv_elapsedSeconds;
    bool lv_cancelled;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_muteAlertsEnabled;
fixed gv_warningPingCooldownSeconds;
int gv_alertCooldownSeconds;
int gv_alertMineralsThreshold;
timer gv_alertMineralsCooldownTimer;
bool gv_alertMineralsCheckEnabled;
int gv_alertGasThreshold;
timer gv_alertGasCooldownTimer;
bool gv_alertGasCheckEnabled;
int gv_alertSupplyBlockStart;
bool gv_alertSupplyBlockCheckEnabled;
int gv_alertSupplyBlockWithinCapThreshold;
timer gv_alertSupplyBlockCooldownTimer;
int gv_alertSelectedMacroEnergyThreshold;
int gv_alertZergDefaultMacroEnergyThreshold;
int gv_alertTerranDefaultMacroEnergyThreshold;
int gv_alertProtossDefaultMacroEnergyThreshold;
bool gv_alertMacroEnergyCheckEnabled;
timer gv_alertMacroEnergyCooldownTimer;
bool gv_alertUpgradeGapCheckEnabled;
int gv_alertUpgradeGapThreshold;
int gv_alertUpgradeGapNumUpgrades;
timer[31] gv_alertUpgradeGapTimers;
timer[31] gv_alertUpgradeGapCooldownTimers;
string[31] gv_alertUpgradeGapUpgrades;
bool gv_productionIdleCheckEnabled;
int gv_productionIdleThreshold;
int gv_productionIdleNumProductionTypes;
timer[11] gv_productionIdleAlertTimers;
timer[11] gv_productionIdleCooldownTimers;
string[11] gv_productionIdleUnitTypes;
bank gv_benchmarkerBank;
string gv_configurationOptionsSectionKey;
string gv_alertConfigurationSectionKey;
string gv_alertMineralsCheckEnabledEntryKey;
string gv_alertMineralsThresholdKey;
string gv_alertGasCheckEnabledEntryKey;
string gv_alertGasThresholdKey;
string gv_alertSupplyBlockCheckEnabledEntryKey;
string gv_alertSupplyBlockStartKey;
string gv_alertSupplyBlockWithinCapKey;
string gv_alertMacroEnergyCheckEnabledEntryKey;
string gv_alertMacroEnergyThresholdKey;
string gv_alertUpgradeGapCheckEnabledEntryKey;
string gv_alertUpgradeGapThresholdKey;
string gv_alertProductionIdleCheckEnabledEntryKey;
string gv_alertProductionIdleThresholdKey;
string gv_benchmarkMaxTimeMinutesKey;
string gv_benchmarkMaxTimeSecondsKey;
string[4] gv_benchmarkSupplyEntryKeys;
string gv_benchmarkEndBuildSelectionKey;
string gv_benchmarkEndBuildMinutesKey;
string gv_benchmarkEndBuildSecondsKey;
string gv_practiceAgainstBenchmarkBuildOrderKey;
string gv_displayBuildHintsKey;
string gv_benchmarkBuildStepEntryKeyPrefix;
string gv_numBenchmarkBuildOrderStepsEntryKey;
string gv_stepTypeBuildOrderStepEntryKey;
string gv_unitTypeBuildOrderStepEntryKey;
string gv_upgradeBuildOrderStepEntryKey;
string gv_supplyBuildOrderStepEntryKey;
string gv_amountBuildOrderStepEntryKey;
string gv_elapsedSecondsBuildOrderStepEntryKey;
string[4] gv_currentMatchupSectionKeys;
string gv_zvTMatchupSectionKey;
string gv_zvZMatchupSectionKey;
string gv_zvPMatchupSectionKey;
string gv_tvTMatchupSectionKey;
string gv_tvZMatchupSectionKey;
string gv_tvPMatchupSectionKey;
string gv_pvTMatchupSectionKey;
string gv_pvZMatchupSectionKey;
string gv_pvPMatchupSectionKey;
string gv_bestSpendingQuotientEntryKey;
string gv_bestTotalWorkersCreatedEntryKey;
string gv_bestTotalArmySupplyEntryKey;
string gv_bestTotalArmyValueMineralsEntryKey;
string gv_bestTotalArmyValueGasEntryKey;
string gv_bestNumUpgradesResearchedEntryKey;
string gv_bestTotalMineralsCollectedEntryKey;
string gv_bestTotalGasCollectedEntryKey;
string gv_bestTimeSupplyBlockedEntryKey;
string gv_bestIdleProductionTimeEntryKey;
string gv_bestAverageUnspentMineralsEntryKey;
string gv_bestAverageUnspentGasEntryKey;
string gv_bestAverageAPMEntryKey;
bool gv_debugBuildOrderEnabled;
bool gv_debugMapMechanicsEnabled;
bool gv_debugAlertsEnabled;
bool gv_debugBankEnabled;
bool gv_debugStatsEnabled;
int gv_menuPadding;
int gv_menuOptionIndent;
int gv_menuItemHeight;
int gv_checkboxWidth;
int gv_checkboxHeight;
int gv__2DigitEditBoxWidth;
int gv__3DigitEditBoxWidth;
int gv__4DigitEditBoxWidth;
int gv_benchmarkEditBoxHeight;
int gv_alertThresholdEditBoxHeight;
int gv_buildOrderListBoxWidth;
int gv_buildOrderListBoxHeight;
int gv_menuSelectButtonWidth;
int gv_menuSelectButtonHeight;
int[3] gv_benchmarksMenuButton;
int[3] gv_alertMenuButton;
int gv_sectionLabelWidth;
int gv_sectionLabelHeight;
int gv_labelAlignmentSpacer;
int[3] gv_startButton;
int gv_startButtonWidth;
int gv_startButtonHeight;
int gv_alertMenuDialog;
int[9][5] gv_alertMenuDialogItemGrid;
int[9][3] gv_alertRowLabelWidths;
int gv_alertMenuSupplyBlockBaseWidth;
int gv_alertMenuQueenNameWidth;
int gv_alertMenuOrbitalNameWidth;
int gv_alertMenuNexusNameWidth;
int gv_mineralAboveThresholdAlertCheckbox;
int gv_gasAboveThresholdAlertCheckbox;
int gv_supplyBlockImminentAlertCheckbox;
int gv_macroEnergyAboveThresholdAlertCheckbox;
int gv_upgradeGapAboveThresholdAlertCheckbox;
int gv_productionIdleAboveThresholdAlertCheckbox;
int gv_benchmarkDialogHeight;
int gv_benchmarkDialogWidth;
text gv_benchmarkDialogTitle;
int gv_benchmarkDialog;
int gv_benchmarkDialogTitleSpacer;
int gv_benchmarkMenuSectionLabelNudge;
int gv_minutesLabelWidth;
int gv_secondsLabelWidth;
int gv_currentlySelectedMatchupIndex;
int gv_currentlySelectedMatchupButton;
string gv_currentlySelectedMatchupBankKey;
int[4] gv_matchupSelectionButtons;
int gv_matchupSelectionLabelHeight;
int gv_matchupButtonWidth;
int gv_matchupButtonHeight;
int gv_matchupButtonSpacing;
int[4] gv_benchmarkSupplyEditBoxes;
int gv_benchmarkSupplyValueLabelWidth;
int gv_benchmarkSupplyValueLabelHeight;
int gv_benchmarkSupplyValueSpacing;
int gv_maxTimeLabelWidth;
int gv_maxTimeMinutesEditBox;
int gv_maxTimeSecondsEditBox;
int gv_endBuildLabelWidth;
int gv_endBuildPulldown;
int gv_endBuildPulldownSelection;
int gv_endBuildPulldownWidth;
int gv_endBuildMinutesEditBox;
int gv_endBuildMinutesLabel;
int gv_endBuildSecondsEditBox;
int gv_endBuildSecondsLabel;
int gv_practiceAgainstSavedBuildOrderLabelWidth;
int gv_practiceAgainstSavedBuildOrderCheckbox;
int gv_practiceAgainstSavedBuildOrderLabel;
int gv_displayBuildOrderHintsLabelWidth;
int gv_displayBuildOrderHintsCheckbox;
int gv_displayBuildOrderHintsLabel;
int gv_helpDialogItemHeight;
int gv_helpCommandLabelWidth;
int gv_helpHotkeyLabelWidth;
int gv_helpDescriptionLabelWidth;
text gv_helpDialogTitle;
int gv_helpDialog;
int gv_helpOkButton;
bool gv_helpDialogOpen;
int gv_backToMenuButton;
int gv_postBuildReportDialogWidth;
int gv_postBuildReportDialog;
text gv_postBuildReportDialogTitle;
int gv_postBuildReportMatchupLabel;
int gv_postBuildReportMatchupLabelWidth;
int gv_postBuildReportMatchupLabelHeight;
int gv_postBuildReportMatchupLabelXOffset;
int gv_postBuildReportMatchupLabelYOffset;
int[15][5] gv_postBuildReportDialogItems;
int gv_postBuildReportDialogItemHeight;
int gv_postBuildReportStatLabelWidth;
int gv_postBuildReportStatValueWidth;
int gv_postBuildReportStatBestWidth;
int gv_postBuildReportStatPercentDifferenceWidth;
int gv_postBuildReportBuildOrderListBox;
int gv_postBuildReportBuildButtonWidth;
int gv_postBuildReportBuildButtonHeight;
int gv_postBuildReportSaveBuildButton;
int gv_postBuildReportResetBuildButton;
int gv_statsDialogMaxItems;
int gv_statsDialogWidth;
int gv_statsDialogHeight;
int[11][3] gv_statValueDialogItems;
int gv_statValueWidth;
int gv_statLabelWidth;
int gv_statRowHeight;
text gv_statsDialogTitle;
int gv_statsDialog;
int gv_statsOkButton;
bool gv_statsDialogOpen;
int gv_statsDialogBuildOrderListBox;
fixed gv_e;
int gv_onehourinseconds;
bool gv_paused;
unitgroup gv_resources;
bool gv_currentBuildIsGasTaken;
timer gv_currentBuildBuildTimer;
int gv_numMorphingOverlords;
unitgroup gv_morphingOverlords;
timer gv_overlordInProgressTimer;
int gv_overlordMorphDuration;
int[4] gv_benchmarkSupplyObjectives;
int gv_benchmarkMaxTimeObjective;
timer gv_benchmark1Timer;
timer gv_benchmark2Timer;
timer gv_benchmark3Timer;
int gv_benchmarkMaxTimeTotalSeconds;
int gv_benchmarkMaxTimeMinutes;
int gv_benchmarkMaxTimeSeconds;
timer gv_benchmarkMaxTimeTimer;
int[4] gv_benchmarkTimerDurations;
int[4] gv_benchmarkSupplyValues;
int[4] gv_benchmarkSupplyDefaults;
int gv_selectedMaxSupplyBenchmark;
int gv_benchmarkEndBuildatMinutes;
int gv_benchmarkEndBuildatSeconds;
int gv_benchmarkEndBuildTotalSeconds;
bool gv_practiceAgainstBenchmarkBuildOrder;
bool gv_trackSupplyUnitsAsObjectives;
int gv_trackSupplyUnitObjectivesUntil;
int gv_buildOrderMaxGasSupply;
string gv_lastCreatedBuildOrderUnitType;
fixed gv_lastCreatedUnitTimestamp;
string gv_unitStepType;
string gv_upgradeStepType;
int gv_trackQueensUntil;
timer gv_multipleUnitFailureTimer;
bool gv_displayBuildHints;
fixed gv_buildHintTimeThreshold;
timer gv_displayBuildHintCooldownTimer;
int gv_buildHintCursor;
int gv_maxCurrentBuildOrderStepsTracked;
int gv_currentBuildOrderStepCursor;
gs_BuildOrderStep[51] gv_currentBuildOrderSteps;
int gv_multipleUnitTimeCutoffThreshold;
int gv_numFailedBenchmarkBuildOrderSteps;
int gv_numCorrectedBenchmarkBuildOrderSteps;
int gv_totalNumBenchmarkBuildOrderSteps;
int[11] gv_benchmarkBuildOrderStepObjectives;
gs_BuildOrderStep[51] gv_benchmarkBuildOrderSteps;
int gv_benchmarkBuildOrderStepCursor;
int gv_benchmarkBuildOrderObjectiveCycleThreshold;
int gv_buildOrderCycleOffset;
int gv_maxDisplayedBuildOrderObjectives1;
color gv_benchmarkSupplyObjectiveTextColor;
int gv_greenBenchmarkSupplyThreshold;
int gv_greenBenchmarkSecondsThreshold;
int gv_yellowBenchmarkSupplyThreshold;
int gv_yellowBenchmarkSecondsThreshold;
int gv_orangeBenchmarkSupplyThreshold;
int gv_orangeBenchmarkSecondsThreshold;
int gv_totalAPMSamplesThisBuild;
int gv_cumulativeAPM;
fixed gv_cumulativeAverageMineralResourceCollectionRateCurrentBuild;
fixed gv_cumulativeAverageGasResourceCollectionRateCurrentBuild;
int gv_resourceCollectionRateSamplesCurrentBuild;
int gv_totalMineralsCollectedCurrentBuild;
int gv_totalGasCollectedCurrentBuild;
int gv_cumulativeAverageUnspentMineralsCurrentBuild;
int gv_cumulativeAverageUnspentGasCurrentBuild;
int gv_averageUnspentResourceSamples;
int gv_workersCreatedCurrentBuild;
int gv_timeProductionIdleThisBuild;
int gv_timeSupplyBlockedThisBuild;
int gv_totalNumberofUpgradesResearchedCurrentBuild;
int gv_winButtonHeight;
int gv_winButtonWidth;
int gv_winButtonXPadding;
int gv_winButtonZergYPadding;
int gv_winButtonProtossYPadding;
int gv_winButtonTerranYPadding;
int gv_screenButtonWidth;
int gv_screenButtonHeight;
int gv_screenButtonXPadding;
int gv_screenButtonYPadding;

void InitGlobals () {
    int init_i;
    int init_j;

    gv_alertMineralsCooldownTimer = TimerCreate();
    gv_alertMineralsCheckEnabled = true;
    gv_alertGasCooldownTimer = TimerCreate();
    gv_alertGasCheckEnabled = true;
    gv_alertSupplyBlockCheckEnabled = true;
    gv_alertSupplyBlockCooldownTimer = TimerCreate();
    gv_alertMacroEnergyCheckEnabled = true;
    gv_alertMacroEnergyCooldownTimer = TimerCreate();
    gv_alertUpgradeGapCheckEnabled = true;
    gv_productionIdleCheckEnabled = true;
    gv_configurationOptionsSectionKey = "options";
    gv_alertConfigurationSectionKey = "alerts";
    gv_alertMineralsCheckEnabledEntryKey = "alertMineralsEnabled";
    gv_alertMineralsThresholdKey = "alertMineralsThreshold";
    gv_alertGasCheckEnabledEntryKey = "alertGasEnabled";
    gv_alertGasThresholdKey = "alertGasThreshold";
    gv_alertSupplyBlockCheckEnabledEntryKey = "alertSupplyBlockEnabled";
    gv_alertSupplyBlockStartKey = "alertSupplyBlockStart";
    gv_alertSupplyBlockWithinCapKey = "alertSupplyBlockWithinCap";
    gv_alertMacroEnergyCheckEnabledEntryKey = "alertMacroEnergyEnabled";
    gv_alertMacroEnergyThresholdKey = "alertMacroEnergyThreshold";
    gv_alertUpgradeGapCheckEnabledEntryKey = "alertUpgradeGapEnabled";
    gv_alertUpgradeGapThresholdKey = "alertUpgradeGapThreshold";
    gv_alertProductionIdleCheckEnabledEntryKey = "alertProductionIdleEnabled";
    gv_alertProductionIdleThresholdKey = "alertProductionIdleThreshold";
    gv_benchmarkMaxTimeMinutesKey = "maxTimeMin";
    gv_benchmarkMaxTimeSecondsKey = "maxTimeSec";
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_benchmarkSupplyEntryKeys[init_i] = "";
    }
    gv_benchmarkEndBuildSelectionKey = "endBuildSelection";
    gv_benchmarkEndBuildMinutesKey = "endBuildMin";
    gv_benchmarkEndBuildSecondsKey = "endBuildSec";
    gv_practiceAgainstBenchmarkBuildOrderKey = "practiceAgainstBenchmarkBuildOrder";
    gv_displayBuildHintsKey = "displayBuildHints";
    gv_benchmarkBuildStepEntryKeyPrefix = "benchmarkBuildStep";
    gv_numBenchmarkBuildOrderStepsEntryKey = "numBenchmarkBuildOrderSteps";
    gv_stepTypeBuildOrderStepEntryKey = "stepType";
    gv_unitTypeBuildOrderStepEntryKey = "unitType";
    gv_upgradeBuildOrderStepEntryKey = "upgrade";
    gv_supplyBuildOrderStepEntryKey = "supply";
    gv_amountBuildOrderStepEntryKey = "amount";
    gv_elapsedSecondsBuildOrderStepEntryKey = "elapsedSeconds";
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_currentMatchupSectionKeys[init_i] = "";
    }
    gv_zvTMatchupSectionKey = "ZvT";
    gv_zvZMatchupSectionKey = "ZvZ";
    gv_zvPMatchupSectionKey = "ZvP";
    gv_tvTMatchupSectionKey = "TvT";
    gv_tvZMatchupSectionKey = "TvZ";
    gv_tvPMatchupSectionKey = "TvP";
    gv_pvTMatchupSectionKey = "PvT";
    gv_pvZMatchupSectionKey = "PvZ";
    gv_pvPMatchupSectionKey = "PvP";
    gv_bestSpendingQuotientEntryKey = "bestSpendingQuotient";
    gv_bestTotalWorkersCreatedEntryKey = "bestTotalWorkersCreated";
    gv_bestTotalArmySupplyEntryKey = "bestTotalArmySupply";
    gv_bestTotalArmyValueMineralsEntryKey = "bestTotalArmyValueMinerals";
    gv_bestTotalArmyValueGasEntryKey = "bestTotalArmyValueGas";
    gv_bestNumUpgradesResearchedEntryKey = "bestNumUpgradesResearched";
    gv_bestTotalMineralsCollectedEntryKey = "bestTotalMineralsCollected";
    gv_bestTotalGasCollectedEntryKey = "bestTotalGasCollected";
    gv_bestTimeSupplyBlockedEntryKey = "bestTimeSupplyBlocked";
    gv_bestIdleProductionTimeEntryKey = "bestProductionTimeIdle";
    gv_bestAverageUnspentMineralsEntryKey = "bestAverageUnspentMinerals";
    gv_bestAverageUnspentGasEntryKey = "bestAverageUnspentGas";
    gv_bestAverageAPMEntryKey = "bestAverageAPM";
    gv_menuPadding = 60;
    gv_menuOptionIndent = 5;
    gv_menuItemHeight = 50;
    gv_checkboxWidth = 50;
    gv_checkboxHeight = 50;
    gv__2DigitEditBoxWidth = 60;
    gv__3DigitEditBoxWidth = 74;
    gv__4DigitEditBoxWidth = 90;
    gv_benchmarkEditBoxHeight = 50;
    gv_alertThresholdEditBoxHeight = 50;
    gv_buildOrderListBoxWidth = 325;
    gv_buildOrderListBoxHeight = 450;
    gv_menuSelectButtonWidth = 200;
    gv_menuSelectButtonHeight = 40;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_benchmarksMenuButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_alertMenuButton[init_i] = c_invalidDialogControlId;
    }
    gv_sectionLabelWidth = 300;
    gv_sectionLabelHeight = 35;
    gv_labelAlignmentSpacer = 15;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_startButton[init_i] = c_invalidDialogControlId;
    }
    gv_startButtonWidth = 200;
    gv_startButtonHeight = 60;
    gv_alertMenuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_alertMenuDialogItemGrid[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_alertMenuSupplyBlockBaseWidth = 306;
    gv_alertMenuQueenNameWidth = 100;
    gv_alertMenuOrbitalNameWidth = 235;
    gv_alertMenuNexusNameWidth = 98;
    gv_mineralAboveThresholdAlertCheckbox = c_invalidDialogControlId;
    gv_gasAboveThresholdAlertCheckbox = c_invalidDialogControlId;
    gv_supplyBlockImminentAlertCheckbox = c_invalidDialogControlId;
    gv_macroEnergyAboveThresholdAlertCheckbox = c_invalidDialogControlId;
    gv_upgradeGapAboveThresholdAlertCheckbox = c_invalidDialogControlId;
    gv_productionIdleAboveThresholdAlertCheckbox = c_invalidDialogControlId;
    gv_benchmarkDialogHeight = 800;
    gv_benchmarkDialogWidth = 1000;
    gv_benchmarkDialogTitle = StringExternal("Param/Value/DC1E9F7A");
    gv_benchmarkDialog = c_invalidDialogId;
    gv_benchmarkDialogTitleSpacer = 50;
    gv_benchmarkMenuSectionLabelNudge = 8;
    gv_minutesLabelWidth = 154;
    gv_secondsLabelWidth = 150;
    gv_currentlySelectedMatchupButton = gv_matchupSelectionButtons[0];
    gv_currentlySelectedMatchupBankKey = "";
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_matchupSelectionButtons[init_i] = c_invalidDialogControlId;
    }
    gv_matchupSelectionLabelHeight = 35;
    gv_matchupButtonWidth = 200;
    gv_matchupButtonHeight = 75;
    gv_matchupButtonSpacing = 10;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_benchmarkSupplyEditBoxes[init_i] = c_invalidDialogControlId;
    }
    gv_benchmarkSupplyValueLabelWidth = 350;
    gv_benchmarkSupplyValueLabelHeight = 50;
    gv_benchmarkSupplyValueSpacing = 10;
    gv_maxTimeLabelWidth = 170;
    gv_maxTimeMinutesEditBox = c_invalidDialogControlId;
    gv_maxTimeSecondsEditBox = c_invalidDialogControlId;
    gv_endBuildLabelWidth = 144;
    gv_endBuildPulldown = c_invalidDialogControlId;
    gv_endBuildPulldownSelection = 1;
    gv_endBuildPulldownWidth = 190;
    gv_endBuildMinutesEditBox = c_invalidDialogControlId;
    gv_endBuildMinutesLabel = c_invalidDialogControlId;
    gv_endBuildSecondsEditBox = c_invalidDialogControlId;
    gv_endBuildSecondsLabel = c_invalidDialogControlId;
    gv_practiceAgainstSavedBuildOrderLabelWidth = 500;
    gv_practiceAgainstSavedBuildOrderCheckbox = c_invalidDialogControlId;
    gv_practiceAgainstSavedBuildOrderLabel = c_invalidDialogControlId;
    gv_displayBuildOrderHintsLabelWidth = 300;
    gv_displayBuildOrderHintsCheckbox = c_invalidDialogControlId;
    gv_displayBuildOrderHintsLabel = c_invalidDialogControlId;
    gv_helpDialogItemHeight = 35;
    gv_helpCommandLabelWidth = 120;
    gv_helpHotkeyLabelWidth = 165;
    gv_helpDescriptionLabelWidth = 550;
    gv_helpDialogTitle = StringExternal("Param/Value/91DF6EE7");
    gv_helpDialog = c_invalidDialogId;
    gv_helpOkButton = c_invalidDialogControlId;
    gv_backToMenuButton = c_invalidDialogControlId;
    gv_postBuildReportDialogWidth = 1200;
    gv_postBuildReportDialog = c_invalidDialogId;
    gv_postBuildReportDialogTitle = StringExternal("Param/Value/B121E629");
    gv_postBuildReportMatchupLabel = c_invalidDialogControlId;
    gv_postBuildReportMatchupLabelWidth = 300;
    gv_postBuildReportMatchupLabelHeight = 60;
    gv_postBuildReportMatchupLabelXOffset = 70;
    gv_postBuildReportMatchupLabelYOffset = 40;
    for (init_i = 0; init_i <= 14; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_postBuildReportDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_postBuildReportDialogItemHeight = 35;
    gv_postBuildReportStatLabelWidth = 335;
    gv_postBuildReportStatValueWidth = 150;
    gv_postBuildReportStatBestWidth = 150;
    gv_postBuildReportStatPercentDifferenceWidth = 150;
    gv_postBuildReportBuildOrderListBox = c_invalidDialogControlId;
    gv_postBuildReportBuildButtonWidth = 115;
    gv_postBuildReportBuildButtonHeight = 45;
    gv_postBuildReportSaveBuildButton = c_invalidDialogControlId;
    gv_postBuildReportResetBuildButton = c_invalidDialogControlId;
    gv_statsDialogMaxItems = 10;
    gv_statsDialogWidth = 1000;
    gv_statsDialogHeight = 525;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_statValueDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_statValueWidth = 300;
    gv_statLabelWidth = 395;
    gv_statRowHeight = 40;
    gv_statsDialogTitle = StringExternal("Param/Value/F4075B4B");
    gv_statsDialog = c_invalidDialogId;
    gv_statsOkButton = c_invalidDialogControlId;
    gv_statsDialogBuildOrderListBox = c_invalidDialogControlId;
    gv_e = 2.7183;
    gv_onehourinseconds = 216000;
    gv_paused = true;
    gv_resources = UnitGroupEmpty();
    gv_currentBuildBuildTimer = TimerCreate();
    gv_morphingOverlords = UnitGroupEmpty();
    gv_overlordInProgressTimer = TimerCreate();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_benchmarkSupplyObjectives[init_i] = c_invalidObjectiveId;
    }
    gv_benchmarkMaxTimeObjective = c_invalidObjectiveId;
    gv_benchmark1Timer = TimerCreate();
    gv_benchmark2Timer = TimerCreate();
    gv_benchmark3Timer = TimerCreate();
    gv_benchmarkMaxTimeTimer = TimerCreate();
    gv_unitStepType = "unit";
    gv_upgradeStepType = "upgrade";
    gv_displayBuildHintCooldownTimer = TimerCreate();
    gv_maxCurrentBuildOrderStepsTracked = 50;
    for (init_i = 0; init_i <= 50; init_i += 1) {
        gv_currentBuildOrderSteps[init_i].lv_stepType = "";
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_benchmarkBuildOrderStepObjectives[init_i] = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        gv_benchmarkBuildOrderSteps[init_i].lv_stepType = "";
    }
    gv_benchmarkSupplyObjectiveTextColor = Color(100.00, 53.33, 6.67);
    gv_greenBenchmarkSupplyThreshold = 2;
    gv_greenBenchmarkSecondsThreshold = 5;
    gv_yellowBenchmarkSupplyThreshold = 4;
    gv_yellowBenchmarkSecondsThreshold = 10;
    gv_orangeBenchmarkSupplyThreshold = 6;
    gv_orangeBenchmarkSecondsThreshold = 15;
    gv_winButtonHeight = 80;
    gv_winButtonWidth = 150;
    gv_winButtonXPadding = 10;
    gv_winButtonZergYPadding = 383;
    gv_winButtonProtossYPadding = 370;
    gv_winButtonTerranYPadding = 341;
    gv_screenButtonWidth = 120;
    gv_screenButtonHeight = 50;
    gv_screenButtonXPadding = 10;
    gv_screenButtonYPadding = 125;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_AddProductionIdleTimersforUnitType (string lp_unitType);
void gf_RestartProductionIdleAlertTimer (string lp_unitType);
void gf_RestartProductionIdleCooldownTimer (string lp_unitType);
void gf_StopProductionIdleTimers (string lp_unitType);
void gf_SwapOutMorphedCommandCenter (string lp_unitType);
void gf_PauseAlertTimers ();
void gf_UnpauseAlertTimers ();
void gf_ResetAlertTimers ();
void gf_SaveAlertMenuConfiguration ();
void gf_LoadAlertMenuConfiguration ();
void gf_LoadAlertRowConfiguration (string lp_alertEnabledKey, string lp_alertThresholdKey, int lp_alertCheckbox, int lp_alertEditBox, int lp_defaultThresholdValue, int lp_rowNumber);
void gf_SaveBenchmarkMenuConfiguration (string lp_sectionKey);
void gf_LoadBenchmarkMenuConfiguration (string lp_sectionKey);
void gf_SaveBenchmarkBuildOrder ();
void gf_LoadBenchmarkBuildOrder ();
void gf_ClearBenchmarkBuildOrder ();
void gf_SaveBenchmarkBuildStep (int lp_stepNumber);
void gf_LoadBenchmarkBuildStep (int lp_stepNumber);
void gf_ClearBenchmarkBuildStep (int lp_stepNumber);
void gf_SaveCurrentStatsasNewBenchmark ();
void gf_ResetBenchmarkBuildStatistics ();
void gf_SaveIntAsSupplyBenchmark (int lp_value, string lp_entryKey);
void gf_LoadIntFromBankIfKeyisSetElseDefault (int lp_dialogItem, string lp_entryKey, string lp_sectionKey, int lp_defaultValue);
void gf_LoadBooleanFromBankIfKeyisSetElseDefault (int lp_dialogItem, string lp_entryKey, string lp_sectionKey, bool lp_defaultValue);
void gf_SaveRealAsBuildBenchmark (fixed lp_value, string lp_entryKey);
void gf_CreateAlertMenuDialog ();
void gf_CreateAlertMenuCheckbox (int lp_rowNumber);
void gf_CreateAlertMenuLabel (text lp_labelText, int lp_rowNum);
void gf_CreateAlertMenuThresholdEditBox (int lp_editBoxWidth, int lp_rowNum);
void gf_SetAlertCheckboxState (bool lp_markChecked, int lp_checkbox);
void gf_EnableDisableAlertRow (bool lp_checked, int lp_rowNum, int lp_numRowItems);
void gf_InitializeBenchmarkDialog ();
void gf_OpenBenchmarkMainDialog ();
void gf_BenchmarkDialogCreateDialogFrame ();
void gf_BenchmarkDialogCreateStartButton ();
void gf_BenchmarkDialogInitializeMatchupSelectionRow ();
void gf_CreateMatchupSelectionButton (text lp_buttonText, int lp_offsetPositionVariable);
void gf_UpdateCurrentlySelectedMatchup ();
void gf_BenchmarkDialogInitializeBenchmarkSupplySection ();
void gf_CreateSupplyValueEditBox (text lp_labelText, int lp_rowNumber, int lp_defaultValue);
void gf_BenchmarkDialogInitializeBuildCompletionOptionsSection ();
void gf_InitializeBenchmarkBuildOrderSection ();
void gf_EnablePracticeAgainstBenchmarkBuildOrderOptions ();
void gf_DisablePracticeAgainstBenchmarkBuildOrderOptions ();
void gf_EvaluateAndDisableEnableBuildHintsOptions ();
void gf_SelectAlertMenu ();
void gf_SelectBenchmarkMenu ();
void gf_CreateMenuSelectButtons (int lp_menuIndex);
void gf_ResetBuildOrderListBox (int lp_listBox);
void gf_UpdateBuildOrderListBoxwithCurrentBuild (int lp_listBox);
void gf_CreateHelpDialog ();
void gf_CreateHelpInfoRow (text lp_commandText, text lp_hotkeyText, text lp_descriptionText, int lp_rowNum);
void gf_CloseHelpDialogandUnpause ();
void gf_InitializePostBuildReportDialog ();
void gf_CreatePostBuildReportDialog ();
void gf_CreatePostBuildReportDialogButtons ();
void gf_CreatePostBuildReportHeaderRowLabels ();
void gf_CreatePostBuildDialogSectionLabel ();
void gf_CreatePostBuildReportStatsSection ();
void gf_CreatePostBuildStatAnalysisRow (text lp_labelText, int lp_rowOffset);
void gf_CreatePostBuildBuildOrderListBox ();
void gf_UpdatePostBuildMatchupText ();
void gf_UpdatePostBuildReportDialogValues (bool lp_updateBuildOrderListBox);
void gf_UpdatePostBuildStatRowValueasInt (int lp_value, string lp_benchmarkEntryKey, int lp_rowNumber, bool lp_higherIsBetter);
void gf_UpdatePostBuildStatRowValueasReal (fixed lp_value, string lp_benchmarkEntryKey, int lp_rowNumber, bool lp_higherIsBetter);
void gf_UpdatePostBuildStatRowValueasTime (int lp_value, string lp_benchmarkEntryKey, int lp_rowNumber, bool lp_higherIsBetter);
void gf_CreateStatsDialog ();
void gf_CreateStatsDialogHeaderRowLabels ();
void gf_CreateStatsDialogRow (int lp_rowOffset);
void gf_CreateStatsBuildOrderListBox ();
void gf_RefreshStatsDialog ();
void gf_RefreshStatsDialogRow (int lp_rowOffset, text lp_labelText, text lp_statValueText);
void gf_CloseStatsDialogandUnpause ();
void gf_LogStringMessage (bool lp_alertTypeFlag, string lp_message);
void gf_LogTextMessage (bool lp_alertTypeFlag, text lp_message);
void gf_InitializeBankDefaults ();
void gf_InitializeDialogDefaults ();
void gf_InitializeGameDefaults ();
void gf_InitializeMapResourcesUnitGroup ();
void gf_InitializeBank ();
void gf_InitializeBuildConfiguration ();
void gf_CreateMatchupBankSections ();
void gf_ResetGameState ();
void gf_ResetMapResources ();
void gf_ResetTechTree ();
void gf_ResetCamera ();
void gf_ResetGameVariables ();
void gf_ResetCurrentBuildOrderStepsVariables ();
void gf_ResetBenchmarkBuildOrderStepsVariables ();
void gf_ResetBenchmarkBuildOrderObjectives ();
void gf_ResetBenchmarkSupplyObjectives ();
void gf_PauseGame ();
void gf_UnpauseGame ();
void gf_PauseAllTimers ();
void gf_UnpauseAllTimers ();
void gf_StartBenchmarkTimers ();
void gf_ResetBenchmarkTimers ();
void gf_PauseBenchmarkTimers ();
void gf_UnpauseBenchmarkTimers ();
void gf_CreateHiddenBenchmarkSupplyObjectives ();
void gf_HideBenchmarkSupplyObjectives ();
void gf_InitializeBenchmarkSupplyObjectives ();
void gf_CreateBenchmarkBuildOrderStepasSecondaryObjective (int lp_buildStep);
void gf_CompleteBenchmarkBuildOrderObjective (int lp_benchmarkBuildOrderStep);
void gf_FailBenchmarkBuildOrderObjective (int lp_benchmarkBuildOrderStep);
void gf_CorrectFailedBenchmarkBuildOrderObjective (int lp_benchmarkBuildOrderStep);
void gf_CycleBenchmarkBuildOrderObjectives ();
void gf_AdjustAllBenchmarkBuildOrderObjectivePositionsUpby1 ();
void gf_InitializeBenchmarkBuildOrder ();
void gf_CreateBenchmarkBuildOrderObjectives ();
void gf_EvaluateUnitTypeandAmountForBenchmarkBuildOrderStep (string lp_unitType, int lp_amount);
void gf_EvaluateUpgradeForBenchmarkBuildOrderStep (string lp_upgrade);
void gf_AddUnitBuildOrderStep (string lp_buildStepUnitType);
void gf_AddUpgradeBuildOrderStep (string lp_buildStepUpgrade);
void gf_DestroyBenchmarkBuildOrderObjectives ();
void gf_FailCurrentBuildStepAndCycle ();
void gf_CompleteCurrentBuildStepAndCycle ();
void gf_ResetStatistics ();
void gf_CreateScreenButtons ();
bool gf_IsOverlordCurrentlyInProgress ();
bool gf_IsSupplyDepotorPylonUnderConstruction ();
text gf_GetRaceMacroUnitName ();
int gf_GetDefaultMacroEnergyThreshold ();
bool gf_IsRaceMacroEnergyAboveThreshold ();
string gf_GetNextUpgrade (string lp_currentUpgrade);
bool gf_IsTimeraProductionIdleTimer (timer lp_timer);
bool gf_DoesAlertTimerExistForUnitType (string lp_unitType);
bool gf_IsUnitTypeaProductionIdleType (string lp_unitType);
bool gf_IsAnyProductionUnitTypeQueueIdle ();
bool gf_IsUnitTypeTrainingQueueEmpty (string lp_unitType);
bool gf_DoesZergHaveLarvaToSpendAndNoUnitsMorphing ();
bool gf_IsUnitResearchinganUpgrade (unit lp_unit);
timer gf_GetProductionIdleAlertTimerforUnitType (string lp_unitType);
timer gf_GetProductionIdleCooldownTimerforUnitType (string lp_unitType);
string gf_GetUnitTypeforProductionIdleTimer (timer lp_unitType);
string gf_GetCurrentlySelectedMatchupasBankSectionKey ();
string gf_GetBenchmarkBuildOrderStepBankKey (int lp_stepNumber, string lp_stepEntryKeySuffix);
unitgroup gf_GetUnitGroupofAllPlayer1WithoutThisUnit ();
bool gf_DoesPlayer1HaveAnyUnits ();
text gf_GetCurrentlySelectedMatchupasText ();
int gf_GetEditBoxValueasInt (int lp_editBox);
bool gf_DoesSavedBuildOrderExistForCurrentMatchup ();
fixed gf_ln (fixed lp_x);
fixed gf_log10 (fixed lp_x);
text gf_GetTypeTextForCurrentBuildOrderStep (int lp_stepNumber);
text gf_GetTypeTextForBenchmarkBuildOrderStep (int lp_stepNumber);
text gf_GetCurrentBuildOrderStepText (int lp_stepNumber);
text gf_GetBenchmarkBuildOrderStepText (int lp_stepNumber);
text gf_GetFormattedCompleteBenchmarkBuildOrderStepText (int lp_stepNumber);
color gf_GetColorForBenchmarkBuildOrderStepCompletion (int lp_stepNumber);
text gf_GetSupplyforLatestCompletedBuildOrderStepasText ();
int gf_GetSupplyforLatestCompletedBuildOrderStep ();
text gf_GetBenchmarkandCurrentStepSecondsDiffasText (int lp_stepNumber);
int gf_GetObjectiveIndexforBenchmarkBuildOrderStep (int lp_cursor);
bool gf_IsUnitTypeCorrectForBenchmarkBuildOrderStep (string lp_unitType, int lp_benchmarkBuildOrderStepIndex);
bool gf_IsUpgradeTypeCorrectForBenchmarkBuildOrderStep (string lp_upgrade, int lp_benchmarkBuildOrderStepIndex);
bool gf_IsSupplyCorrectForBenchmarkBuildOrderStep (int lp_supplyCount, int lp_benchmarkBuildOrderStepIndex);
bool gf_IsAmountCorrectForBenchmarkBuildOrderStep (int lp_numUnits, int lp_benchmarkBuildOrderStepIndex);
bool gf_IsUnitTypeValidForBuildOrder (string lp_unitType);
bool gf_IsUpgradeTypeValidForBuildOrder (string lp_upgrade);
bool gf_IsUnitTypeSameasPreviousUnitType (string lp_unitType);
bool gf_DoesBuildHaveAnotherStepToDisplay ();
fixed gf_GetAverageResourceCollectionRate ();
fixed gf_GetAverageUnspentResources ();
int gf_GetAverageUnspentMinerals ();
int gf_GetAverageUnspentGas ();
int gf_GetTimeSupplyBlocked ();
int gf_GetIdleProductionTime ();
int gf_GetAverageBuildAPM ();
int gf_GetTotalArmySupply ();
int gf_GetTotalArmyValueMinerals ();
int gf_GetTotalArmyValueGas ();
int gf_GetNumUpgradesResearched ();
int gf_GetTotalMineralsCollected ();
int gf_GetTotalGasCollected ();
fixed gf_CalculateSpendingQuotient ();
text gf_CalculateIntPercentDifferenceasText (int lp_value, int lp_previousBest, bool lp_higherisBetter);
text gf_CalculateRealPercentDifferenceasText (fixed lp_value, fixed lp_previousBest, bool lp_higherisBetter);
color gf_GetColorForPercentage (fixed lp_percentage, bool lp_higherIsBetter);
int gf_GetWinButtonYPadding ();
string gf_GetIconForBuildingType (string lp_unitType);
bool gf_IsUpgradeof1Variety (string lp_upgrade);
text gf_GetFormattedUpgradeNameasText (string lp_upgrade);
string gf_FormatCatalogStringwithSpaces (string lp_string);
string gf_TrimSOffArmorsUpgradeName (string lp_string);
unitgroup gf_GetAllPlayer1UnitsforType (string lp_unitType);
unitgroup gf_GetAllPlayer1Units ();
text gf_ConverttoTextWithSign (int lp_int);
bool gf_IsCapitalLetterOrDigit (string lp_letter);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MineralsAboveThreshold;
trigger gt_GasAboveThreshold;
trigger gt_SupplyBlockImminent;
trigger gt_RaceMacroEnergyAboveThreshold;
trigger gt_UpgradeGapAboveThresholdUpgradeCompletesAddRestartTimer;
trigger gt_UpgradeGapAboveThresholdNewUpgradeStartsStopActiveTimers;
trigger gt_UpgradeGapAboveThresholdTimerExpiresFireAlert;
trigger gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer;
trigger gt_ProductionIdleAboveThresholdNewProductionBeginsStopActiveTimers;
trigger gt_ProductionIdleAboveThresholdTimerExpiresFireAlert;
trigger gt_StartBuild;
trigger gt_ResetBuild;
trigger gt_CloseStatsandResumeBuildfromOkButton;
trigger gt_CloseStatsandResumeBuildfromHotkey;
trigger gt_CloseHelpandResumeBuildfromOkButton;
trigger gt_CloseHelpandResumeBuildfromHotkey;
trigger gt_EndBuildatMaxSupply;
trigger gt_EndBuildatSpecifiedGameTime;
trigger gt_EndBuildFromHotkey;
trigger gt_ToggleDebugAlerts;
trigger gt_ToggleDebugStats;
trigger gt_ToggleDebugBank;
trigger gt_ToggleDebugBuildOrder;
trigger gt_ToggleDebugMapMechanics;
trigger gt_MuteUnmuteAlerts;
trigger gt_EnableDisableMineralAlert;
trigger gt_EnableDisableGasAlert;
trigger gt_EnableDisableSupplyBlockAlert;
trigger gt_EnableDisableMacroEnergyAlert;
trigger gt_EnableDisableUpgradeGapAlert;
trigger gt_EnableDisableProductionIdleAlert;
trigger gt_SelectBenchmarkMenu;
trigger gt_OpenMainMenu;
trigger gt_SelectAlertMenu;
trigger gt_SelectMatchup;
trigger gt_DisplayEndBuildGameTimeEdits;
trigger gt_HideEndBuildGameTimeEdits;
trigger gt_TogglePracticeAgainstSavedBuild;
trigger gt_OpenHelpDialog;
trigger gt_OpenPostBuildReportDialog;
trigger gt_SaveBenchmarkBuildStats;
trigger gt_ResetBenchmarkBuildStats;
trigger gt_ReturntoMainMenufromReport;
trigger gt_OpenStatsDialog;
trigger gt_MapInitialization;
trigger gt_EndGame;
trigger gt_Benchmark1TimerExpires;
trigger gt_Benchmark2TimerExpires;
trigger gt_Benchmark3TimerExpires;
trigger gt_MaxTimeTimerElapsed;
trigger gt_EverySecondCheckforBuildHints;
trigger gt_OnUpgradeStartUpdateCurrentBuildOrder;
trigger gt_OnUnitStartUpdateCurrentBuildOrder;
trigger gt_OnUnitCancelUpdateCurrentBuildOrder;
trigger gt_OnMultipleUnitFailureTimerExpires;
trigger gt_UpdateGasTaken;
trigger gt_UpdateTimeSupplyBlocked;
trigger gt_UpdateMineralsCollectedThisBuild;
trigger gt_UpdateGasCollectedThisBuild;
trigger gt_UpdateCumulativeAPM;
trigger gt_UpdateTotalWorkers;
trigger gt_UpdateNumUpgradesResearched;
trigger gt_UpdateResourceCollectionRate;
trigger gt_UpdateAverageUnspentResources;
trigger gt_OverlordInProgressFix;
trigger gt_OverlordCompletedorCancelledFix;
trigger gt_HatcheryLarvaSpawnFix;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_AddProductionIdleTimersforUnitType (string lp_unitType) {
    // Variable Declarations
    timer lv_alertTimer;
    timer lv_cooldownTimer;

    // Variable Initialization
    lv_alertTimer = TimerCreate();
    lv_cooldownTimer = TimerCreate();

    // Implementation
    TextExpressionSetToken("Param/Expression/04F20F4B", "A", UnitTypeGetName(lp_unitType));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/04F20F4B"));
    TimerStart(lv_alertTimer, gv_productionIdleThreshold, false, c_timeGame);
    gv_productionIdleAlertTimers[gv_productionIdleNumProductionTypes] = lv_alertTimer;
    TimerStart(lv_cooldownTimer, gv_alertCooldownSeconds, false, c_timeGame);
    TimerPause(lv_cooldownTimer, true);
    gv_productionIdleCooldownTimers[gv_productionIdleNumProductionTypes] = lv_cooldownTimer;
    gv_productionIdleUnitTypes[gv_productionIdleNumProductionTypes] = lp_unitType;
    gv_productionIdleNumProductionTypes += 1;
}

void gf_RestartProductionIdleAlertTimer (string lp_unitType) {
    // Implementation
    TextExpressionSetToken("Param/Expression/C58FB03D", "A", UnitTypeGetName(lp_unitType));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/C58FB03D"));
    TimerRestart(gf_GetProductionIdleAlertTimerforUnitType(lp_unitType));
    TimerPause(gf_GetProductionIdleCooldownTimerforUnitType(lp_unitType), true);
}

void gf_RestartProductionIdleCooldownTimer (string lp_unitType) {
    // Implementation
    TextExpressionSetToken("Param/Expression/4240A9C2", "A", UnitTypeGetName(lp_unitType));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/4240A9C2"));
    TimerPause(gf_GetProductionIdleAlertTimerforUnitType(lp_unitType), true);
    TimerRestart(gf_GetProductionIdleCooldownTimerforUnitType(lp_unitType));
}

void gf_StopProductionIdleTimers (string lp_unitType) {
    // Implementation
    TextExpressionSetToken("Param/Expression/BFF9DA15", "A", UnitTypeGetName(lp_unitType));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/BFF9DA15"));
    TimerPause(gf_GetProductionIdleAlertTimerforUnitType(lp_unitType), true);
    TimerPause(gf_GetProductionIdleCooldownTimerforUnitType(lp_unitType), true);
}

void gf_SwapOutMorphedCommandCenter (string lp_unitType) {
    // Implementation
    TextExpressionSetToken("Param/Expression/D8A37ACD", "A", UnitTypeGetName(lp_unitType));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/D8A37ACD"));
}

void gf_PauseAlertTimers () {
    int autoDAB23CA2_ae;
    int autoDAB23CA2_ai;
    int auto33B8CBD4_ae;
    int auto33B8CBD4_ai;

    // Variable Declarations
    int lv_i;
    int lv_j;

    // Variable Initialization

    // Implementation
    autoDAB23CA2_ae = gv_alertUpgradeGapNumUpgrades;
    autoDAB23CA2_ai = 1;
    lv_i = 0;
    for ( ; ( (autoDAB23CA2_ai >= 0 && lv_i <= autoDAB23CA2_ae) || (autoDAB23CA2_ai <= 0 && lv_i >= autoDAB23CA2_ae) ) ; lv_i += autoDAB23CA2_ai ) {
        TimerPause(gv_alertUpgradeGapTimers[lv_i], true);
        TimerPause(gv_alertUpgradeGapCooldownTimers[lv_i], true);
    }
    auto33B8CBD4_ae = gv_productionIdleNumProductionTypes;
    auto33B8CBD4_ai = 1;
    lv_j = 0;
    for ( ; ( (auto33B8CBD4_ai >= 0 && lv_j <= auto33B8CBD4_ae) || (auto33B8CBD4_ai <= 0 && lv_j >= auto33B8CBD4_ae) ) ; lv_j += auto33B8CBD4_ai ) {
        TimerPause(gv_productionIdleAlertTimers[lv_i], true);
        TimerPause(gv_productionIdleCooldownTimers[lv_i], true);
    }
}

void gf_UnpauseAlertTimers () {
    int auto88C88B75_ae;
    int auto88C88B75_ai;
    int autoA8434BF4_ae;
    int autoA8434BF4_ai;

    // Variable Declarations
    int lv_i;
    int lv_j;

    // Variable Initialization

    // Implementation
    auto88C88B75_ae = gv_alertUpgradeGapNumUpgrades;
    auto88C88B75_ai = 1;
    lv_i = 0;
    for ( ; ( (auto88C88B75_ai >= 0 && lv_i <= auto88C88B75_ae) || (auto88C88B75_ai <= 0 && lv_i >= auto88C88B75_ae) ) ; lv_i += auto88C88B75_ai ) {
        TimerPause(gv_alertUpgradeGapTimers[lv_i], false);
        TimerPause(gv_alertUpgradeGapCooldownTimers[lv_i], false);
    }
    autoA8434BF4_ae = gv_productionIdleNumProductionTypes;
    autoA8434BF4_ai = 1;
    lv_i = 0;
    for ( ; ( (autoA8434BF4_ai >= 0 && lv_i <= autoA8434BF4_ae) || (autoA8434BF4_ai <= 0 && lv_i >= autoA8434BF4_ae) ) ; lv_i += autoA8434BF4_ai ) {
        TimerPause(gv_productionIdleAlertTimers[lv_i], false);
        TimerPause(gv_productionIdleCooldownTimers[lv_i], false);
    }
}

void gf_ResetAlertTimers () {
    int auto453C1E1D_ae;
    int auto453C1E1D_ai;
    int auto5984B6EA_ae;
    int auto5984B6EA_ai;

    // Variable Declarations
    int lv_i;
    int lv_j;

    // Variable Initialization

    // Implementation
    gf_PauseAlertTimers();
    auto453C1E1D_ae = gv_alertUpgradeGapNumUpgrades;
    auto453C1E1D_ai = 1;
    lv_i = 0;
    for ( ; ( (auto453C1E1D_ai >= 0 && lv_i <= auto453C1E1D_ae) || (auto453C1E1D_ai <= 0 && lv_i >= auto453C1E1D_ae) ) ; lv_i += auto453C1E1D_ai ) {
        gv_alertUpgradeGapTimers[lv_i] = null;
        gv_alertUpgradeGapCooldownTimers[lv_i] = null;
        gv_alertUpgradeGapUpgrades[lv_i] = null;
    }
    auto5984B6EA_ae = gv_productionIdleNumProductionTypes;
    auto5984B6EA_ai = 1;
    lv_j = 0;
    for ( ; ( (auto5984B6EA_ai >= 0 && lv_j <= auto5984B6EA_ae) || (auto5984B6EA_ai <= 0 && lv_j >= auto5984B6EA_ae) ) ; lv_j += auto5984B6EA_ai ) {
        gv_productionIdleAlertTimers[lv_i] = null;
        gv_productionIdleCooldownTimers[lv_i] = null;
        gv_productionIdleUnitTypes[lv_i] = null;
    }
}

void gf_SaveAlertMenuConfiguration () {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertMineralsCheckEnabledEntryKey, gv_alertMineralsCheckEnabled);
    gv_alertMineralsThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[0][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertMineralsThresholdKey, gv_alertMineralsThreshold);
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertGasCheckEnabledEntryKey, gv_alertGasCheckEnabled);
    gv_alertGasThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[1][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertGasThresholdKey, gv_alertGasThreshold);
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockCheckEnabledEntryKey, gv_alertSupplyBlockCheckEnabled);
    gv_alertSupplyBlockWithinCapThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[2][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockWithinCapKey, gv_alertSupplyBlockWithinCapThreshold);
    gv_alertSupplyBlockStart = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[2][4]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockStartKey, gv_alertSupplyBlockStart);
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertMacroEnergyCheckEnabledEntryKey, gv_alertMacroEnergyCheckEnabled);
    gv_alertSelectedMacroEnergyThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[3][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertMacroEnergyThresholdKey, gv_alertSelectedMacroEnergyThreshold);
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertUpgradeGapCheckEnabledEntryKey, gv_alertUpgradeGapCheckEnabled);
    gv_alertUpgradeGapThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[4][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertUpgradeGapThresholdKey, gv_alertUpgradeGapThreshold);
    BankValueSetFromFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertProductionIdleCheckEnabledEntryKey, gv_productionIdleCheckEnabled);
    gv_productionIdleThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[5][2]);
    BankValueSetFromInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertProductionIdleThresholdKey, gv_productionIdleThreshold);
    BankSave(gv_benchmarkerBank);
}

void gf_LoadAlertMenuConfiguration () {
    // Implementation
    gf_LoadAlertRowConfiguration(gv_alertMineralsCheckEnabledEntryKey, gv_alertMineralsThresholdKey, gv_mineralAboveThresholdAlertCheckbox, gv_alertMenuDialogItemGrid[0][2], gv_alertMineralsThreshold, 0);
    gv_alertMineralsCheckEnabled = libNtve_gf_DialogItemIsChecked(gv_mineralAboveThresholdAlertCheckbox, 1);
    gv_alertMineralsThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[0][2]);
    gf_LoadAlertRowConfiguration(gv_alertGasCheckEnabledEntryKey, gv_alertGasThresholdKey, gv_gasAboveThresholdAlertCheckbox, gv_alertMenuDialogItemGrid[1][2], gv_alertGasThreshold, 1);
    gv_alertGasCheckEnabled = libNtve_gf_DialogItemIsChecked(gv_gasAboveThresholdAlertCheckbox, 1);
    gv_alertGasThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[1][2]);
    if ((BankKeyExists(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockCheckEnabledEntryKey) == true)) {
        if ((BankValueGetAsFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockCheckEnabledEntryKey) == true)) {
            gv_alertSupplyBlockCheckEnabled = true;
        }
        else {
            gv_alertSupplyBlockCheckEnabled = false;
        }
        gv_alertSupplyBlockWithinCapThreshold = BankValueGetAsInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockWithinCapKey);
        gv_alertSupplyBlockStart = BankValueGetAsInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, gv_alertSupplyBlockStartKey);
    }
    else {
    }
    gf_SetAlertCheckboxState(gv_alertSupplyBlockCheckEnabled, gv_supplyBlockImminentAlertCheckbox);
    gf_EnableDisableAlertRow(gv_alertSupplyBlockCheckEnabled, 2, 0);
    libNtve_gf_SetDialogItemEditorValue(gv_alertMenuDialogItemGrid[2][2], IntToString(gv_alertSupplyBlockWithinCapThreshold), PlayerGroupAll());
    libNtve_gf_SetDialogItemEditorValue(gv_alertMenuDialogItemGrid[2][4], IntToString(gv_alertSupplyBlockStart), PlayerGroupAll());
    gf_LoadAlertRowConfiguration(gv_alertMacroEnergyCheckEnabledEntryKey, gv_alertMacroEnergyThresholdKey, gv_macroEnergyAboveThresholdAlertCheckbox, gv_alertMenuDialogItemGrid[3][2], gf_GetDefaultMacroEnergyThreshold(), 3);
    gv_alertMacroEnergyCheckEnabled = libNtve_gf_DialogItemIsChecked(gv_macroEnergyAboveThresholdAlertCheckbox, 1);
    gv_alertSelectedMacroEnergyThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[3][2]);
    gf_LoadAlertRowConfiguration(gv_alertUpgradeGapCheckEnabledEntryKey, gv_alertUpgradeGapThresholdKey, gv_upgradeGapAboveThresholdAlertCheckbox, gv_alertMenuDialogItemGrid[4][2], gv_alertUpgradeGapThreshold, 4);
    gv_alertUpgradeGapCheckEnabled = libNtve_gf_DialogItemIsChecked(gv_upgradeGapAboveThresholdAlertCheckbox, 1);
    gv_alertSelectedMacroEnergyThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[4][2]);
    gf_LoadAlertRowConfiguration(gv_alertProductionIdleCheckEnabledEntryKey, gv_alertProductionIdleThresholdKey, gv_productionIdleAboveThresholdAlertCheckbox, gv_alertMenuDialogItemGrid[5][2], gv_productionIdleThreshold, 5);
    gv_productionIdleCheckEnabled = libNtve_gf_DialogItemIsChecked(gv_productionIdleAboveThresholdAlertCheckbox, 1);
    gv_productionIdleThreshold = gf_GetEditBoxValueasInt(gv_alertMenuDialogItemGrid[5][2]);
}

void gf_LoadAlertRowConfiguration (string lp_alertEnabledKey, string lp_alertThresholdKey, int lp_alertCheckbox, int lp_alertEditBox, int lp_defaultThresholdValue, int lp_rowNumber) {
    // Variable Declarations
    bool lv_checkEnabled;
    int lv_threshold;

    // Variable Initialization
    lv_checkEnabled = true;

    // Implementation
    if ((BankKeyExists(gv_benchmarkerBank, gv_alertConfigurationSectionKey, lp_alertEnabledKey) == true)) {
        if ((BankValueGetAsFlag(gv_benchmarkerBank, gv_alertConfigurationSectionKey, lp_alertEnabledKey) == true)) {
            lv_checkEnabled = true;
        }
        else {
            lv_checkEnabled = false;
        }
        lv_threshold = BankValueGetAsInt(gv_benchmarkerBank, gv_alertConfigurationSectionKey, lp_alertThresholdKey);
    }
    else {
        lv_threshold = lp_defaultThresholdValue;
    }
    gf_SetAlertCheckboxState(lv_checkEnabled, lp_alertCheckbox);
    gf_EnableDisableAlertRow(lv_checkEnabled, lp_rowNumber, 0);
    libNtve_gf_SetDialogItemEditorValue(lp_alertEditBox, IntToString(lv_threshold), PlayerGroupAll());
}

void gf_SaveBenchmarkMenuConfiguration (string lp_sectionKey) {
    int autoA7CD85DF_ae;
    int autoA7CD85DF_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoA7CD85DF_ae = 2;
    autoA7CD85DF_ai = 1;
    lv_i = 0;
    for ( ; ( (autoA7CD85DF_ai >= 0 && lv_i <= autoA7CD85DF_ae) || (autoA7CD85DF_ai <= 0 && lv_i >= autoA7CD85DF_ae) ) ; lv_i += autoA7CD85DF_ai ) {
        gv_benchmarkSupplyValues[lv_i] = gf_GetEditBoxValueasInt(gv_benchmarkSupplyEditBoxes[lv_i]);
        BankValueSetFromInt(gv_benchmarkerBank, lp_sectionKey, gv_benchmarkSupplyEntryKeys[lv_i], gv_benchmarkSupplyValues[lv_i]);
    }
    gv_benchmarkMaxTimeTotalSeconds = ((gf_GetEditBoxValueasInt(gv_maxTimeMinutesEditBox)*60)+gf_GetEditBoxValueasInt(gv_maxTimeSecondsEditBox));
    BankValueSetFromInt(gv_benchmarkerBank, lp_sectionKey, gv_benchmarkMaxTimeMinutesKey, gf_GetEditBoxValueasInt(gv_maxTimeMinutesEditBox));
    BankValueSetFromInt(gv_benchmarkerBank, lp_sectionKey, gv_benchmarkMaxTimeSecondsKey, gf_GetEditBoxValueasInt(gv_maxTimeSecondsEditBox));
    gv_endBuildPulldownSelection = DialogControlGetSelectedItem(gv_endBuildPulldown, 1);
    BankValueSetFromInt(gv_benchmarkerBank, gv_configurationOptionsSectionKey, gv_benchmarkEndBuildSelectionKey, DialogControlGetSelectedItem(gv_endBuildPulldown, 1));
    gv_benchmarkEndBuildatMinutes = gf_GetEditBoxValueasInt(gv_endBuildMinutesEditBox);
    BankValueSetFromInt(gv_benchmarkerBank, gv_configurationOptionsSectionKey, gv_benchmarkEndBuildMinutesKey, gf_GetEditBoxValueasInt(gv_endBuildMinutesEditBox));
    gv_benchmarkEndBuildatSeconds = gf_GetEditBoxValueasInt(gv_endBuildSecondsEditBox);
    BankValueSetFromInt(gv_benchmarkerBank, gv_configurationOptionsSectionKey, gv_benchmarkEndBuildSecondsKey, gf_GetEditBoxValueasInt(gv_endBuildSecondsEditBox));
    gv_practiceAgainstBenchmarkBuildOrder = libNtve_gf_DialogItemIsChecked(gv_practiceAgainstSavedBuildOrderCheckbox, 1);
    BankValueSetFromFlag(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_practiceAgainstBenchmarkBuildOrderKey, gv_practiceAgainstBenchmarkBuildOrder);
    gv_displayBuildHints = libNtve_gf_DialogItemIsChecked(gv_displayBuildOrderHintsCheckbox, 1);
    BankValueSetFromFlag(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_displayBuildHintsKey, gv_displayBuildHints);
    BankSave(gv_benchmarkerBank);
}

void gf_LoadBenchmarkMenuConfiguration (string lp_sectionKey) {
    int autoB80F7580_ae;
    int autoB80F7580_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoB80F7580_ae = 2;
    autoB80F7580_ai = 1;
    lv_i = 0;
    for ( ; ( (autoB80F7580_ai >= 0 && lv_i <= autoB80F7580_ae) || (autoB80F7580_ai <= 0 && lv_i >= autoB80F7580_ae) ) ; lv_i += autoB80F7580_ai ) {
        gf_LoadIntFromBankIfKeyisSetElseDefault(gv_benchmarkSupplyEditBoxes[lv_i], gv_benchmarkSupplyEntryKeys[lv_i], lp_sectionKey, gv_benchmarkSupplyDefaults[lv_i]);
    }
    gf_LoadIntFromBankIfKeyisSetElseDefault(gv_maxTimeMinutesEditBox, gv_benchmarkMaxTimeMinutesKey, lp_sectionKey, gv_benchmarkMaxTimeMinutes);
    gf_LoadIntFromBankIfKeyisSetElseDefault(gv_maxTimeSecondsEditBox, gv_benchmarkMaxTimeSecondsKey, lp_sectionKey, gv_benchmarkMaxTimeSeconds);
    if ((BankValueGetAsInt(gv_benchmarkerBank, gv_configurationOptionsSectionKey, gv_benchmarkEndBuildSelectionKey) > 0)) {
        DialogControlSelectItem(gv_endBuildPulldown, PlayerGroupAll(), BankValueGetAsInt(gv_benchmarkerBank, gv_configurationOptionsSectionKey, gv_benchmarkEndBuildSelectionKey));
    }
    else {
        DialogControlSelectItem(gv_endBuildPulldown, PlayerGroupAll(), gv_endBuildPulldownSelection);
    }
    gf_LoadIntFromBankIfKeyisSetElseDefault(gv_endBuildMinutesEditBox, gv_benchmarkEndBuildMinutesKey, gv_configurationOptionsSectionKey, gv_benchmarkEndBuildatMinutes);
    gf_LoadIntFromBankIfKeyisSetElseDefault(gv_endBuildSecondsEditBox, gv_benchmarkEndBuildSecondsKey, gv_configurationOptionsSectionKey, gv_benchmarkEndBuildatSeconds);
    if ((gf_DoesSavedBuildOrderExistForCurrentMatchup() == true)) {
        gf_EnablePracticeAgainstBenchmarkBuildOrderOptions();
    }
    else {
        gf_DisablePracticeAgainstBenchmarkBuildOrderOptions();
    }
    gf_LoadBooleanFromBankIfKeyisSetElseDefault(gv_practiceAgainstSavedBuildOrderCheckbox, gv_practiceAgainstBenchmarkBuildOrderKey, lp_sectionKey, false);
    gf_LoadBooleanFromBankIfKeyisSetElseDefault(gv_displayBuildOrderHintsCheckbox, gv_displayBuildHintsKey, lp_sectionKey, false);
}

void gf_SaveBenchmarkBuildOrder () {
    int auto895F190E_ae;
    int auto895F190E_ai;

    // Variable Declarations
    int lv_currentStepNum;

    // Variable Initialization

    // Implementation
    if ((gv_debugBankEnabled == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D246724E"));
    }
    else {
    }
    auto895F190E_ae = (gv_currentBuildOrderStepCursor-1);
    auto895F190E_ai = 1;
    lv_currentStepNum = 0;
    for ( ; ( (auto895F190E_ai >= 0 && lv_currentStepNum <= auto895F190E_ae) || (auto895F190E_ai <= 0 && lv_currentStepNum >= auto895F190E_ae) ) ; lv_currentStepNum += auto895F190E_ai ) {
        gf_SaveBenchmarkBuildStep(lv_currentStepNum);
        if ((gv_debugBankEnabled == true)) {
            TextExpressionSetToken("Param/Expression/7AE0547A", "A", gf_GetCurrentBuildOrderStepText(lv_currentStepNum));
            TextExpressionSetToken("Param/Expression/7AE0547A", "B", IntToText(lv_currentStepNum));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/7AE0547A"));
        }
        else {
        }
    }
    BankValueSetFromInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_numBenchmarkBuildOrderStepsEntryKey, gv_currentBuildOrderStepCursor);
    if ((gv_debugBankEnabled == true)) {
        TextExpressionSetToken("Param/Expression/D8431969", "A", IntToText(gv_currentBuildOrderStepCursor));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/D8431969"));
    }
    else {
    }
    BankSave(gv_benchmarkerBank);
}

void gf_LoadBenchmarkBuildOrder () {
    int auto8F962F3E_ae;
    int auto8F962F3E_ai;

    // Variable Declarations
    int lv_entryKeyPrefix;
    int lv_currentStepNum;

    // Variable Initialization

    // Implementation
    gv_totalNumBenchmarkBuildOrderSteps = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_numBenchmarkBuildOrderStepsEntryKey);
    TextExpressionSetToken("Param/Expression/E4B95466", "A", IntToText(gv_totalNumBenchmarkBuildOrderSteps));
    TextExpressionSetToken("Param/Expression/E4B95466", "B", gf_GetCurrentlySelectedMatchupasText());
    gf_LogTextMessage(gv_debugBankEnabled, TextExpressionAssemble("Param/Expression/E4B95466"));
    if ((gv_totalNumBenchmarkBuildOrderSteps > 0)) {
        auto8F962F3E_ae = (gv_totalNumBenchmarkBuildOrderSteps-1);
        auto8F962F3E_ai = 1;
        lv_currentStepNum = 0;
        for ( ; ( (auto8F962F3E_ai >= 0 && lv_currentStepNum <= auto8F962F3E_ae) || (auto8F962F3E_ai <= 0 && lv_currentStepNum >= auto8F962F3E_ae) ) ; lv_currentStepNum += auto8F962F3E_ai ) {
            gf_LoadBenchmarkBuildStep(lv_currentStepNum);
        }
        gf_LogTextMessage(gv_debugBankEnabled, TextExpressionAssemble("Param/Expression/0A79CDD8"));
    }
    else {
        gf_LogTextMessage(gv_debugBankEnabled, TextExpressionAssemble("Param/Expression/DCA924E4"));
    }
}

void gf_ClearBenchmarkBuildOrder () {
    int autoD5F67844_ae;
    int autoD5F67844_ai;

    // Variable Declarations
    int lv_currentStepNum;

    // Variable Initialization

    // Implementation
    if ((gv_debugBankEnabled == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F1506C2B"));
    }
    else {
    }
    autoD5F67844_ae = (gv_currentBuildOrderStepCursor-1);
    autoD5F67844_ai = 1;
    lv_currentStepNum = 0;
    for ( ; ( (autoD5F67844_ai >= 0 && lv_currentStepNum <= autoD5F67844_ae) || (autoD5F67844_ai <= 0 && lv_currentStepNum >= autoD5F67844_ae) ) ; lv_currentStepNum += autoD5F67844_ai ) {
        gf_ClearBenchmarkBuildStep(lv_currentStepNum);
    }
    BankKeyRemove(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_numBenchmarkBuildOrderStepsEntryKey);
    BankValueSetFromFlag(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_practiceAgainstBenchmarkBuildOrderKey, false);
    BankValueSetFromFlag(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_displayBuildHintsKey, false);
    BankSave(gv_benchmarkerBank);
}

void gf_SaveBenchmarkBuildStep (int lp_stepNumber) {
    // Implementation
    BankValueSetFromString(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_stepTypeBuildOrderStepEntryKey), gv_currentBuildOrderSteps[lp_stepNumber].lv_stepType);
    BankValueSetFromString(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_unitTypeBuildOrderStepEntryKey), (gv_currentBuildOrderSteps[lp_stepNumber].lv_unitType));
    BankValueSetFromString(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_upgradeBuildOrderStepEntryKey), (gv_currentBuildOrderSteps[lp_stepNumber].lv_upgrade));
    BankValueSetFromInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_supplyBuildOrderStepEntryKey), gv_currentBuildOrderSteps[lp_stepNumber].lv_supply);
    BankValueSetFromInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_amountBuildOrderStepEntryKey), gv_currentBuildOrderSteps[lp_stepNumber].lv_amount);
    BankValueSetFromInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_elapsedSecondsBuildOrderStepEntryKey), gv_currentBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds);
}

void gf_LoadBenchmarkBuildStep (int lp_stepNumber) {
    // Implementation
    gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_stepType = BankValueGetAsString(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_stepTypeBuildOrderStepEntryKey));
    gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_unitType = (BankValueGetAsString(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_unitTypeBuildOrderStepEntryKey)));
    gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_upgrade = (BankValueGetAsString(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_upgradeBuildOrderStepEntryKey)));
    gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supply = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_supplyBuildOrderStepEntryKey));
    gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_amount = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_amountBuildOrderStepEntryKey));
    gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_elapsedSecondsBuildOrderStepEntryKey));
}

void gf_ClearBenchmarkBuildStep (int lp_stepNumber) {
    // Implementation
    BankKeyRemove(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_stepTypeBuildOrderStepEntryKey));
    BankKeyRemove(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_unitTypeBuildOrderStepEntryKey));
    BankKeyRemove(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_upgradeBuildOrderStepEntryKey));
    BankKeyRemove(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_supplyBuildOrderStepEntryKey));
    BankKeyRemove(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_amountBuildOrderStepEntryKey));
    BankKeyRemove(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gf_GetBenchmarkBuildOrderStepBankKey(lp_stepNumber, gv_elapsedSecondsBuildOrderStepEntryKey));
}

void gf_SaveCurrentStatsasNewBenchmark () {
    // Implementation
    gf_SaveRealAsBuildBenchmark(gf_CalculateSpendingQuotient(), gv_bestSpendingQuotientEntryKey);
    gf_SaveIntAsSupplyBenchmark(gv_workersCreatedCurrentBuild, gv_bestTotalWorkersCreatedEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetTotalArmySupply(), gv_bestTotalArmySupplyEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetTotalArmyValueMinerals(), gv_bestTotalArmyValueMineralsEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetTotalArmyValueGas(), gv_bestTotalArmyValueGasEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetNumUpgradesResearched(), gv_bestNumUpgradesResearchedEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetTotalMineralsCollected(), gv_bestTotalMineralsCollectedEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetTotalGasCollected(), gv_bestTotalGasCollectedEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetTimeSupplyBlocked(), gv_bestTimeSupplyBlockedEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetIdleProductionTime(), gv_bestIdleProductionTimeEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetAverageUnspentMinerals(), gv_bestAverageUnspentMineralsEntryKey);
    gf_SaveIntAsSupplyBenchmark(gf_GetAverageUnspentGas(), gv_bestAverageUnspentGasEntryKey);
    gf_SaveRealAsBuildBenchmark(gf_GetAverageBuildAPM(), gv_bestAverageAPMEntryKey);
    BankSave(gv_benchmarkerBank);
}

void gf_ResetBenchmarkBuildStatistics () {
    // Implementation
    gf_SaveRealAsBuildBenchmark(0.0, gv_bestSpendingQuotientEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestTotalWorkersCreatedEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestTotalArmySupplyEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestTotalArmyValueMineralsEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestTotalArmyValueGasEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestNumUpgradesResearchedEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestTotalMineralsCollectedEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestTotalGasCollectedEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestTimeSupplyBlockedEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestIdleProductionTimeEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestAverageUnspentMineralsEntryKey);
    gf_SaveIntAsSupplyBenchmark(0, gv_bestAverageUnspentGasEntryKey);
    gf_SaveRealAsBuildBenchmark(0.0, gv_bestAverageAPMEntryKey);
}

void gf_SaveIntAsSupplyBenchmark (int lp_value, string lp_entryKey) {
    // Implementation
    BankValueSetFromInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), lp_entryKey, lp_value);
}

void gf_LoadIntFromBankIfKeyisSetElseDefault (int lp_dialogItem, string lp_entryKey, string lp_sectionKey, int lp_defaultValue) {
    // Implementation
    if (((BankKeyExists(gv_benchmarkerBank, lp_sectionKey, lp_entryKey) == true) && (BankValueGetAsInt(gv_benchmarkerBank, lp_sectionKey, lp_entryKey) > -1))) {
        libNtve_gf_SetDialogItemEditorValue(lp_dialogItem, IntToString(BankValueGetAsInt(gv_benchmarkerBank, lp_sectionKey, lp_entryKey)), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemEditorValue(lp_dialogItem, IntToString(lp_defaultValue), PlayerGroupAll());
    }
}

void gf_LoadBooleanFromBankIfKeyisSetElseDefault (int lp_dialogItem, string lp_entryKey, string lp_sectionKey, bool lp_defaultValue) {
    // Variable Declarations
    bool lv_loadedValue;

    // Variable Initialization

    // Implementation
    if ((BankKeyExists(gv_benchmarkerBank, lp_sectionKey, lp_entryKey) == true)) {
        lv_loadedValue = BankValueGetAsFlag(gv_benchmarkerBank, lp_sectionKey, lp_entryKey);
    }
    else {
    }
    if ((lv_loadedValue == true)) {
        libNtve_gf_SetDialogItemChecked(lp_dialogItem, true, PlayerGroupAll());
    }
    else {
        if ((lp_defaultValue == true)) {
            libNtve_gf_SetDialogItemChecked(lp_dialogItem, true, PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemChecked(lp_dialogItem, false, PlayerGroupAll());
        }
    }
    if ((gv_debugBankEnabled == true)) {
        TextExpressionSetToken("Param/Expression/CF0AC666", "A", StringToText(lp_entryKey));
        TextExpressionSetToken("Param/Expression/CF0AC666", "B", StringToText(lp_sectionKey));
        TextExpressionSetToken("Param/Expression/CF0AC666", "C", libNtve_gf_ConvertBooleanToText(lv_loadedValue));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/CF0AC666"));
    }
    else {
    }
}

void gf_SaveRealAsBuildBenchmark (fixed lp_value, string lp_entryKey) {
    // Implementation
    BankValueSetFromFixed(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), lp_entryKey, lp_value);
}

void gf_CreateAlertMenuDialog () {
    // Implementation
    DialogCreate(gv_benchmarkDialogWidth, gv_benchmarkDialogHeight, c_anchorCenter, 0, -150, true);
    gv_alertMenuDialog = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), gv_benchmarkDialogTitle);
    DialogSetTransparency(DialogLastCreated(), 0.0);
    gf_CreateMenuSelectButtons(1);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer), StringExternal("Param/Value/563148FB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gf_CreateAlertMenuCheckbox(0);
    gv_mineralAboveThresholdAlertCheckbox = DialogControlLastCreated();
    gf_CreateAlertMenuLabel(StringExternal("Param/Value/99232652"), 0);
    gf_CreateAlertMenuThresholdEditBox(gv__4DigitEditBoxWidth, 0);
    gf_CreateAlertMenuCheckbox(1);
    gv_gasAboveThresholdAlertCheckbox = DialogControlLastCreated();
    gf_CreateAlertMenuLabel(StringExternal("Param/Value/A472485E"), 1);
    gf_CreateAlertMenuThresholdEditBox(gv__4DigitEditBoxWidth, 1);
    gf_CreateAlertMenuCheckbox(2);
    gv_supplyBlockImminentAlertCheckbox = DialogControlLastCreated();
    gf_CreateAlertMenuLabel(StringExternal("Param/Value/31BD0349"), 2);
    gf_CreateAlertMenuThresholdEditBox(gv__2DigitEditBoxWidth, 2);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_alertRowLabelWidths[2][1], gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[2][0]+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_labelAlignmentSpacer+gv_sectionLabelHeight+2*gv_menuItemHeight), StringExternal("Param/Value/22895B11"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_alertMenuDialogItemGrid[2][3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__2DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[2][0]+gv__2DigitEditBoxWidth+gv_alertRowLabelWidths[2][1]), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight+2*gv_menuItemHeight));
    gv_alertMenuDialogItemGrid[2][4] = DialogControlLastCreated();
    gf_CreateAlertMenuCheckbox(3);
    gv_macroEnergyAboveThresholdAlertCheckbox = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/F5D99818", "A", gf_GetRaceMacroUnitName());
    gf_CreateAlertMenuLabel(TextExpressionAssemble("Param/Expression/F5D99818"), 3);
    gf_CreateAlertMenuThresholdEditBox(gv__2DigitEditBoxWidth, 3);
    gf_CreateAlertMenuCheckbox(4);
    gv_upgradeGapAboveThresholdAlertCheckbox = DialogControlLastCreated();
    gf_CreateAlertMenuLabel(StringExternal("Param/Value/CAFE4A70"), 4);
    gf_CreateAlertMenuThresholdEditBox(gv__2DigitEditBoxWidth, 4);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_alertRowLabelWidths[4][1], gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[4][0]+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_labelAlignmentSpacer+gv_sectionLabelHeight+4*gv_menuItemHeight), StringExternal("Param/Value/0F44E262"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_alertMenuDialogItemGrid[4][3] = DialogControlLastCreated();
    gf_CreateAlertMenuCheckbox(5);
    gv_productionIdleAboveThresholdAlertCheckbox = DialogControlLastCreated();
    gf_CreateAlertMenuLabel(StringExternal("Param/Value/683144D7"), 5);
    gf_CreateAlertMenuThresholdEditBox(gv__2DigitEditBoxWidth, 5);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_alertRowLabelWidths[5][1], gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[5][0]+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_labelAlignmentSpacer+gv_sectionLabelHeight+5*gv_menuItemHeight), StringExternal("Param/Value/C235BC69"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_alertMenuDialogItemGrid[5][3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_alertMenuDialog, gv_startButtonWidth, gv_startButtonHeight, c_anchorBottom, 0, gv_menuPadding, StringExternal("Param/Value/CD009FD2"), StringExternal("Param/Value/699F29D6"), "");
    gv_startButton[1] = DialogControlLastCreated();
}

void gf_CreateAlertMenuCheckbox (int lp_rowNumber) {
    // Implementation
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), gv_checkboxWidth, gv_checkboxHeight, c_anchorTopLeft, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight+lp_rowNumber*gv_checkboxHeight), StringExternal("Param/Value/85D3414C"), true);
    gv_alertMenuDialogItemGrid[lp_rowNumber][0] = DialogControlLastCreated();
}

void gf_CreateAlertMenuLabel (text lp_labelText, int lp_rowNum) {
    // Implementation
    TextExpressionSetToken("Param/Expression/539425D0", "A", lp_labelText);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_alertRowLabelWidths[lp_rowNum][0], gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_labelAlignmentSpacer+gv_sectionLabelHeight+lp_rowNum*gv_menuItemHeight), TextExpressionAssemble("Param/Expression/539425D0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_alertMenuDialogItemGrid[lp_rowNum][1] = DialogControlLastCreated();
}

void gf_CreateAlertMenuThresholdEditBox (int lp_editBoxWidth, int lp_rowNum) {
    // Implementation
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lp_editBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_checkboxWidth+gv_alertRowLabelWidths[lp_rowNum][0]), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight+lp_rowNum*gv_menuItemHeight));
    gv_alertMenuDialogItemGrid[lp_rowNum][2] = DialogControlLastCreated();
}

void gf_SetAlertCheckboxState (bool lp_markChecked, int lp_checkbox) {
    // Implementation
    if ((lp_markChecked == true)) {
        libNtve_gf_SetDialogItemChecked(lp_checkbox, true, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemChecked(lp_checkbox, false, PlayerGroupAll());
    }
}

void gf_EnableDisableAlertRow (bool lp_checked, int lp_rowNum, int lp_numRowItems) {
    int auto6C54BDE2_ae;
    int auto6C54BDE2_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto6C54BDE2_ae = lp_numRowItems;
    auto6C54BDE2_ai = 1;
    lv_i = 1;
    for ( ; ( (auto6C54BDE2_ai >= 0 && lv_i <= auto6C54BDE2_ae) || (auto6C54BDE2_ai <= 0 && lv_i >= auto6C54BDE2_ae) ) ; lv_i += auto6C54BDE2_ai ) {
        if ((lp_checked == true)) {
            DialogControlSetEnabled(gv_alertMenuDialogItemGrid[lp_rowNum][lv_i], PlayerGroupAll(), true);
        }
        else {
            DialogControlSetEnabled(gv_alertMenuDialogItemGrid[lp_rowNum][lv_i], PlayerGroupAll(), false);
        }
    }
}

void gf_InitializeBenchmarkDialog () {
    // Implementation
    gf_BenchmarkDialogCreateDialogFrame();
    gf_CreateMenuSelectButtons(0);
    gf_BenchmarkDialogInitializeMatchupSelectionRow();
    gf_BenchmarkDialogInitializeBenchmarkSupplySection();
    gf_BenchmarkDialogInitializeBuildCompletionOptionsSection();
    gf_InitializeBenchmarkBuildOrderSection();
    gf_BenchmarkDialogCreateStartButton();
}

void gf_OpenBenchmarkMainDialog () {
    // Implementation
    CinematicFade(false, 0.5, c_fadeStyleSquareRoot, Color(0.00, 0.00, 0.00), 0.0, false);
    gf_SelectBenchmarkMenu();
    gf_HideBenchmarkSupplyObjectives();
    gf_DestroyBenchmarkBuildOrderObjectives();
    DialogSetVisible(gv_helpDialog, PlayerGroupAll(), false);
    gv_helpDialogOpen = false;
    DialogSetVisible(gv_statsDialog, PlayerGroupAll(), false);
    gv_statsDialogOpen = false;
    DialogSetVisible(gv_postBuildReportDialog, PlayerGroupAll(), false);
    Wait(0.25, c_timeGame);
    gf_LoadBenchmarkMenuConfiguration(gf_GetCurrentlySelectedMatchupasBankSectionKey());
    gf_LoadAlertMenuConfiguration();
    if ((gf_DoesSavedBuildOrderExistForCurrentMatchup() == true)) {
        gf_EnablePracticeAgainstBenchmarkBuildOrderOptions();
    }
    else {
        gf_DisablePracticeAgainstBenchmarkBuildOrderOptions();
    }
    DialogSetVisible(gv_benchmarkDialog, PlayerGroupAll(), true);
    Wait(0.25, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    TimerRestart(gv_currentBuildBuildTimer);
    gf_ResetBenchmarkTimers();
    gf_PauseGame();
}

void gf_BenchmarkDialogCreateDialogFrame () {
    // Implementation
    DialogCreate(gv_benchmarkDialogWidth, gv_benchmarkDialogHeight, c_anchorCenter, 0, -150, true);
    gv_benchmarkDialog = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), gv_benchmarkDialogTitle);
    DialogSetTransparency(DialogLastCreated(), 0.0);
}

void gf_BenchmarkDialogCreateStartButton () {
    // Implementation
    libNtve_gf_CreateDialogItemButton(gv_benchmarkDialog, gv_startButtonWidth, gv_startButtonHeight, c_anchorBottom, 0, gv_menuPadding, StringExternal("Param/Value/84760B8B"), StringExternal("Param/Value/49A63E54"), "");
    gv_startButton[0] = DialogControlLastCreated();
}

void gf_BenchmarkDialogInitializeMatchupSelectionRow () {
    string auto524A68DE_val;

    // Variable Declarations
    text lv_x;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_benchmarkMenuSectionLabelNudge), StringExternal("Param/Value/2D3C7DC9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    auto524A68DE_val = PlayerRace(1);
    if (auto524A68DE_val == "Zerg") {
        lv_x = StringExternal("Param/Value/99F5183D");
    }
    else if (auto524A68DE_val == "Terr") {
        lv_x = StringExternal("Param/Value/DFC52DBF");
    }
    else if (auto524A68DE_val == "Prot") {
        lv_x = StringExternal("Param/Value/2400A4EF");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/FE359903", "A", lv_x);
    gf_CreateMatchupSelectionButton(TextExpressionAssemble("Param/Expression/FE359903"), -1);
    gv_matchupSelectionButtons[0] = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/0892D77F", "A", lv_x);
    gf_CreateMatchupSelectionButton(TextExpressionAssemble("Param/Expression/0892D77F"), 0);
    gv_matchupSelectionButtons[1] = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/9AC37339", "A", lv_x);
    gf_CreateMatchupSelectionButton(TextExpressionAssemble("Param/Expression/9AC37339"), 1);
    gv_matchupSelectionButtons[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemToggled(gv_matchupSelectionButtons[0], true, PlayerGroupAll());
}

void gf_CreateMatchupSelectionButton (text lp_buttonText, int lp_offsetPositionVariable) {
    // Variable Declarations
    text lv_formattedButtonText;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/28EB8F86", "A", lp_buttonText);
    lv_formattedButtonText = TextExpressionAssemble("Param/Expression/28EB8F86");
    libNtve_gf_CreateDialogItemButton(gv_benchmarkDialog, gv_matchupButtonWidth, gv_matchupButtonHeight, c_anchorTop, (lp_offsetPositionVariable*(gv_matchupButtonWidth+gv_matchupButtonSpacing)), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight), StringExternal("Param/Value/4B6A2C26"), lv_formattedButtonText, "");
    libNtve_gf_SetDialogItemClickOnDown(DialogControlLastCreated(), true, PlayerGroupAll());
}

void gf_UpdateCurrentlySelectedMatchup () {
    int auto31D15147_ae;
    int auto31D15147_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto31D15147_ae = 2;
    auto31D15147_ai = 1;
    lv_i = 0;
    for ( ; ( (auto31D15147_ai >= 0 && lv_i <= auto31D15147_ae) || (auto31D15147_ai <= 0 && lv_i >= auto31D15147_ae) ) ; lv_i += auto31D15147_ai ) {
        if ((gv_matchupSelectionButtons[lv_i] != EventDialogControl())) {
            libNtve_gf_SetDialogItemToggled(gv_matchupSelectionButtons[lv_i], false, PlayerGroupAll());
        }
        else {
            gv_currentlySelectedMatchupIndex = lv_i;
            gv_currentlySelectedMatchupButton = gv_matchupSelectionButtons[lv_i];
        }
    }
}

void gf_BenchmarkDialogInitializeBenchmarkSupplySection () {
    // Implementation
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_benchmarkMenuSectionLabelNudge+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer), StringExternal("Param/Value/507082F5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    TextExpressionSetToken("Param/Expression/86EE8952", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_benchmarkTimerDurations[0]));
    gf_CreateSupplyValueEditBox(TextExpressionAssemble("Param/Expression/86EE8952"), 1, gv_benchmarkSupplyDefaults[0]);
    gv_benchmarkSupplyEditBoxes[0] = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/0A2699D7", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_benchmarkTimerDurations[1]));
    gf_CreateSupplyValueEditBox(TextExpressionAssemble("Param/Expression/0A2699D7"), 2, gv_benchmarkSupplyDefaults[1]);
    gv_benchmarkSupplyEditBoxes[1] = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/B436D260", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_benchmarkTimerDurations[2]));
    gf_CreateSupplyValueEditBox(TextExpressionAssemble("Param/Expression/B436D260"), 3, gv_benchmarkSupplyDefaults[2]);
    gv_benchmarkSupplyEditBoxes[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_maxTimeLabelWidth, gv_benchmarkSupplyValueLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+4*gv_benchmarkSupplyValueLabelHeight), StringExternal("Param/Value/6B6F2419"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__2DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_maxTimeLabelWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+4*gv_benchmarkEditBoxHeight));
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_benchmarkMaxTimeMinutes), PlayerGroupAll());
    gv_maxTimeMinutesEditBox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_minutesLabelWidth, gv_benchmarkSupplyValueLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_maxTimeLabelWidth+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+4*gv_benchmarkSupplyValueLabelHeight), StringExternal("Param/Value/B80AD986"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__2DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_maxTimeLabelWidth+gv__2DigitEditBoxWidth+gv_minutesLabelWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+4*gv_benchmarkEditBoxHeight));
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_benchmarkMaxTimeSeconds), PlayerGroupAll());
    gv_maxTimeSecondsEditBox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_benchmarkDialog, gv_secondsLabelWidth, gv_benchmarkSupplyValueLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_maxTimeLabelWidth+gv__2DigitEditBoxWidth+gv_minutesLabelWidth+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+4*gv_benchmarkSupplyValueLabelHeight), StringExternal("Param/Value/76739197"), ColorWithAlpha(0,0,0,0), false, 2.0);
}

void gf_CreateSupplyValueEditBox (text lp_labelText, int lp_rowNumber, int lp_defaultValue) {
    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_benchmarkDialog, gv_benchmarkSupplyValueLabelWidth, gv_benchmarkSupplyValueLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv__3DigitEditBoxWidth+gv_benchmarkSupplyValueSpacing), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+lp_rowNumber*gv_benchmarkSupplyValueLabelHeight), lp_labelText, ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(gv_benchmarkDialog, c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__3DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+lp_rowNumber*gv_benchmarkEditBoxHeight));
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(lp_defaultValue), PlayerGroupAll());
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 200.0, PlayerGroupAll());
}

void gf_BenchmarkDialogInitializeBuildCompletionOptionsSection () {
    // Implementation
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_benchmarkMenuSectionLabelNudge+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+gv_sectionLabelHeight+4*gv_benchmarkSupplyValueLabelHeight), StringExternal("Param/Value/E23A8A3F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_endBuildLabelWidth, gv_benchmarkSupplyValueLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+5*gv_benchmarkSupplyValueLabelHeight+gv_sectionLabelHeight), StringExternal("Param/Value/0F376BB5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_endBuildPulldown = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_endBuildPulldownWidth, gv_menuItemHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_endBuildLabelWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+5*gv_benchmarkEditBoxHeight+gv_sectionLabelHeight));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F1EFDEA1"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/AD584A2F"));
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__2DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_endBuildLabelWidth+gv_endBuildPulldownWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+5*gv_benchmarkEditBoxHeight+gv_sectionLabelHeight));
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_benchmarkEndBuildatMinutes), PlayerGroupAll());
    gv_endBuildMinutesEditBox = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_minutesLabelWidth, gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_endBuildLabelWidth+gv_endBuildPulldownWidth+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+5*gv_benchmarkSupplyValueLabelHeight+gv_sectionLabelHeight), StringExternal("Param/Value/36CC771D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_endBuildMinutesLabel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv__2DigitEditBoxWidth, gv_benchmarkEditBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_endBuildLabelWidth+gv_endBuildPulldownWidth+gv__2DigitEditBoxWidth+gv_minutesLabelWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+5*gv_benchmarkEditBoxHeight+gv_sectionLabelHeight));
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_benchmarkEndBuildatSeconds), PlayerGroupAll());
    gv_endBuildSecondsEditBox = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_secondsLabelWidth, gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_endBuildLabelWidth+gv_endBuildPulldownWidth+gv__2DigitEditBoxWidth+gv_minutesLabelWidth+gv__2DigitEditBoxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+5*gv_benchmarkSupplyValueLabelHeight+gv_sectionLabelHeight), StringExternal("Param/Value/3513F291"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_endBuildSecondsLabel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
}

void gf_InitializeBenchmarkBuildOrderSection () {
    // Implementation
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCheckBox);
    gv_practiceAgainstSavedBuildOrderCheckbox = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_checkboxWidth, gv_menuItemHeight);
    libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+6*gv_benchmarkEditBoxHeight+gv_sectionLabelHeight));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/7FDBA57B"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_practiceAgainstSavedBuildOrderLabelWidth, gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_checkboxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+6*gv_benchmarkSupplyValueLabelHeight+gv_sectionLabelHeight), StringExternal("Param/Value/C981768C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_practiceAgainstSavedBuildOrderLabel = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCheckBox);
    gv_displayBuildOrderHintsCheckbox = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_checkboxWidth, gv_menuItemHeight);
    libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+7*gv_benchmarkEditBoxHeight+gv_sectionLabelHeight));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/5777D4C2"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_displayBuildOrderHintsLabelWidth, gv_menuItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_checkboxWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_matchupSelectionLabelHeight+gv_matchupButtonHeight+gv_labelAlignmentSpacer+7*gv_benchmarkSupplyValueLabelHeight+gv_sectionLabelHeight), StringExternal("Param/Value/1BB4532B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_displayBuildOrderHintsLabel = DialogControlLastCreated();
    if ((gf_DoesSavedBuildOrderExistForCurrentMatchup() == true)) {
        gf_EnablePracticeAgainstBenchmarkBuildOrderOptions();
    }
    else {
        gf_DisablePracticeAgainstBenchmarkBuildOrderOptions();
    }
}

void gf_EnablePracticeAgainstBenchmarkBuildOrderOptions () {
    // Implementation
    DialogControlSetEnabled(gv_practiceAgainstSavedBuildOrderCheckbox, PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_practiceAgainstSavedBuildOrderLabel, PlayerGroupAll(), true);
    gf_EvaluateAndDisableEnableBuildHintsOptions();
}

void gf_DisablePracticeAgainstBenchmarkBuildOrderOptions () {
    // Implementation
    DialogControlSetEnabled(gv_practiceAgainstSavedBuildOrderCheckbox, PlayerGroupAll(), false);
    DialogControlSetEnabled(gv_practiceAgainstSavedBuildOrderLabel, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemChecked(gv_practiceAgainstSavedBuildOrderCheckbox, false, PlayerGroupAll());
    gf_EvaluateAndDisableEnableBuildHintsOptions();
}

void gf_EvaluateAndDisableEnableBuildHintsOptions () {
    // Implementation
    if ((libNtve_gf_DialogItemIsChecked(gv_practiceAgainstSavedBuildOrderCheckbox, 1) == true)) {
        DialogControlSetEnabled(gv_displayBuildOrderHintsCheckbox, PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_displayBuildOrderHintsLabel, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetEnabled(gv_displayBuildOrderHintsCheckbox, PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_displayBuildOrderHintsLabel, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemChecked(gv_displayBuildOrderHintsCheckbox, false, PlayerGroupAll());
    }
}

void gf_SelectAlertMenu () {
    int auto2BD4AF57_ae;
    int auto2BD4AF57_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto2BD4AF57_ae = 1;
    auto2BD4AF57_ai = 1;
    lv_i = 0;
    for ( ; ( (auto2BD4AF57_ai >= 0 && lv_i <= auto2BD4AF57_ae) || (auto2BD4AF57_ai <= 0 && lv_i >= auto2BD4AF57_ae) ) ; lv_i += auto2BD4AF57_ai ) {
        libNtve_gf_SetDialogItemToggled(gv_benchmarksMenuButton[lv_i], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_alertMenuButton[lv_i], true, PlayerGroupAll());
    }
    DialogSetVisible(gv_benchmarkDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_alertMenuDialog, PlayerGroupAll(), true);
}

void gf_SelectBenchmarkMenu () {
    int auto1FD49190_ae;
    int auto1FD49190_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto1FD49190_ae = 1;
    auto1FD49190_ai = 1;
    lv_i = 0;
    for ( ; ( (auto1FD49190_ai >= 0 && lv_i <= auto1FD49190_ae) || (auto1FD49190_ai <= 0 && lv_i >= auto1FD49190_ae) ) ; lv_i += auto1FD49190_ai ) {
        libNtve_gf_SetDialogItemToggled(gv_alertMenuButton[lv_i], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_benchmarksMenuButton[lv_i], true, PlayerGroupAll());
    }
    DialogSetVisible(gv_alertMenuDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_benchmarkDialog, PlayerGroupAll(), true);
}

void gf_CreateMenuSelectButtons (int lp_menuIndex) {
    // Implementation
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_menuSelectButtonWidth, gv_menuSelectButtonHeight, c_anchorTop, (-(gv_menuSelectButtonWidth/2)), 0, StringExternal("Param/Value/5B6E2BC7"), StringExternal("Param/Value/2773FF33"), "");
    libNtve_gf_SetDialogItemClickOnDown(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemToggled(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_benchmarksMenuButton[lp_menuIndex] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_menuSelectButtonWidth, gv_menuSelectButtonHeight, c_anchorTop, (gv_menuSelectButtonWidth/2), 0, StringExternal("Param/Value/9DD48295"), StringExternal("Param/Value/54E2AB67"), "");
    libNtve_gf_SetDialogItemClickOnDown(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_alertMenuButton[lp_menuIndex] = DialogControlLastCreated();
}

void gf_ResetBuildOrderListBox (int lp_listBox) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    DialogControlRemoveAllItems(lp_listBox, PlayerGroupAll());
}

void gf_UpdateBuildOrderListBoxwithCurrentBuild (int lp_listBox) {
    int autoF990DA09_ae;
    int autoF990DA09_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoF990DA09_ae = (gv_currentBuildOrderStepCursor-1);
    autoF990DA09_ai = 1;
    lv_i = 0;
    for ( ; ( (autoF990DA09_ai >= 0 && lv_i <= autoF990DA09_ae) || (autoF990DA09_ai <= 0 && lv_i >= autoF990DA09_ae) ) ; lv_i += autoF990DA09_ai ) {
        DialogControlAddItem(lp_listBox, PlayerGroupAll(), gf_GetCurrentBuildOrderStepText(lv_i));
    }
}

void gf_CreateHelpDialog () {
    // Implementation
    DialogCreate(gv_benchmarkDialogWidth, gv_benchmarkDialogHeight, c_anchorCenter, 0, -150, true);
    gv_helpDialog = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), gv_helpDialogTitle);
    DialogSetTransparency(DialogLastCreated(), 0.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, (gv_menuPadding), (gv_menuPadding+gv_benchmarkDialogTitleSpacer), StringExternal("Param/Value/CBB81B85"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_helpCommandLabelWidth+gv_menuOptionIndent), (gv_menuPadding+gv_benchmarkDialogTitleSpacer), StringExternal("Param/Value/7A79B9B9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_sectionLabelWidth, gv_sectionLabelHeight, c_anchorTopLeft, (gv_menuPadding+gv_menuOptionIndent+gv_helpCommandLabelWidth+gv_helpHotkeyLabelWidth), (gv_menuPadding+gv_benchmarkDialogTitleSpacer), StringExternal("Param/Value/99445BE1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gf_CreateHelpInfoRow(StringExternal("Param/Value/0D7071BE"), StringExternal("Param/Value/B36B4059"), StringExternal("Param/Value/EFA43440"), 0);
    gf_CreateHelpInfoRow(StringExternal("Param/Value/5C5B6190"), StringExternal("Param/Value/3E7A53DD"), StringExternal("Param/Value/9CD7E854"), 1);
    gf_CreateHelpInfoRow(StringExternal("Param/Value/D498D14D"), StringExternal("Param/Value/D75B7086"), StringExternal("Param/Value/A963FAF3"), 2);
    gf_CreateHelpInfoRow(StringExternal("Param/Value/6639460A"), StringExternal("Param/Value/5AC1BD33"), StringExternal("Param/Value/945362B1"), 3);
    gf_CreateHelpInfoRow(StringExternal("Param/Value/732FD0CC"), StringExternal("Param/Value/E709BC6E"), StringExternal("Param/Value/7A5AB46F"), 4);
    gf_CreateHelpInfoRow(StringExternal("Param/Value/2EFCFDB5"), StringExternal("Param/Value/1234E292"), StringExternal("Param/Value/62BC3490"), 5);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_startButtonWidth, gv_startButtonHeight, c_anchorBottom, 0, gv_menuPadding, StringExternal("Param/Value/87960E2D"), StringExternal("Param/Value/208CDB48"), "");
    gv_helpOkButton = DialogControlLastCreated();
}

void gf_CreateHelpInfoRow (text lp_commandText, text lp_hotkeyText, text lp_descriptionText, int lp_rowNum) {
    // Variable Declarations
    int lv_rowXOffset;
    int lv_rowYOffset;

    // Variable Initialization

    // Implementation
    lv_rowXOffset = (gv_menuPadding+gv_menuOptionIndent);
    lv_rowYOffset = (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight+lp_rowNum*gv_helpDialogItemHeight);
    TextExpressionSetToken("Param/Expression/2D6CF9BC", "A", lp_commandText);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_helpCommandLabelWidth, gv_helpDialogItemHeight, c_anchorTopLeft, lv_rowXOffset, lv_rowYOffset, TextExpressionAssemble("Param/Expression/2D6CF9BC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    TextExpressionSetToken("Param/Expression/D6AE440F", "A", lp_hotkeyText);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_helpHotkeyLabelWidth, gv_helpDialogItemHeight, c_anchorTopLeft, (lv_rowXOffset+gv_helpCommandLabelWidth), lv_rowYOffset, TextExpressionAssemble("Param/Expression/D6AE440F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    TextExpressionSetToken("Param/Expression/0684E3AA", "A", lp_descriptionText);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_helpDescriptionLabelWidth, gv_helpDialogItemHeight, c_anchorTopLeft, (lv_rowXOffset+gv_helpCommandLabelWidth+gv_helpHotkeyLabelWidth), lv_rowYOffset, TextExpressionAssemble("Param/Expression/0684E3AA"), ColorWithAlpha(0,0,0,0), false, 2.0);
}

void gf_CloseHelpDialogandUnpause () {
    // Implementation
    DialogSetVisible(gv_helpDialog, PlayerGroupAll(), false);
    gf_UnpauseGame();
    Wait(0.1, c_timeGame);
    gv_helpDialogOpen = false;
}

void gf_InitializePostBuildReportDialog () {
    // Variable Declarations
    int lv_labelHeightOffset;

    // Variable Initialization
    lv_labelHeightOffset = (gv_menuPadding+gv_benchmarkDialogTitleSpacer);

    // Implementation
    gf_CreatePostBuildReportDialog();
    gf_CreatePostBuildReportHeaderRowLabels();
    gf_CreatePostBuildReportStatsSection();
    gf_CreatePostBuildBuildOrderListBox();
    gf_CreatePostBuildReportDialogButtons();
}

void gf_CreatePostBuildReportDialog () {
    // Implementation
    DialogCreate(gv_postBuildReportDialogWidth, gv_benchmarkDialogHeight, c_anchorCenter, 0, -150, true);
    gv_postBuildReportDialog = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), gv_postBuildReportDialogTitle);
    DialogSetTransparency(DialogLastCreated(), 0.0);
}

void gf_CreatePostBuildReportDialogButtons () {
    // Implementation
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_postBuildReportBuildButtonWidth, gv_postBuildReportBuildButtonHeight, c_anchorTopRight, (gv_menuPadding+gv_postBuildReportBuildButtonWidth), gv_menuPadding, StringExternal("Param/Value/6781271F"), StringExternal("Param/Value/81D36081"), "");
    gv_postBuildReportSaveBuildButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_postBuildReportBuildButtonWidth, gv_postBuildReportBuildButtonHeight, c_anchorTopRight, (gv_menuPadding), gv_menuPadding, StringExternal("Param/Value/F104DC19"), StringExternal("Param/Value/755A8EDF"), "");
    gv_postBuildReportResetBuildButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_startButtonWidth, gv_startButtonHeight, c_anchorBottom, 0, gv_menuPadding, StringExternal("Param/Value/2C18426B"), StringExternal("Param/Value/12E7CB88"), "");
    gv_backToMenuButton = DialogControlLastCreated();
}

void gf_CreatePostBuildReportHeaderRowLabels () {
    // Variable Declarations
    int lv_labelHeightOffset;

    // Variable Initialization
    lv_labelHeightOffset = (gv_menuPadding+gv_benchmarkDialogTitleSpacer);

    // Implementation
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportMatchupLabelWidth, gv_postBuildReportMatchupLabelHeight, c_anchorTopLeft, gv_postBuildReportMatchupLabelXOffset, gv_postBuildReportMatchupLabelYOffset, StringExternal("Param/Value/CAB58423"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportMatchupLabel = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/14A9E66D", "A", StringExternal("Param/Value/F716237B"));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatLabelWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, gv_menuPadding, lv_labelHeightOffset, TextExpressionAssemble("Param/Expression/14A9E66D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatValueWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth), lv_labelHeightOffset, StringExternal("Param/Value/F5E658E8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatBestWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth+gv_postBuildReportStatValueWidth), lv_labelHeightOffset, StringExternal("Param/Value/F85B1717"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatPercentDifferenceWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth+gv_postBuildReportStatValueWidth+gv_postBuildReportStatBestWidth), lv_labelHeightOffset, StringExternal("Param/Value/E400253A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_buildOrderListBoxWidth, gv_postBuildReportDialogItemHeight, c_anchorTopRight, (gv_menuPadding), lv_labelHeightOffset, StringExternal("Param/Value/C9C07C6F"), ColorWithAlpha(0,0,0,0), false, 2.0);
}

void gf_CreatePostBuildDialogSectionLabel () {
}

void gf_CreatePostBuildReportStatsSection () {
    // Variable Declarations
    int lv_rowNum;

    // Variable Initialization

    // Implementation
    gf_CreatePostBuildStatAnalysisRow(StringExternal("Param/Value/6B84EE69"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildStatAnalysisRow(StringExternal("Param/Value/0E4EEB09"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildStatAnalysisRow(StringExternal("Param/Value/20678D32"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildStatAnalysisRow(StringExternal("Param/Value/3C294871"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildStatAnalysisRow(StringExternal("Param/Value/73C24276"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildStatAnalysisRow(StringExternal("Param/Value/63136B44"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildStatAnalysisRow(StringExternal("Param/Value/EC88E789"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildStatAnalysisRow(StringExternal("Param/Value/5AB70D09"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildStatAnalysisRow(StringExternal("Param/Value/F41844C5"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildStatAnalysisRow(StringExternal("Param/Value/E2A18B66"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildStatAnalysisRow(StringExternal("Param/Value/36C10325"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildStatAnalysisRow(StringExternal("Param/Value/60211347"), lv_rowNum);
    lv_rowNum += 1;
    gf_CreatePostBuildStatAnalysisRow(StringExternal("Param/Value/C219FD1E"), lv_rowNum);
    lv_rowNum += 1;
}

void gf_CreatePostBuildStatAnalysisRow (text lp_labelText, int lp_rowOffset) {
    // Variable Declarations
    int lv_yOffset;

    // Variable Initialization
    lv_yOffset = (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight+lp_rowOffset*gv_postBuildReportDialogItemHeight);

    // Implementation
    TextExpressionSetToken("Param/Expression/90E834B6", "A", lp_labelText);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatLabelWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, gv_menuPadding, lv_yOffset, TextExpressionAssemble("Param/Expression/90E834B6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportDialogItems[lp_rowOffset][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatValueWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth), lv_yOffset, StringExternal("Param/Value/DE7D7FEB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportDialogItems[lp_rowOffset][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatBestWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth+gv_postBuildReportStatValueWidth), lv_yOffset, StringExternal("Param/Value/B3580BC2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportDialogItems[lp_rowOffset][2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_postBuildReportStatPercentDifferenceWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_postBuildReportStatLabelWidth+gv_postBuildReportStatValueWidth+gv_postBuildReportStatBestWidth), lv_yOffset, StringExternal("Param/Value/A474714C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_postBuildReportDialogItems[lp_rowOffset][3] = DialogControlLastCreated();
}

void gf_CreatePostBuildBuildOrderListBox () {
    // Implementation
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_buildOrderListBoxWidth, gv_buildOrderListBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight));
    gv_postBuildReportBuildOrderListBox = DialogControlLastCreated();
}

void gf_UpdatePostBuildMatchupText () {
    // Implementation
    libNtve_gf_SetDialogItemTextWriteout(gv_postBuildReportMatchupLabel, true, PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteoutDuration(gv_postBuildReportMatchupLabel, 0.3, PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/122973C8", "A", gf_GetCurrentlySelectedMatchupasText());
    libNtve_gf_SetDialogItemText(gv_postBuildReportMatchupLabel, TextExpressionAssemble("Param/Expression/122973C8"), PlayerGroupAll());
}

void gf_UpdatePostBuildReportDialogValues (bool lp_updateBuildOrderListBox) {
    // Implementation
    gf_UpdatePostBuildStatRowValueasReal(gf_CalculateSpendingQuotient(), gv_bestSpendingQuotientEntryKey, 0, true);
    gf_UpdatePostBuildStatRowValueasInt(gv_workersCreatedCurrentBuild, gv_bestTotalWorkersCreatedEntryKey, 1, true);
    gf_UpdatePostBuildStatRowValueasInt(gf_GetTotalArmySupply(), gv_bestTotalArmySupplyEntryKey, 2, true);
    gf_UpdatePostBuildStatRowValueasInt(gf_GetTotalArmyValueMinerals(), gv_bestTotalArmyValueMineralsEntryKey, 3, true);
    gf_UpdatePostBuildStatRowValueasInt(gf_GetTotalArmyValueGas(), gv_bestTotalArmyValueGasEntryKey, 4, true);
    gf_UpdatePostBuildStatRowValueasInt(gf_GetNumUpgradesResearched(), gv_bestNumUpgradesResearchedEntryKey, 5, true);
    gf_UpdatePostBuildStatRowValueasInt(gf_GetTotalMineralsCollected(), gv_bestTotalMineralsCollectedEntryKey, 6, true);
    gf_UpdatePostBuildStatRowValueasInt(gf_GetTotalGasCollected(), gv_bestTotalGasCollectedEntryKey, 7, true);
    gf_UpdatePostBuildStatRowValueasTime(gf_GetTimeSupplyBlocked(), gv_bestTimeSupplyBlockedEntryKey, 8, false);
    gf_UpdatePostBuildStatRowValueasTime(gf_GetIdleProductionTime(), gv_bestIdleProductionTimeEntryKey, 9, false);
    gf_UpdatePostBuildStatRowValueasInt(gf_GetAverageUnspentMinerals(), gv_bestAverageUnspentMineralsEntryKey, 10, false);
    gf_UpdatePostBuildStatRowValueasInt(gf_GetAverageUnspentGas(), gv_bestAverageUnspentGasEntryKey, 11, false);
    gf_UpdatePostBuildStatRowValueasReal(gf_GetAverageBuildAPM(), gv_bestAverageAPMEntryKey, 12, true);
    if ((lp_updateBuildOrderListBox == true)) {
        gf_ResetBuildOrderListBox(gv_postBuildReportBuildOrderListBox);
        gf_UpdateBuildOrderListBoxwithCurrentBuild(gv_postBuildReportBuildOrderListBox);
    }
    else {
    }
}

void gf_UpdatePostBuildStatRowValueasInt (int lp_value, string lp_benchmarkEntryKey, int lp_rowNumber, bool lp_higherIsBetter) {
    // Variable Declarations
    int lv_benchmarkValue;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/B465A6FA", "A", IntToText(lp_value));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[lp_rowNumber][1], TextExpressionAssemble("Param/Expression/B465A6FA"), PlayerGroupAll());
    lv_benchmarkValue = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), lp_benchmarkEntryKey);
    TextExpressionSetToken("Param/Expression/F6BAF499", "A", IntToText(lv_benchmarkValue));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[lp_rowNumber][2], TextExpressionAssemble("Param/Expression/F6BAF499"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[lp_rowNumber][3], gf_CalculateIntPercentDifferenceasText(lp_value, lv_benchmarkValue, lp_higherIsBetter), PlayerGroupAll());
}

void gf_UpdatePostBuildStatRowValueasReal (fixed lp_value, string lp_benchmarkEntryKey, int lp_rowNumber, bool lp_higherIsBetter) {
    // Variable Declarations
    fixed lv_benchmarkValue;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/58FC52E5", "A", FixedToText(lp_value, 2));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[lp_rowNumber][1], TextExpressionAssemble("Param/Expression/58FC52E5"), PlayerGroupAll());
    lv_benchmarkValue = BankValueGetAsFixed(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), lp_benchmarkEntryKey);
    TextExpressionSetToken("Param/Expression/11DCA616", "A", FixedToText(lv_benchmarkValue, 2));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[lp_rowNumber][2], TextExpressionAssemble("Param/Expression/11DCA616"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[lp_rowNumber][3], gf_CalculateRealPercentDifferenceasText(lp_value, lv_benchmarkValue, lp_higherIsBetter), PlayerGroupAll());
}

void gf_UpdatePostBuildStatRowValueasTime (int lp_value, string lp_benchmarkEntryKey, int lp_rowNumber, bool lp_higherIsBetter) {
    // Variable Declarations
    int lv_benchmarkValue;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/47991026", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_value));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[lp_rowNumber][1], TextExpressionAssemble("Param/Expression/47991026"), PlayerGroupAll());
    lv_benchmarkValue = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), lp_benchmarkEntryKey);
    TextExpressionSetToken("Param/Expression/430A1346", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_benchmarkValue));
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[lp_rowNumber][2], TextExpressionAssemble("Param/Expression/430A1346"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_postBuildReportDialogItems[lp_rowNumber][3], gf_CalculateIntPercentDifferenceasText(lp_value, lv_benchmarkValue, lp_higherIsBetter), PlayerGroupAll());
}

void gf_CreateStatsDialog () {
    int autoF8DF752B_ae;
    int autoF8DF752B_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    DialogCreate(gv_statsDialogWidth, gv_benchmarkDialogHeight, c_anchorCenter, 0, -150, true);
    gv_statsDialog = DialogLastCreated();
    DialogSetTransparency(DialogLastCreated(), 0.0);
    DialogSetTitle(gv_statsDialog, gv_statsDialogTitle);
    gf_CreateStatsDialogHeaderRowLabels();
    autoF8DF752B_ae = gv_statsDialogMaxItems;
    autoF8DF752B_ai = 1;
    lv_i = 0;
    for ( ; ( (autoF8DF752B_ai >= 0 && lv_i <= autoF8DF752B_ae) || (autoF8DF752B_ai <= 0 && lv_i >= autoF8DF752B_ae) ) ; lv_i += autoF8DF752B_ai ) {
        gf_CreateStatsDialogRow(lv_i);
    }
    gf_CreateStatsBuildOrderListBox();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_startButtonWidth, gv_startButtonHeight, c_anchorBottom, 0, gv_menuPadding, StringExternal("Param/Value/5BF28F50"), StringExternal("Param/Value/35192382"), "");
    gv_statsOkButton = DialogControlLastCreated();
}

void gf_CreateStatsDialogHeaderRowLabels () {
    // Variable Declarations
    int lv_labelHeightOffset;

    // Variable Initialization
    lv_labelHeightOffset = (gv_menuPadding+gv_benchmarkDialogTitleSpacer);

    // Implementation
    TextExpressionSetToken("Param/Expression/CC2AD512", "A", StringExternal("Param/Value/6B6264D9"));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_statLabelWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, gv_menuPadding, lv_labelHeightOffset, TextExpressionAssemble("Param/Expression/CC2AD512"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_statValueWidth, gv_postBuildReportDialogItemHeight, c_anchorTopLeft, (gv_menuPadding+gv_statLabelWidth), lv_labelHeightOffset, StringExternal("Param/Value/469EC4F5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_buildOrderListBoxWidth, gv_postBuildReportDialogItemHeight, c_anchorTopRight, (gv_menuPadding), lv_labelHeightOffset, StringExternal("Param/Value/527AE2D2"), ColorWithAlpha(0,0,0,0), false, 2.0);
}

void gf_CreateStatsDialogRow (int lp_rowOffset) {
    // Variable Declarations
    int lv_xOffset;
    int lv_yOffset;

    // Variable Initialization
    lv_xOffset = gv_menuPadding;
    lv_yOffset = (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight+lp_rowOffset*gv_postBuildReportDialogItemHeight);

    // Implementation
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_statLabelWidth, gv_menuItemHeight, c_anchorTopLeft, lv_xOffset, lv_yOffset, StringExternal("Param/Value/0D0D4C72"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_statValueDialogItems[lp_rowOffset][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_statValueWidth, gv_menuItemHeight, c_anchorTopLeft, (gv_statLabelWidth+lv_xOffset), lv_yOffset, StringExternal("Param/Value/FA90A0B2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_statValueDialogItems[lp_rowOffset][1] = DialogControlLastCreated();
}

void gf_CreateStatsBuildOrderListBox () {
    // Implementation
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_buildOrderListBoxWidth, gv_buildOrderListBoxHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, gv_menuPadding, (gv_menuPadding+gv_benchmarkDialogTitleSpacer+gv_sectionLabelHeight));
    gv_statsDialogBuildOrderListBox = DialogControlLastCreated();
}

void gf_RefreshStatsDialog () {
    // Variable Declarations
    int lv_rowNum;

    // Variable Initialization

    // Implementation
    gf_RefreshStatsDialogRow(lv_rowNum, StringExternal("Param/Value/79A57BD9"), IntToText(gv_workersCreatedCurrentBuild));
    lv_rowNum += 1;
    gf_RefreshStatsDialogRow(lv_rowNum, StringExternal("Param/Value/67D50843"), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gf_GetIdleProductionTime()));
    lv_rowNum += 1;
    gf_RefreshStatsDialogRow(lv_rowNum, StringExternal("Param/Value/C1F8724A"), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gf_GetTimeSupplyBlocked()));
    lv_rowNum += 1;
    gf_RefreshStatsDialogRow(lv_rowNum, StringExternal("Param/Value/1D3859A8"), IntToText(gf_GetAverageBuildAPM()));
    lv_rowNum += 1;
    gf_RefreshStatsDialogRow(lv_rowNum, StringExternal("Param/Value/97924FC0"), FixedToText(gf_GetAverageResourceCollectionRate(), 0));
    lv_rowNum += 1;
    gf_RefreshStatsDialogRow(lv_rowNum, StringExternal("Param/Value/A871F70E"), IntToText(gf_GetAverageUnspentMinerals()));
    lv_rowNum += 1;
    gf_RefreshStatsDialogRow(lv_rowNum, StringExternal("Param/Value/5B6AA620"), IntToText(gf_GetAverageUnspentGas()));
    lv_rowNum += 1;
    gf_ResetBuildOrderListBox(gv_statsDialogBuildOrderListBox);
    gf_UpdateBuildOrderListBoxwithCurrentBuild(gv_statsDialogBuildOrderListBox);
}

void gf_RefreshStatsDialogRow (int lp_rowOffset, text lp_labelText, text lp_statValueText) {
    // Implementation
    TextExpressionSetToken("Param/Expression/AFE69EE0", "A", lp_labelText);
    libNtve_gf_SetDialogItemText(gv_statValueDialogItems[lp_rowOffset][0], TextExpressionAssemble("Param/Expression/AFE69EE0"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/2A19E61D", "A", lp_statValueText);
    libNtve_gf_SetDialogItemText(gv_statValueDialogItems[lp_rowOffset][1], TextExpressionAssemble("Param/Expression/2A19E61D"), PlayerGroupAll());
}

void gf_CloseStatsDialogandUnpause () {
    // Implementation
    DialogSetVisible(gv_statsDialog, PlayerGroupAll(), false);
    gf_UnpauseGame();
    Wait(0.1, c_timeGame);
    gv_statsDialogOpen = false;
}

void gf_LogStringMessage (bool lp_alertTypeFlag, string lp_message) {
    // Implementation
    gf_LogTextMessage(lp_alertTypeFlag, StringToText(lp_message));
}

void gf_LogTextMessage (bool lp_alertTypeFlag, text lp_message) {
    // Implementation
    if ((lp_alertTypeFlag == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, lp_message);
    }
    else {
    }
}

void gf_InitializeBankDefaults () {
    string auto12733010_val;

    // Implementation
    gv_benchmarkSupplyEntryKeys[0] = "supplyBenchmark1";
    gv_benchmarkSupplyEntryKeys[1] = "supplyBenchmark2";
    gv_benchmarkSupplyEntryKeys[2] = "supplyBenchmark3";
    auto12733010_val = PlayerRace(1);
    if (auto12733010_val == "Zerg") {
        gv_currentMatchupSectionKeys[0] = gv_zvZMatchupSectionKey;
        gv_currentMatchupSectionKeys[1] = gv_zvTMatchupSectionKey;
        gv_currentMatchupSectionKeys[2] = gv_zvPMatchupSectionKey;
    }
    else if (auto12733010_val == "Terr") {
        gv_currentMatchupSectionKeys[0] = gv_tvZMatchupSectionKey;
        gv_currentMatchupSectionKeys[1] = gv_tvTMatchupSectionKey;
        gv_currentMatchupSectionKeys[2] = gv_tvPMatchupSectionKey;
    }
    else if (auto12733010_val == "Prot") {
        gv_currentMatchupSectionKeys[0] = gv_pvZMatchupSectionKey;
        gv_currentMatchupSectionKeys[1] = gv_pvTMatchupSectionKey;
        gv_currentMatchupSectionKeys[2] = gv_pvPMatchupSectionKey;
    }
    else {
    }
    gv_currentlySelectedMatchupIndex = 0;
    gv_alertConfigurationSectionKey = ((PlayerRace(1)) + "AlertConfigurations");
}

void gf_InitializeDialogDefaults () {
    string auto6EDFB34C_val;

    // Implementation
    gv_alertRowLabelWidths[0][0] = 335;
    gv_alertRowLabelWidths[1][0] = 292;
    gv_alertRowLabelWidths[2][0] = 317;
    gv_alertRowLabelWidths[2][1] = 252;
    auto6EDFB34C_val = PlayerRace(1);
    if (auto6EDFB34C_val == "Prot") {
        gv_alertRowLabelWidths[3][0] = (gv_alertMenuSupplyBlockBaseWidth+gv_alertMenuNexusNameWidth);
    }
    else if (auto6EDFB34C_val == "Terr") {
        gv_alertRowLabelWidths[3][0] = (gv_alertMenuSupplyBlockBaseWidth+gv_alertMenuOrbitalNameWidth);
    }
    else if (auto6EDFB34C_val == "Zerg") {
        gv_alertRowLabelWidths[3][0] = (gv_alertMenuSupplyBlockBaseWidth+gv_alertMenuQueenNameWidth);
    }
    else {
    }
    gv_alertRowLabelWidths[4][0] = 400;
    gv_alertRowLabelWidths[4][1] = gv_secondsLabelWidth;
    gv_alertRowLabelWidths[5][0] = 483;
    gv_alertRowLabelWidths[5][1] = gv_secondsLabelWidth;
    gv_alertRowLabelWidths[6][0] = 357;
    gv_alertRowLabelWidths[7][0] = 335;
}

void gf_InitializeGameDefaults () {
    // Implementation
    gv_overlordMorphDuration = 25;
    gv_warningPingCooldownSeconds = 1.5;
    gv_alertCooldownSeconds = 15;
    gv_alertMineralsThreshold = 800;
    gv_alertGasThreshold = 400;
    gv_alertSupplyBlockStart = 50;
    gv_alertUpgradeGapThreshold = 20;
    gv_productionIdleThreshold = 20;
    gv_alertSupplyBlockWithinCapThreshold = 6;
    gv_alertZergDefaultMacroEnergyThreshold = 40;
    gv_alertTerranDefaultMacroEnergyThreshold = 65;
    gv_alertProtossDefaultMacroEnergyThreshold = 55;
    gv_benchmarkMaxTimeMinutes = 15;
    gv_benchmarkMaxTimeSeconds = 0;
    gv_benchmarkEndBuildatMinutes = 15;
    gv_benchmarkEndBuildatSeconds = 0;
    gv_benchmarkTimerDurations[0] = 360;
    gv_benchmarkTimerDurations[1] = 480;
    gv_benchmarkTimerDurations[2] = 600;
    gv_trackSupplyUnitsAsObjectives = true;
    gv_multipleUnitTimeCutoffThreshold = 15;
    gv_trackSupplyUnitObjectivesUntil = 40;
    gv_trackQueensUntil = 40;
    gv_buildOrderMaxGasSupply = 60;
    gv_buildHintTimeThreshold = 10.0;
    gv_maxDisplayedBuildOrderObjectives1 = 9;
    gv_benchmarkBuildOrderObjectiveCycleThreshold = 5;
    gv_benchmarkSupplyDefaults[0] = 30;
    gv_benchmarkSupplyDefaults[1] = 55;
    gv_benchmarkSupplyDefaults[2] = 80;
}

void gf_InitializeMapResourcesUnitGroup () {
    unitgroup auto59129081_g;
    int auto59129081_u;
    unitgroup autoAECA9D28_g;
    int autoAECA9D28_u;

    // Variable Declarations
    unit lv_currentResource;

    // Variable Initialization

    // Implementation
    auto59129081_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, 0, 0), 0);
    auto59129081_u = 1;
    for ( ; auto59129081_u <= UnitGroupCount(auto59129081_g, c_unitCountAll) ; auto59129081_u += BoolToInt(lv_currentResource == UnitGroupUnit(auto59129081_g, auto59129081_u)) ) {
        lv_currentResource = UnitGroupUnit(auto59129081_g, auto59129081_u);
        UnitGroupAdd(gv_resources, lv_currentResource);
        if ((gv_debugMapMechanicsEnabled == true)) {
            TextExpressionSetToken("Param/Expression/2322ADF7", "A", UnitTypeGetName(UnitGetType(lv_currentResource)));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/2322ADF7"));
        }
        else {
        }
    }
    autoAECA9D28_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRawResource), 0, 0, 0), 0);
    autoAECA9D28_u = 1;
    for ( ; autoAECA9D28_u <= UnitGroupCount(autoAECA9D28_g, c_unitCountAll) ; autoAECA9D28_u += BoolToInt(lv_currentResource == UnitGroupUnit(autoAECA9D28_g, autoAECA9D28_u)) ) {
        lv_currentResource = UnitGroupUnit(autoAECA9D28_g, autoAECA9D28_u);
        UnitGroupAdd(gv_resources, lv_currentResource);
        if ((gv_debugMapMechanicsEnabled == true)) {
            TextExpressionSetToken("Param/Expression/1C0F331A", "A", UnitTypeGetName(UnitGetType(lv_currentResource)));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/1C0F331A"));
        }
        else {
        }
    }
}

void gf_InitializeBank () {
    // Implementation
    BankLoad("benchmarker", 1);
    gv_benchmarkerBank = BankLastCreated();
    gf_CreateMatchupBankSections();
}

void gf_InitializeBuildConfiguration () {
    // Implementation
    gf_InitializeBenchmarkBuildOrder();
    gf_InitializeBenchmarkSupplyObjectives();
}

void gf_CreateMatchupBankSections () {
    // Implementation
    BankSectionCreate(gv_benchmarkerBank, gv_zvZMatchupSectionKey);
    BankSectionCreate(gv_benchmarkerBank, gv_zvTMatchupSectionKey);
    BankSectionCreate(gv_benchmarkerBank, gv_zvPMatchupSectionKey);
    BankSectionCreate(gv_benchmarkerBank, gv_tvZMatchupSectionKey);
    BankSectionCreate(gv_benchmarkerBank, gv_tvTMatchupSectionKey);
    BankSectionCreate(gv_benchmarkerBank, gv_tvPMatchupSectionKey);
    BankSectionCreate(gv_benchmarkerBank, gv_pvZMatchupSectionKey);
    BankSectionCreate(gv_benchmarkerBank, gv_pvTMatchupSectionKey);
    BankSectionCreate(gv_benchmarkerBank, gv_pvPMatchupSectionKey);
}

void gf_ResetGameState () {
    // Variable Declarations
    unitgroup lv_player1Units;

    // Variable Initialization
    lv_player1Units = UnitGroupEmpty();

    // Implementation
    gf_ResetMapResources();
    lv_player1Units = gf_GetAllPlayer1Units();
    if ((UnitGroupCount(lv_player1Units, c_unitCountAlive) >= 0)) {
        UnitGroupLoopBegin(lv_player1Units);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        MeleeInitUnits();
    }
    else {
    }
    MeleeInitResources();
    gf_ResetGameVariables();
    gf_ResetStatistics();
    gf_ResetCurrentBuildOrderStepsVariables();
    gf_ResetBenchmarkSupplyObjectives();
    gf_ResetBenchmarkBuildOrderObjectives();
    gf_ResetBenchmarkBuildOrderStepsVariables();
    gf_ResetAlertTimers();
    gf_ResetBenchmarkTimers();
    TimerRestart(gv_currentBuildBuildTimer);
    gf_ResetCamera();
}

void gf_ResetMapResources () {
    unitgroup auto239B13AC_g;
    int auto239B13AC_u;

    // Variable Declarations
    string lv_currentResourceType;
    point lv_currentPosition;
    unit lv_currentResource;
    int lv_resourcesReplaced;

    // Variable Initialization

    // Implementation
    auto239B13AC_g = gv_resources;
    auto239B13AC_u = 1;
    for ( ; auto239B13AC_u <= UnitGroupCount(auto239B13AC_g, c_unitCountAll) ; auto239B13AC_u += BoolToInt(lv_currentResource == UnitGroupUnit(auto239B13AC_g, auto239B13AC_u)) ) {
        lv_currentResource = UnitGroupUnit(auto239B13AC_g, auto239B13AC_u);
        lv_currentResourceType = UnitGetType(lv_currentResource);
        if (((((lv_currentResourceType == "VespeneGeyser") || (lv_currentResourceType == "RichVespeneGeyser") || (lv_currentResourceType == "ProtossVespeneGeyser") || (lv_currentResourceType == "SpacePlatformGeyser")) && (libNtve_gf_UnitGetPropertyResources(lv_currentResource, c_unitPropCurrent) < 2500)) || (((lv_currentResourceType == "MineralField") || (lv_currentResourceType == "RichMineralField")) && (libNtve_gf_UnitGetPropertyResources(lv_currentResource, c_unitPropCurrent) < 1500)))) {
            lv_currentPosition = UnitGetPosition(lv_currentResource);
            UnitRemove(lv_currentResource);
            UnitGroupRemove(gv_resources, lv_currentResource);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_currentResourceType, 0, 0, lv_currentPosition);
            UnitGroupAdd(gv_resources, UnitLastCreated());
            lv_resourcesReplaced += 1;
        }
        else {
        }
    }
    if ((gv_debugMapMechanicsEnabled == true)) {
        TextExpressionSetToken("Param/Expression/F4AFF87D", "A", IntToText(lv_resourcesReplaced));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/F4AFF87D"));
    }
    else {
    }
}

void gf_ResetTechTree () {
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergGroundArmorsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergGroundArmorsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergGroundArmorsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerArmorsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerArmorsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerArmorsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerWeaponsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerWeaponsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerWeaponsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMeleeWeaponsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMeleeWeaponsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMeleeWeaponsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMissileWeaponsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMissileWeaponsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMissileWeaponsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Burrow", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NeuralParasite", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "InfestorEnergyUpgrade", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "CentrificalHooks", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "LocustLifetimeIncrease", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "hydraliskspeed", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "HydraliskSpeedUpgrade", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "GlialReconstitution", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "OrganicCarapace", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TunnelingClaws", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "overlordspeed", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "overlordtransport", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "zerglingmovementspeed", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "zerglingattackspeed", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ChitinousPlating", 0);
}

void gf_ResetCamera () {
    // Implementation
    CameraRestore(1, 0.75, -1, 10.0);
}

void gf_ResetGameVariables () {
    // Implementation
    gv_workersCreatedCurrentBuild = 6;
    gv_timeProductionIdleThisBuild = 0;
    gv_timeSupplyBlockedThisBuild = 0;
    gv_cumulativeAverageUnspentMineralsCurrentBuild = 0;
    gv_cumulativeAverageUnspentGasCurrentBuild = 0;
    gv_averageUnspentResourceSamples = 0;
    gv_cumulativeAverageMineralResourceCollectionRateCurrentBuild = 0;
    gv_cumulativeAverageGasResourceCollectionRateCurrentBuild = 0;
    gv_resourceCollectionRateSamplesCurrentBuild = 0;
    gv_cumulativeAPM = 0;
    gv_totalAPMSamplesThisBuild = 0;
    gv_totalMineralsCollectedCurrentBuild = 0;
    gv_totalGasCollectedCurrentBuild = 0;
}

void gf_ResetCurrentBuildOrderStepsVariables () {
    int autoA13422C8_ae;
    int autoA13422C8_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    gv_lastCreatedBuildOrderUnitType = "";
    autoA13422C8_ae = gv_currentBuildOrderStepCursor;
    autoA13422C8_ai = 1;
    lv_i = 0;
    for ( ; ( (autoA13422C8_ai >= 0 && lv_i <= autoA13422C8_ae) || (autoA13422C8_ai <= 0 && lv_i >= autoA13422C8_ae) ) ; lv_i += autoA13422C8_ai ) {
        gv_currentBuildOrderSteps[lv_i].lv_unitType = null;
        gv_currentBuildOrderSteps[lv_i].lv_supply = 0;
        gv_currentBuildOrderSteps[lv_i].lv_amount = 0;
        gv_currentBuildOrderSteps[lv_i].lv_elapsedSeconds = 0;
    }
    gv_currentBuildOrderStepCursor = 0;
}

void gf_ResetBenchmarkBuildOrderStepsVariables () {
    int auto488B3271_ae;
    int auto488B3271_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto488B3271_ae = gv_benchmarkBuildOrderStepCursor;
    auto488B3271_ai = 1;
    lv_i = 0;
    for ( ; ( (auto488B3271_ai >= 0 && lv_i <= auto488B3271_ae) || (auto488B3271_ai <= 0 && lv_i >= auto488B3271_ae) ) ; lv_i += auto488B3271_ai ) {
        gv_benchmarkBuildOrderSteps[lv_i].lv_unitType = null;
        gv_benchmarkBuildOrderSteps[lv_i].lv_supply = 0;
        gv_benchmarkBuildOrderSteps[lv_i].lv_amount = 0;
        gv_benchmarkBuildOrderSteps[lv_i].lv_elapsedSeconds = 0;
    }
    gv_benchmarkBuildOrderStepCursor = 0;
    gv_totalNumBenchmarkBuildOrderSteps = 0;
    gv_numFailedBenchmarkBuildOrderSteps = 0;
    gv_numCorrectedBenchmarkBuildOrderSteps = 0;
    gv_buildHintCursor = 0;
}

void gf_ResetBenchmarkBuildOrderObjectives () {
    int autoDBD3DAAA_ae;
    int autoDBD3DAAA_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoDBD3DAAA_ae = 9;
    autoDBD3DAAA_ai = 1;
    lv_i = 0;
    for ( ; ( (autoDBD3DAAA_ai >= 0 && lv_i <= autoDBD3DAAA_ae) || (autoDBD3DAAA_ai <= 0 && lv_i >= autoDBD3DAAA_ae) ) ; lv_i += autoDBD3DAAA_ai ) {
        ObjectiveDestroy(gv_benchmarkBuildOrderStepObjectives[lv_i]);
    }
}

void gf_ResetBenchmarkSupplyObjectives () {
    int auto197B812D_ae;
    int auto197B812D_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto197B812D_ae = 2;
    auto197B812D_ai = 1;
    lv_i = 0;
    for ( ; ( (auto197B812D_ai >= 0 && lv_i <= auto197B812D_ae) || (auto197B812D_ai <= 0 && lv_i >= auto197B812D_ae) ) ; lv_i += auto197B812D_ai ) {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[lv_i], c_objectiveStateActive);
        TextExpressionSetToken("Param/Expression/0ED07185", "C", TextWithColor(IntToText(gv_benchmarkSupplyValues[lv_i]), gv_benchmarkSupplyObjectiveTextColor));
        TextExpressionSetToken("Param/Expression/0ED07185", "B", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_benchmarkTimerDurations[lv_i]));
        ObjectiveSetName(gv_benchmarkSupplyObjectives[lv_i], TextExpressionAssemble("Param/Expression/0ED07185"));
        Wait(0.25, c_timeGame);
    }
    ObjectiveSetState(gv_benchmarkMaxTimeObjective, c_objectiveStateActive);
    TextExpressionSetToken("Param/Expression/B6B33C58", "B", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_benchmarkMaxTimeTotalSeconds), gv_benchmarkSupplyObjectiveTextColor));
    ObjectiveSetName(gv_benchmarkMaxTimeObjective, TextExpressionAssemble("Param/Expression/B6B33C58"));
}

void gf_PauseGame () {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    gv_paused = true;
    gf_PauseAllTimers();
    UnitPauseAll(true);
}

void gf_UnpauseGame () {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    gf_UnpauseAllTimers();
    UnitPauseAll(false);
    gv_paused = false;
}

void gf_PauseAllTimers () {
    // Implementation
    TimerPause(gv_currentBuildBuildTimer, true);
    TimerPause(gv_multipleUnitFailureTimer, true);
    gf_PauseBenchmarkTimers();
    gf_PauseAlertTimers();
}

void gf_UnpauseAllTimers () {
    // Implementation
    gf_UnpauseBenchmarkTimers();
    gf_UnpauseAlertTimers();
    TimerPause(gv_multipleUnitFailureTimer, false);
    TimerPause(gv_currentBuildBuildTimer, false);
}

void gf_StartBenchmarkTimers () {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    TimerStart(gv_benchmark1Timer, gv_benchmarkTimerDurations[0], false, c_timeGame);
    TimerStart(gv_benchmark2Timer, gv_benchmarkTimerDurations[1], false, c_timeGame);
    TimerStart(gv_benchmark3Timer, gv_benchmarkTimerDurations[2], false, c_timeGame);
    TimerStart(gv_benchmarkMaxTimeTimer, gv_benchmarkMaxTimeTotalSeconds, false, c_timeGame);
}

void gf_ResetBenchmarkTimers () {
    // Implementation
    TimerRestart(gv_benchmark1Timer);
    TimerRestart(gv_benchmark2Timer);
    TimerRestart(gv_benchmark3Timer);
    TimerRestart(gv_benchmarkMaxTimeTimer);
}

void gf_PauseBenchmarkTimers () {
    // Implementation
    TimerPause(gv_benchmark1Timer, true);
    TimerPause(gv_benchmark2Timer, true);
    TimerPause(gv_benchmark3Timer, true);
    TimerPause(gv_benchmarkMaxTimeTimer, true);
}

void gf_UnpauseBenchmarkTimers () {
    // Implementation
    TimerPause(gv_benchmark1Timer, false);
    TimerPause(gv_benchmark2Timer, false);
    TimerPause(gv_benchmark3Timer, false);
    TimerPause(gv_benchmarkMaxTimeTimer, false);
}

void gf_CreateHiddenBenchmarkSupplyObjectives () {
    int auto672AD999_ae;
    int auto672AD999_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto672AD999_ae = 2;
    auto672AD999_ai = 1;
    lv_i = 0;
    for ( ; ( (auto672AD999_ai >= 0 && lv_i <= auto672AD999_ae) || (auto672AD999_ai <= 0 && lv_i >= auto672AD999_ae) ) ; lv_i += auto672AD999_ai ) {
        ObjectiveCreate(StringExternal("Param/Value/7196AAC4"), StringExternal("Param/Value/D6D94F6E"), c_objectiveStateHidden, true);
        gv_benchmarkSupplyObjectives[lv_i] = ObjectiveLastCreated();
    }
    ObjectiveCreate(StringExternal("Param/Value/A11C3A0B"), StringExternal("Param/Value/BC9BE74F"), c_objectiveStateHidden, true);
    gv_benchmarkMaxTimeObjective = ObjectiveLastCreated();
}

void gf_HideBenchmarkSupplyObjectives () {
    int autoA3763877_ae;
    int autoA3763877_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoA3763877_ae = 2;
    autoA3763877_ai = 1;
    lv_i = 0;
    for ( ; ( (autoA3763877_ai >= 0 && lv_i <= autoA3763877_ae) || (autoA3763877_ai <= 0 && lv_i >= autoA3763877_ae) ) ; lv_i += autoA3763877_ai ) {
        ObjectiveShow(gv_benchmarkSupplyObjectives[lv_i], PlayerGroupAll(), false);
    }
    ObjectiveShow(gv_benchmarkMaxTimeObjective, PlayerGroupAll(), false);
}

void gf_InitializeBenchmarkSupplyObjectives () {
    int auto0FC1EE86_ae;
    int auto0FC1EE86_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto0FC1EE86_ae = 2;
    auto0FC1EE86_ai = 1;
    lv_i = 0;
    for ( ; ( (auto0FC1EE86_ai >= 0 && lv_i <= auto0FC1EE86_ae) || (auto0FC1EE86_ai <= 0 && lv_i >= auto0FC1EE86_ae) ) ; lv_i += auto0FC1EE86_ai ) {
        ObjectiveShow(gv_benchmarkSupplyObjectives[lv_i], PlayerGroupAll(), true);
    }
    ObjectiveShow(gv_benchmarkMaxTimeObjective, PlayerGroupAll(), true);
}

void gf_CreateBenchmarkBuildOrderStepasSecondaryObjective (int lp_buildStep) {
    // Variable Declarations
    text lv_stepObjectiveText;

    // Variable Initialization

    // Implementation
    lv_stepObjectiveText = gf_GetBenchmarkBuildOrderStepText(lp_buildStep);
    ObjectiveCreate(lv_stepObjectiveText, StringExternal("Param/Value/63BE4A54"), c_objectiveStateActive, false);
}

void gf_CompleteBenchmarkBuildOrderObjective (int lp_benchmarkBuildOrderStep) {
    // Variable Declarations
    text lv_objectiveText;

    // Variable Initialization

    // Implementation
    if (((lp_benchmarkBuildOrderStep > 0) && (ObjectiveGetState(gv_benchmarkBuildOrderStepObjectives[gf_GetObjectiveIndexforBenchmarkBuildOrderStep((lp_benchmarkBuildOrderStep - 1))]) == c_objectiveStateActive))) {
        TextExpressionSetToken("Param/Expression/AA9B4DC6", "A", IntToText(lp_benchmarkBuildOrderStep));
        TextExpressionSetToken("Param/Expression/AA9B4DC6", "B", IntToText(gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lp_benchmarkBuildOrderStep)));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/AA9B4DC6"));
        gf_FailBenchmarkBuildOrderObjective(gf_GetObjectiveIndexforBenchmarkBuildOrderStep((lp_benchmarkBuildOrderStep - 1)));
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/5CCA6BB6", "A", IntToText(lp_benchmarkBuildOrderStep));
    TextExpressionSetToken("Param/Expression/5CCA6BB6", "B", IntToText(gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lp_benchmarkBuildOrderStep)));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/5CCA6BB6"));
    lv_objectiveText = gf_GetFormattedCompleteBenchmarkBuildOrderStepText(lp_benchmarkBuildOrderStep);
    TextExpressionSetToken("Param/Expression/97DCFF5F", "A", gf_GetFormattedCompleteBenchmarkBuildOrderStepText(lp_benchmarkBuildOrderStep));
    ObjectiveSetName(gv_benchmarkBuildOrderStepObjectives[gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lp_benchmarkBuildOrderStep)], TextExpressionAssemble("Param/Expression/97DCFF5F"));
    ObjectiveSetState(gv_benchmarkBuildOrderStepObjectives[gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lp_benchmarkBuildOrderStep)], c_objectiveStateCompleted);
}

void gf_FailBenchmarkBuildOrderObjective (int lp_benchmarkBuildOrderStep) {
    // Implementation
    TextExpressionSetToken("Param/Expression/E3F2B274", "A", IntToText(lp_benchmarkBuildOrderStep));
    TextExpressionSetToken("Param/Expression/E3F2B274", "B", IntToText(gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lp_benchmarkBuildOrderStep)));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/E3F2B274"));
    ObjectiveSetState(gv_benchmarkBuildOrderStepObjectives[gf_GetObjectiveIndexforBenchmarkBuildOrderStep(lp_benchmarkBuildOrderStep)], c_objectiveStateFailed);
    gv_numFailedBenchmarkBuildOrderSteps += 1;
}

void gf_CorrectFailedBenchmarkBuildOrderObjective (int lp_benchmarkBuildOrderStep) {
    // Implementation
    TextExpressionSetToken("Param/Expression/45B375BE", "A", ObjectiveGetName(gv_benchmarkBuildOrderStepObjectives[(gv_benchmarkBuildOrderStepCursor-1)]));
    TextExpressionSetToken("Param/Expression/45B375BE", "B", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer))));
    ObjectiveSetName(gv_benchmarkBuildOrderStepObjectives[lp_benchmarkBuildOrderStep], TextExpressionAssemble("Param/Expression/45B375BE"));
    gv_numCorrectedBenchmarkBuildOrderSteps += 1;
}

void gf_CycleBenchmarkBuildOrderObjectives () {
    // Variable Declarations
    int lv_nextDisplayedBuildStepIndex;

    // Variable Initialization

    // Implementation
    lv_nextDisplayedBuildStepIndex = (gv_benchmarkBuildOrderStepCursor + gv_benchmarkBuildOrderObjectiveCycleThreshold - 1);
    gf_LogStringMessage(gv_debugBuildOrderEnabled, ("Benchmark step cursor: " + IntToString(gv_benchmarkBuildOrderStepCursor) + " , cycle threshold: " + IntToString(gv_benchmarkBuildOrderObjectiveCycleThreshold) + " and hasNext is = " + libNtve_gf_ConvertBooleanToString(gf_DoesBuildHaveAnotherStepToDisplay())));
    if ((((gv_benchmarkBuildOrderStepCursor) > gv_benchmarkBuildOrderObjectiveCycleThreshold) && (gf_DoesBuildHaveAnotherStepToDisplay() == true))) {
        gf_CreateBenchmarkBuildOrderStepasSecondaryObjective(lv_nextDisplayedBuildStepIndex);
        TextExpressionSetToken("Param/Expression/B1D812BC", "A", IntToText(lv_nextDisplayedBuildStepIndex));
        TextExpressionSetToken("Param/Expression/B1D812BC", "B", gf_GetBenchmarkBuildOrderStepText(lv_nextDisplayedBuildStepIndex));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/B1D812BC"));
        ObjectiveDestroy(gv_benchmarkBuildOrderStepObjectives[0]);
        gf_AdjustAllBenchmarkBuildOrderObjectivePositionsUpby1();
        gv_benchmarkBuildOrderStepObjectives[gv_maxDisplayedBuildOrderObjectives1] = ObjectiveLastCreated();
        gv_buildOrderCycleOffset += 1;
    }
    else {
        TextExpressionSetToken("Param/Expression/1C68CA1F", "A", IntToText(lv_nextDisplayedBuildStepIndex));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/1C68CA1F"));
    }
}

void gf_AdjustAllBenchmarkBuildOrderObjectivePositionsUpby1 () {
    int autoA714F11A_ae;
    int autoA714F11A_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoA714F11A_ae = (gv_maxDisplayedBuildOrderObjectives1 - 1);
    autoA714F11A_ai = 1;
    lv_i = 0;
    for ( ; ( (autoA714F11A_ai >= 0 && lv_i <= autoA714F11A_ae) || (autoA714F11A_ai <= 0 && lv_i >= autoA714F11A_ae) ) ; lv_i += autoA714F11A_ai ) {
        gv_benchmarkBuildOrderStepObjectives[lv_i] = gv_benchmarkBuildOrderStepObjectives[(lv_i+1)];
    }
}

void gf_InitializeBenchmarkBuildOrder () {
    // Implementation
    if ((gv_practiceAgainstBenchmarkBuildOrder == true)) {
        gf_LoadBenchmarkBuildOrder();
        if ((gv_totalNumBenchmarkBuildOrderSteps > 0)) {
            gf_CreateBenchmarkBuildOrderObjectives();
        }
        else {
        }
    }
    else {
    }
}

void gf_CreateBenchmarkBuildOrderObjectives () {
    int auto98326FC4_ae;
    int auto98326FC4_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/A1F4609D"));
    auto98326FC4_ae = gv_maxDisplayedBuildOrderObjectives1;
    auto98326FC4_ai = 1;
    lv_i = 0;
    for ( ; ( (auto98326FC4_ai >= 0 && lv_i <= auto98326FC4_ae) || (auto98326FC4_ai <= 0 && lv_i >= auto98326FC4_ae) ) ; lv_i += auto98326FC4_ai ) {
        if ((lv_i < gv_totalNumBenchmarkBuildOrderSteps)) {
            gf_CreateBenchmarkBuildOrderStepasSecondaryObjective(lv_i);
            gv_benchmarkBuildOrderStepObjectives[lv_i] = ObjectiveLastCreated();
        }
        else {
        }
    }
}

void gf_EvaluateUnitTypeandAmountForBenchmarkBuildOrderStep (string lp_unitType, int lp_amount) {
    // Implementation
    if ((gv_benchmarkBuildOrderStepCursor > 0) && ((ObjectiveGetState(gv_benchmarkBuildOrderStepObjectives[(gv_benchmarkBuildOrderStepCursor-1)]) == c_objectiveStateFailed) && (gf_IsUnitTypeCorrectForBenchmarkBuildOrderStep(lp_unitType, (gv_benchmarkBuildOrderStepCursor-1)) == true))) {
        TextExpressionSetToken("Param/Expression/BEEDD1E2", "B", UnitTypeGetName(lp_unitType));
        TextExpressionSetToken("Param/Expression/BEEDD1E2", "A", IntToText((gv_benchmarkBuildOrderStepCursor-1)));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/BEEDD1E2"));
        gf_CorrectFailedBenchmarkBuildOrderObjective(gf_GetObjectiveIndexforBenchmarkBuildOrderStep((gv_benchmarkBuildOrderStepCursor - 1)));
    }
    else {
        if ((gf_IsUnitTypeCorrectForBenchmarkBuildOrderStep(lp_unitType, gv_benchmarkBuildOrderStepCursor) == true)) {
            TextExpressionSetToken("Param/Expression/B1051469", "A", IntToText(gv_benchmarkBuildOrderStepCursor));
            gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/B1051469"));
            if (((gf_IsAmountCorrectForBenchmarkBuildOrderStep(lp_amount, gv_benchmarkBuildOrderStepCursor) == true) && (ObjectiveGetState(gv_benchmarkBuildOrderStepObjectives[(gv_benchmarkBuildOrderStepCursor)]) == c_objectiveStateActive))) {
                gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/69B6DB0E"));
                if ((TimerGetRemaining(gv_multipleUnitFailureTimer) > 0.0)) {
                    TimerStart(gv_multipleUnitFailureTimer, 0.0, false, c_timeGame);
                    TimerPause(gv_multipleUnitFailureTimer, true);
                }
                else {
                }
                gf_CompleteCurrentBuildStepAndCycle();
            }
            else {
                TextExpressionSetToken("Param/Expression/00348550", "A", IntToText(lp_amount));
                TextExpressionSetToken("Param/Expression/00348550", "B", IntToText(gv_benchmarkBuildOrderSteps[gv_benchmarkBuildOrderStepCursor].lv_amount));
                gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/00348550"));
                if (((TimerGetRemaining(gv_multipleUnitFailureTimer) == 0.0) && (gv_currentBuildOrderStepCursor > 0))) {
                    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/8A069115"));
                    TimerStart(gv_multipleUnitFailureTimer, gv_multipleUnitTimeCutoffThreshold, false, c_timeGame);
                }
                else {
                }
            }
        }
        else {
            gf_FailCurrentBuildStepAndCycle();
        }
    }
}

void gf_EvaluateUpgradeForBenchmarkBuildOrderStep (string lp_upgrade) {
    // Implementation
    TextExpressionSetToken("Param/Expression/AD04FA36", "A", gf_GetFormattedUpgradeNameasText(lp_upgrade));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/AD04FA36"));
    if ((gv_benchmarkBuildOrderStepCursor > 0) && ((ObjectiveGetState(gv_benchmarkBuildOrderStepObjectives[(gv_benchmarkBuildOrderStepCursor-1)]) == c_objectiveStateFailed) && (gf_IsUpgradeTypeCorrectForBenchmarkBuildOrderStep(lp_upgrade, (gv_benchmarkBuildOrderStepCursor-1)) == true))) {
        TextExpressionSetToken("Param/Expression/7C2BBC82", "B", gf_GetFormattedUpgradeNameasText(lp_upgrade));
        TextExpressionSetToken("Param/Expression/7C2BBC82", "A", IntToText((gv_benchmarkBuildOrderStepCursor-1)));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/7C2BBC82"));
        gf_CorrectFailedBenchmarkBuildOrderObjective((gf_GetObjectiveIndexforBenchmarkBuildOrderStep(gv_benchmarkBuildOrderStepCursor) - 1));
    }
    else {
        if ((gf_IsUpgradeTypeCorrectForBenchmarkBuildOrderStep(lp_upgrade, gv_benchmarkBuildOrderStepCursor) == true)) {
            gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/8670BD48"));
            gf_CompleteBenchmarkBuildOrderObjective(gv_benchmarkBuildOrderStepCursor);
            gv_benchmarkBuildOrderStepCursor += 1;
        }
        else {
            TextExpressionSetToken("Param/Expression/6BCF5D11", "A", IntToText((gv_benchmarkBuildOrderStepCursor-1)));
            gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/6BCF5D11"));
            gf_FailBenchmarkBuildOrderObjective(gv_benchmarkBuildOrderStepCursor);
            gv_benchmarkBuildOrderStepCursor += 1;
        }
        gf_CycleBenchmarkBuildOrderObjectives();
    }
}

void gf_AddUnitBuildOrderStep (string lp_buildStepUnitType) {
    // Variable Declarations
    int lv_buildOrderStepSupplyCount;

    // Variable Initialization

    // Implementation
    gv_lastCreatedBuildOrderUnitType = lp_buildStepUnitType;
    gv_lastCreatedUnitTimestamp = TimerGetElapsed(gv_currentBuildBuildTimer);
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_stepType = gv_unitStepType;
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_unitType = lp_buildStepUnitType;
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_amount = 1;
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_supply = gf_GetSupplyforLatestCompletedBuildOrderStep();
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_elapsedSeconds = FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer));
    TextExpressionSetToken("Param/Expression/08B35931", "A", gf_GetCurrentBuildOrderStepText(gv_currentBuildOrderStepCursor));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/08B35931"));
}

void gf_AddUpgradeBuildOrderStep (string lp_buildStepUpgrade) {
    // Implementation
    gv_lastCreatedBuildOrderUnitType = lp_buildStepUpgrade;
    gv_lastCreatedUnitTimestamp = TimerGetElapsed(gv_currentBuildBuildTimer);
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_stepType = gv_upgradeStepType;
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_upgrade = lp_buildStepUpgrade;
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_amount = 1;
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_supply = PlayerScoreValueGetAsInt(1, "FoodUsed");
    gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_elapsedSeconds = FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer));
    TextExpressionSetToken("Param/Expression/2B969709", "A", gf_GetCurrentBuildOrderStepText(gv_currentBuildOrderStepCursor));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/2B969709"));
}

void gf_DestroyBenchmarkBuildOrderObjectives () {
    int auto8EFD539D_ae;
    int auto8EFD539D_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto8EFD539D_ae = gv_maxDisplayedBuildOrderObjectives1;
    auto8EFD539D_ai = 1;
    lv_i = 0;
    for ( ; ( (auto8EFD539D_ai >= 0 && lv_i <= auto8EFD539D_ae) || (auto8EFD539D_ai <= 0 && lv_i >= auto8EFD539D_ae) ) ; lv_i += auto8EFD539D_ai ) {
        ObjectiveDestroy(gv_benchmarkBuildOrderStepObjectives[lv_i]);
    }
}

void gf_FailCurrentBuildStepAndCycle () {
    // Implementation
    gf_FailBenchmarkBuildOrderObjective(gv_benchmarkBuildOrderStepCursor);
    gv_benchmarkBuildOrderStepCursor += 1;
    gf_CycleBenchmarkBuildOrderObjectives();
}

void gf_CompleteCurrentBuildStepAndCycle () {
    // Implementation
    gf_CompleteBenchmarkBuildOrderObjective(gv_benchmarkBuildOrderStepCursor);
    gv_benchmarkBuildOrderStepCursor += 1;
    gf_CycleBenchmarkBuildOrderObjectives();
}

void gf_ResetStatistics () {
    // Implementation
    gv_workersCreatedCurrentBuild = 0;
    gv_timeProductionIdleThisBuild = 0;
    gv_timeSupplyBlockedThisBuild = 0;
    gv_cumulativeAPM = 0;
    gv_totalAPMSamplesThisBuild = 0;
    gv_cumulativeAverageMineralResourceCollectionRateCurrentBuild = 0;
    gv_cumulativeAverageGasResourceCollectionRateCurrentBuild = 0;
    gv_resourceCollectionRateSamplesCurrentBuild = 0;
    gv_cumulativeAverageUnspentMineralsCurrentBuild = 0;
    gv_cumulativeAverageUnspentGasCurrentBuild = 0;
    gv_averageUnspentResourceSamples = 0;
    gv_totalMineralsCollectedCurrentBuild = 50;
    gv_totalGasCollectedCurrentBuild = 0;
}

void gf_CreateScreenButtons () {
    // Implementation
    libNtve_gf_DisplayScreenButton(1, StringExternal("Param/Value/91F27B53"), gv_screenButtonWidth, gv_screenButtonHeight, c_anchorTopRight, gv_screenButtonXPadding, gv_screenButtonYPadding, gt_OpenMainMenu);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/B441E0B5"), PlayerGroupAll());
    libNtve_gf_DisplayScreenButton(2, StringExternal("Param/Value/A77D2D5B"), gv_screenButtonWidth, gv_screenButtonHeight, c_anchorTopRight, gv_screenButtonXPadding, (gv_screenButtonYPadding+gv_screenButtonHeight), gt_OpenHelpDialog);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/D2D6DF2E"), PlayerGroupAll());
    libNtve_gf_DisplayScreenButton(3, StringExternal("Param/Value/70C261D0"), gv_screenButtonWidth, gv_screenButtonHeight, c_anchorTopRight, gv_screenButtonXPadding, (gv_screenButtonYPadding+2*gv_screenButtonHeight), gt_OpenStatsDialog);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/E706FEFB"), PlayerGroupAll());
    libNtve_gf_DisplayScreenButton(4, StringExternal("Param/Value/5091C154"), gv_screenButtonWidth, gv_screenButtonHeight, c_anchorTopRight, gv_screenButtonXPadding, (gv_screenButtonYPadding+3*gv_screenButtonHeight), gt_ResetBuild);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/55E832AB"), PlayerGroupAll());
    libNtve_gf_DisplayScreenButton(5, StringExternal("Param/Value/13AB0492"), gv_winButtonWidth, gv_winButtonHeight, c_anchorBottomRight, gv_winButtonXPadding, gf_GetWinButtonYPadding(), gt_EndGame);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/1CABB5B1"), PlayerGroupAll());
}

bool gf_IsOverlordCurrentlyInProgress () {
    // Implementation
    if ((gv_numMorphingOverlords > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsSupplyDepotorPylonUnderConstruction () {
    unitgroup auto54B9016D_g;
    int auto54B9016D_u;

    // Variable Declarations
    unit lv_currentUnit;
    bool lv_result;

    // Variable Initialization

    // Implementation
    auto54B9016D_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), 0, 0), 0);
    auto54B9016D_u = 1;
    for ( ; auto54B9016D_u <= UnitGroupCount(auto54B9016D_g, c_unitCountAll) ; auto54B9016D_u += BoolToInt(lv_currentUnit == UnitGroupUnit(auto54B9016D_g, auto54B9016D_u)) ) {
        lv_currentUnit = UnitGroupUnit(auto54B9016D_g, auto54B9016D_u);
        if (((UnitGetType(lv_currentUnit) == "SupplyDepot") || (UnitGetType(lv_currentUnit) == "Pylon"))) {
            lv_result = true;
        }
        else {
            lv_result = false;
        }
    }
    return lv_result;
}

text gf_GetRaceMacroUnitName () {
    string auto30CFABC8_val;

    // Implementation
    auto30CFABC8_val = PlayerRace(1);
    if (auto30CFABC8_val == "Terr") {
        return UnitTypeGetName("OrbitalCommand");
    }
    else if (auto30CFABC8_val == "Prot") {
        return UnitTypeGetName("Nexus");
    }
    else if (auto30CFABC8_val == "Zerg") {
        return UnitTypeGetName("Queen");
    }
    else {
        return StringExternal("Param/Value/584FC4D9");
    }
}

int gf_GetDefaultMacroEnergyThreshold () {
    string autoBAC892F0_val;

    // Variable Declarations
    int lv_result;

    // Variable Initialization

    // Implementation
    autoBAC892F0_val = PlayerRace(1);
    if (autoBAC892F0_val == "Terr") {
        lv_result = gv_alertTerranDefaultMacroEnergyThreshold;
    }
    else if (autoBAC892F0_val == "Zerg") {
        lv_result = gv_alertZergDefaultMacroEnergyThreshold;
    }
    else if (autoBAC892F0_val == "Prot") {
        lv_result = gv_alertProtossDefaultMacroEnergyThreshold;
    }
    else {
    }
    return lv_result;
}

bool gf_IsRaceMacroEnergyAboveThreshold () {
    unitgroup autoEE6E2050_g;
    int autoEE6E2050_u;

    // Variable Declarations
    bool lv_result;
    unit lv_currentunit;

    // Variable Initialization

    // Implementation
    autoEE6E2050_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEE6E2050_u = 1;
    for ( ; autoEE6E2050_u <= UnitGroupCount(autoEE6E2050_g, c_unitCountAll) ; autoEE6E2050_u += BoolToInt(lv_currentunit == UnitGroupUnit(autoEE6E2050_g, autoEE6E2050_u)) ) {
        lv_currentunit = UnitGroupUnit(autoEE6E2050_g, autoEE6E2050_u);
        if (((UnitGetPropertyFixed(lv_currentunit, c_unitPropEnergy, c_unitPropCurrent) > gv_alertSelectedMacroEnergyThreshold) && ((UnitGetType(lv_currentunit) == "Queen") || (UnitGetType(lv_currentunit) == "QueenBurrowed") || (UnitGetType(lv_currentunit) == "OrbitalCommand") || (UnitGetType(lv_currentunit) == "OrbitalCommandFlying") || (UnitGetType(lv_currentunit) == "Nexus")))) {
            lv_result = true;
        }
        else {
        }
    }
    return lv_result;
}

string gf_GetNextUpgrade (string lp_currentUpgrade) {
    string autoB7B7DC32_val;

    // Implementation
    autoB7B7DC32_val = lp_currentUpgrade;
    if (autoB7B7DC32_val == "ProtossAirArmorsLevel1") {
        return "ProtossAirArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "ProtossAirArmorsLevel2") {
        return "ProtossAirArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "ProtossGroundArmorsLevel1") {
        return "ProtossGroundArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "ProtossGroundArmorsLevel2") {
        return "ProtossGroundArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "ProtossShieldsLevel1") {
        return "ProtossShieldsLevel2";
    }
    else if (autoB7B7DC32_val == "ProtossShieldsLevel2") {
        return "ProtossShieldsLevel3";
    }
    else if (autoB7B7DC32_val == "ProtossAirWeaponsLevel1") {
        return "ProtossAirWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "ProtossAirWeaponsLevel2") {
        return "ProtossAirWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "ProtossGroundWeaponsLevel1") {
        return "ProtossGroundWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "ProtossGroundWeaponsLevel2") {
        return "ProtossGroundWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranInfantryArmorsLevel1") {
        return "TerranInfantryArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranInfantryArmorsLevel2") {
        return "TerranInfantryArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranShipArmorsLevel1") {
        return "TerranShipArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranShipArmorsLevel2") {
        return "TerranShipArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranVehicleArmorsLevel1") {
        return "TerranVehicleArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranVehicleArmorsLevel2") {
        return "TerranVehicleArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranInfantryWeaponsLevel1") {
        return "TerranInfantryWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranInfantryWeaponsLevel2") {
        return "TerranInfantryWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranShipWeaponsLevel1") {
        return "TerranShipWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranShipWeaponsLevel2") {
        return "TerranShipWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "TerranVehicleWeaponsLevel1") {
        return "TerranVehicleWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "TerranVehicleWeaponsLevel2") {
        return "TerranVehicleWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "ZergFlyerArmorsLevel1") {
        return "ZergFlyerArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "ZergFlyerArmorsLevel2") {
        return "ZergFlyerArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "ZergGroundArmorsLevel1") {
        return "ZergGroundArmorsLevel2";
    }
    else if (autoB7B7DC32_val == "ZergGroundArmorsLevel2") {
        return "ZergGroundArmorsLevel3";
    }
    else if (autoB7B7DC32_val == "ZergFlyerWeaponsLevel1") {
        return "ZergFlyerWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "ZergFlyerWeaponsLevel2") {
        return "ZergFlyerWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "ZergMeleeWeaponsLevel1") {
        return "ZergMeleeWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "ZergMeleeWeaponsLevel2") {
        return "ZergMeleeWeaponsLevel3";
    }
    else if (autoB7B7DC32_val == "ZergMissileWeaponsLevel1") {
        return "ZergMissileWeaponsLevel2";
    }
    else if (autoB7B7DC32_val == "ZergMissileWeaponsLevel2") {
        return "ZergMissileWeaponsLevel3";
    }
    else {
        return "";
    }
}

bool gf_IsTimeraProductionIdleTimer (timer lp_timer) {
    int autoD5049005_ae;
    int autoD5049005_ai;

    // Variable Declarations
    int lv_i;
    bool lv_result;

    // Variable Initialization

    // Implementation
    autoD5049005_ae = gv_productionIdleNumProductionTypes;
    autoD5049005_ai = 1;
    lv_i = 0;
    for ( ; ( (autoD5049005_ai >= 0 && lv_i <= autoD5049005_ae) || (autoD5049005_ai <= 0 && lv_i >= autoD5049005_ae) ) ; lv_i += autoD5049005_ai ) {
        if (((lp_timer == gv_productionIdleAlertTimers[lv_i]) || (lp_timer == gv_productionIdleCooldownTimers[lv_i]))) {
            lv_result = true;
        }
        else {
        }
    }
    return lv_result;
}

bool gf_DoesAlertTimerExistForUnitType (string lp_unitType) {
    int auto4C73585D_ae;
    int auto4C73585D_ai;

    // Variable Declarations
    int lv_i;
    bool lv_result;

    // Variable Initialization

    // Implementation
    auto4C73585D_ae = gv_productionIdleNumProductionTypes;
    auto4C73585D_ai = 1;
    lv_i = 0;
    for ( ; ( (auto4C73585D_ai >= 0 && lv_i <= auto4C73585D_ae) || (auto4C73585D_ai <= 0 && lv_i >= auto4C73585D_ae) ) ; lv_i += auto4C73585D_ai ) {
        if ((gf_GetProductionIdleAlertTimerforUnitType(lp_unitType) != null)) {
            lv_result = true;
        }
        else {
            lv_result = false;
        }
    }
    return lv_result;
}

bool gf_IsUnitTypeaProductionIdleType (string lp_unitType) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if (((lp_unitType == "Larva") || (lp_unitType == "CommandCenter") || (lp_unitType == "OrbitalCommand") || (lp_unitType == "PlanetaryFortress") || (lp_unitType == "Barracks") || (lp_unitType == "Factory") || (lp_unitType == "Starport") || (lp_unitType == "Nexus") || (lp_unitType == "Gateway") || (lp_unitType == "RoboticsFacility") || (lp_unitType == "Stargate")) && (true)) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    return lv_result;
}

bool gf_IsAnyProductionUnitTypeQueueIdle () {
    int autoBD02A5A8_ae;
    int autoBD02A5A8_ai;

    // Variable Declarations
    bool lv_result;
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((gv_productionIdleNumProductionTypes > 0)) {
        autoBD02A5A8_ae = (gv_productionIdleNumProductionTypes-1);
        autoBD02A5A8_ai = 1;
        lv_i = 0;
        for ( ; ( (autoBD02A5A8_ai >= 0 && lv_i <= autoBD02A5A8_ae) || (autoBD02A5A8_ai <= 0 && lv_i >= autoBD02A5A8_ae) ) ; lv_i += autoBD02A5A8_ai ) {
            if ((gf_IsUnitTypeTrainingQueueEmpty(gv_productionIdleUnitTypes[lv_i]) == true)) {
                lv_result = true;
            }
            else {
            }
        }
    }
    else {
    }
    gf_LogStringMessage(gv_debugAlertsEnabled, ("Production Idle is: " + libNtve_gf_ConvertBooleanToString(lv_result)));
    return lv_result;
}

bool gf_IsUnitTypeTrainingQueueEmpty (string lp_unitType) {
    unitgroup auto9BA590D3_g;
    int auto9BA590D3_u;

    // Variable Declarations
    unit lv_currenUnit;
    bool lv_queueIsEmpty;
    unitgroup lv_currentProductionUnits;

    // Variable Initialization
    lv_currentProductionUnits = UnitGroupEmpty();

    // Implementation
    if ((PlayerRace(1) == "Zerg")) {
        lv_queueIsEmpty = gf_DoesZergHaveLarvaToSpendAndNoUnitsMorphing();
    }
    else {
        lv_queueIsEmpty = true;
        lv_currentProductionUnits = gf_GetAllPlayer1UnitsforType(lp_unitType);
        auto9BA590D3_g = lv_currentProductionUnits;
        auto9BA590D3_u = 1;
        for ( ; auto9BA590D3_u <= UnitGroupCount(auto9BA590D3_g, c_unitCountAll) ; auto9BA590D3_u += BoolToInt(lv_currenUnit == UnitGroupUnit(auto9BA590D3_g, auto9BA590D3_u)) ) {
            lv_currenUnit = UnitGroupUnit(auto9BA590D3_g, auto9BA590D3_u);
            if ((UnitQueueGetProperty(lv_currenUnit, c_unitQueuePropertyUsed) > 0)) {
                lv_queueIsEmpty = false;
                TextExpressionSetToken("Param/Expression/33B8FAEE", "A", UnitTypeGetName(lp_unitType));
                gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/33B8FAEE"));
            }
            else {
                if ((gf_IsUnitResearchinganUpgrade(lv_currenUnit) == true)) {
                    lv_queueIsEmpty = false;
                    TextExpressionSetToken("Param/Expression/987CB6FA", "A", UnitTypeGetName(UnitGetType(lv_currenUnit)));
                    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/987CB6FA"));
                }
                else {
                    lv_queueIsEmpty = true;
                    TextExpressionSetToken("Param/Expression/91F3C79E", "A", UnitTypeGetName(UnitGetType(lv_currenUnit)));
                    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/91F3C79E"));
                }
            }
        }
    }
    TextExpressionSetToken("Param/Expression/204E47CC", "A", UnitTypeGetName(lp_unitType));
    TextExpressionSetToken("Param/Expression/204E47CC", "B", libNtve_gf_ConvertBooleanToText(lv_queueIsEmpty));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/204E47CC"));
    return lv_queueIsEmpty;
}

bool gf_DoesZergHaveLarvaToSpendAndNoUnitsMorphing () {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if (((TechTreeUnitCount(1, "Egg", c_techCountQueuedOrBetter) == 0) && (TechTreeUnitCount(1, "Larva", c_techCountQueuedOrBetter) > 0) && ((PlayerScoreValueGetAsInt(1, "FoodUsed") >= 12) || (TimerGetElapsed(gv_currentBuildBuildTimer) > 90.0)))) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    TextExpressionSetToken("Param/Expression/A73946C0", "A", IntToText(TechTreeUnitCount(1, "Larva", c_techCountQueuedOrBetter)));
    TextExpressionSetToken("Param/Expression/A73946C0", "B", IntToText(TechTreeUnitCount(1, "Egg", c_techCountQueuedOrBetter)));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/A73946C0"));
    return lv_result;
}

bool gf_IsUnitResearchinganUpgrade (unit lp_unit) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if ((UnitQueueGetProperty(lp_unit, c_unitQueuePropertyAvailable) == 0)) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    return lv_result;
}

timer gf_GetProductionIdleAlertTimerforUnitType (string lp_unitType) {
    int auto2CFE021B_ae;
    int auto2CFE021B_ai;

    // Variable Declarations
    timer lv_result;
    int lv_i;

    // Variable Initialization

    // Implementation
    auto2CFE021B_ae = gv_productionIdleNumProductionTypes;
    auto2CFE021B_ai = 1;
    lv_i = 0;
    for ( ; ( (auto2CFE021B_ai >= 0 && lv_i <= auto2CFE021B_ae) || (auto2CFE021B_ai <= 0 && lv_i >= auto2CFE021B_ae) ) ; lv_i += auto2CFE021B_ai ) {
        if ((lp_unitType == gv_productionIdleUnitTypes[lv_i])) {
            lv_result = gv_productionIdleAlertTimers[lv_i];
        }
        else {
        }
    }
    return lv_result;
}

timer gf_GetProductionIdleCooldownTimerforUnitType (string lp_unitType) {
    int auto1C055FC0_ae;
    int auto1C055FC0_ai;

    // Variable Declarations
    timer lv_result;
    int lv_i;

    // Variable Initialization

    // Implementation
    auto1C055FC0_ae = gv_productionIdleNumProductionTypes;
    auto1C055FC0_ai = 1;
    lv_i = 0;
    for ( ; ( (auto1C055FC0_ai >= 0 && lv_i <= auto1C055FC0_ae) || (auto1C055FC0_ai <= 0 && lv_i >= auto1C055FC0_ae) ) ; lv_i += auto1C055FC0_ai ) {
        if ((lp_unitType == gv_productionIdleUnitTypes[lv_i])) {
            lv_result = gv_productionIdleCooldownTimers[lv_i];
        }
        else {
        }
    }
    return lv_result;
}

string gf_GetUnitTypeforProductionIdleTimer (timer lp_unitType) {
    int auto6EE7EA9E_ae;
    int auto6EE7EA9E_ai;

    // Variable Declarations
    string lv_result;
    int lv_i;

    // Variable Initialization

    // Implementation
    auto6EE7EA9E_ae = gv_productionIdleNumProductionTypes;
    auto6EE7EA9E_ai = 1;
    lv_i = 0;
    for ( ; ( (auto6EE7EA9E_ai >= 0 && lv_i <= auto6EE7EA9E_ae) || (auto6EE7EA9E_ai <= 0 && lv_i >= auto6EE7EA9E_ae) ) ; lv_i += auto6EE7EA9E_ai ) {
        if ((lp_unitType == gv_productionIdleAlertTimers[lv_i])) {
            lv_result = gv_productionIdleUnitTypes[lv_i];
        }
        else if ((lp_unitType == gv_productionIdleCooldownTimers[lv_i])) {
            lv_result = gv_productionIdleUnitTypes[lv_i];
        }
    }
    return lv_result;
}

string gf_GetCurrentlySelectedMatchupasBankSectionKey () {
    // Implementation
    return (gv_currentMatchupSectionKeys[gv_currentlySelectedMatchupIndex]);
}

string gf_GetBenchmarkBuildOrderStepBankKey (int lp_stepNumber, string lp_stepEntryKeySuffix) {
    // Variable Declarations
    string lv_stepKeyString;

    // Variable Initialization
    lv_stepKeyString = "";

    // Implementation
    lv_stepKeyString = (gv_benchmarkBuildStepEntryKeyPrefix + "_" + IntToString(lp_stepNumber) + "_" + lp_stepEntryKeySuffix);
    return lv_stepKeyString;
}

unitgroup gf_GetUnitGroupofAllPlayer1WithoutThisUnit () {
    // Variable Declarations
    unitgroup lv_result;

    // Variable Initialization
    lv_result = UnitGroupEmpty();

    // Implementation
    return lv_result;
}

bool gf_DoesPlayer1HaveAnyUnits () {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization
    lv_result = true;

    // Implementation
    if (true) {
    }
    else {
    }
    return lv_result;
}

text gf_GetCurrentlySelectedMatchupasText () {
    // Implementation
    return libNtve_gf_DialogItemText(gv_matchupSelectionButtons[gv_currentlySelectedMatchupIndex], 1);
}

int gf_GetEditBoxValueasInt (int lp_editBox) {
    // Implementation
    return StringToInt(libNtve_gf_DialogItemEditValue(lp_editBox, 1));
}

bool gf_DoesSavedBuildOrderExistForCurrentMatchup () {
    // Variable Declarations
    int lv_numSteps;
    bool lv_result;

    // Variable Initialization

    // Implementation
    lv_numSteps = BankValueGetAsInt(gv_benchmarkerBank, gf_GetCurrentlySelectedMatchupasBankSectionKey(), gv_numBenchmarkBuildOrderStepsEntryKey);
    if ((lv_numSteps > 0)) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    if ((gv_debugBuildOrderEnabled == true)) {
        TextExpressionSetToken("Param/Expression/449A463F", "B", StringToText(gf_GetCurrentlySelectedMatchupasBankSectionKey()));
        TextExpressionSetToken("Param/Expression/449A463F", "A", libNtve_gf_ConvertBooleanToText(lv_result));
        TextExpressionSetToken("Param/Expression/449A463F", "C", IntToText(lv_numSteps));
        TextExpressionSetToken("Param/Expression/449A463F", "D", StringToText(gf_GetCurrentlySelectedMatchupasBankSectionKey()));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/449A463F"));
    }
    else {
    }
    return lv_result;
}

fixed gf_ln (fixed lp_x) {
    // Variable Declarations
    fixed lv_result;

    // Variable Initialization

    // Implementation
    lv_result = (Log2(lp_x)/Log2(gv_e));
    return lv_result;
}

fixed gf_log10 (fixed lp_x) {
    // Variable Declarations
    fixed lv_result;

    // Variable Initialization

    // Implementation
    lv_result = (Log2(lp_x)/Log2(10.0));
    return lv_result;
}

text gf_GetTypeTextForCurrentBuildOrderStep (int lp_stepNumber) {
    // Variable Declarations
    string lv_stepType;
    text lv_result;

    // Variable Initialization
    lv_stepType = "";

    // Implementation
    lv_stepType = gv_currentBuildOrderSteps[lp_stepNumber].lv_stepType;
    if ((lv_stepType == gv_unitStepType)) {
        lv_result = StringToText((gv_currentBuildOrderSteps[lp_stepNumber].lv_unitType));
    }
    else if ((lv_stepType == gv_upgradeStepType)) {
        lv_result = gf_GetFormattedUpgradeNameasText(gv_currentBuildOrderSteps[lp_stepNumber].lv_upgrade);
    }
    return lv_result;
}

text gf_GetTypeTextForBenchmarkBuildOrderStep (int lp_stepNumber) {
    // Variable Declarations
    string lv_stepType;
    text lv_result;

    // Variable Initialization
    lv_stepType = "";

    // Implementation
    lv_stepType = gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_stepType;
    if ((lv_stepType == gv_unitStepType)) {
        lv_result = StringToText((gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_unitType));
    }
    else if ((lv_stepType == gv_upgradeStepType)) {
        lv_result = gf_GetFormattedUpgradeNameasText(gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_upgrade);
    }
    return lv_result;
}

text gf_GetCurrentBuildOrderStepText (int lp_stepNumber) {
    // Variable Declarations
    text lv_supplyText;
    text lv_amountText;
    text lv_typeText;
    text lv_elapsedTimeText;
    text lv_resultText;

    // Variable Initialization
    lv_amountText = StringExternal("Param/Value/29A8F1DC");

    // Implementation
    lv_supplyText = IntToText(gv_currentBuildOrderSteps[lp_stepNumber].lv_supply);
    if ((gv_currentBuildOrderSteps[lp_stepNumber].lv_amount > 1)) {
        TextExpressionSetToken("Param/Expression/A6714026", "A", IntToText(gv_currentBuildOrderSteps[lp_stepNumber].lv_amount));
        lv_amountText = TextExpressionAssemble("Param/Expression/A6714026");
    }
    else {
    }
    lv_typeText = gf_GetTypeTextForCurrentBuildOrderStep(lp_stepNumber);
    lv_elapsedTimeText = TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_currentBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds);
    TextExpressionSetToken("Param/Expression/81102448", "A", lv_supplyText);
    TextExpressionSetToken("Param/Expression/81102448", "D", lv_amountText);
    TextExpressionSetToken("Param/Expression/81102448", "B", lv_typeText);
    TextExpressionSetToken("Param/Expression/81102448", "C", lv_elapsedTimeText);
    lv_resultText = TextExpressionAssemble("Param/Expression/81102448");
    return lv_resultText;
}

text gf_GetBenchmarkBuildOrderStepText (int lp_stepNumber) {
    // Variable Declarations
    text lv_amountText;
    text lv_supplyText;
    text lv_typeText;
    text lv_elapsedTimeText;
    text lv_resultText;

    // Variable Initialization
    lv_amountText = StringExternal("Param/Value/B286C09B");

    // Implementation
    lv_supplyText = IntToText(gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supply);
    if ((gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_amount > 1)) {
        TextExpressionSetToken("Param/Expression/02DB92AF", "A", IntToText(gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_amount));
        lv_amountText = TextExpressionAssemble("Param/Expression/02DB92AF");
    }
    else {
    }
    lv_typeText = gf_GetTypeTextForBenchmarkBuildOrderStep(lp_stepNumber);
    lv_elapsedTimeText = TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds);
    TextExpressionSetToken("Param/Expression/1734DB71", "A", lv_supplyText);
    TextExpressionSetToken("Param/Expression/1734DB71", "D", lv_amountText);
    TextExpressionSetToken("Param/Expression/1734DB71", "B", lv_typeText);
    TextExpressionSetToken("Param/Expression/1734DB71", "C", lv_elapsedTimeText);
    lv_resultText = TextExpressionAssemble("Param/Expression/1734DB71");
    return lv_resultText;
}

text gf_GetFormattedCompleteBenchmarkBuildOrderStepText (int lp_stepNumber) {
    // Variable Declarations
    text lv_result;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/C5F8A524", "A", gf_GetSupplyforLatestCompletedBuildOrderStepasText());
    TextExpressionSetToken("Param/Expression/C5F8A524", "B", gf_GetBenchmarkandCurrentStepSecondsDiffasText(lp_stepNumber));
    TextExpressionSetToken("Param/Expression/236BD2AB", "A", gf_GetBenchmarkBuildOrderStepText(lp_stepNumber));
    TextExpressionSetToken("Param/Expression/236BD2AB", "D", TextWithColor(TextExpressionAssemble("Param/Expression/C5F8A524"), gf_GetColorForBenchmarkBuildOrderStepCompletion(lp_stepNumber)));
    lv_result = TextExpressionAssemble("Param/Expression/236BD2AB");
    return lv_result;
}

color gf_GetColorForBenchmarkBuildOrderStepCompletion (int lp_stepNumber) {
    // Variable Declarations
    int lv_currentElaspedSeconds;
    int lv_currentSupplyCount;
    color lv_color;
    text lv_result;

    // Variable Initialization
    lv_color = Color(100,100,100);

    // Implementation
    lv_currentElaspedSeconds = FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer));
    lv_currentSupplyCount = PlayerScoreValueGetAsInt(1, "FoodUsed");
    if (((lv_currentSupplyCount <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supply+0)) && (lv_currentElaspedSeconds <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds+0)))) {
        lv_color = Color(66.67, 79.22, 100.00);
    }
    else if (((lv_currentSupplyCount <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supply+gv_greenBenchmarkSupplyThreshold)) && (lv_currentElaspedSeconds <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds+gv_greenBenchmarkSecondsThreshold)))) {
        lv_color = Color(50.20, 100.00, 50.20);
    }
    else if (((lv_currentSupplyCount <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supply+gv_yellowBenchmarkSupplyThreshold)) && (lv_currentElaspedSeconds <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds+gv_yellowBenchmarkSecondsThreshold)))) {
        lv_color = Color(100.00, 100.00, 50.20);
    }
    else if (((lv_currentSupplyCount <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_supply+gv_orangeBenchmarkSupplyThreshold)) && (lv_currentElaspedSeconds <= (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds+gv_orangeBenchmarkSecondsThreshold)))) {
        lv_color = Color(100.00, 74.51, 40.00);
    }
    else if ((true == true)) {
        lv_color = Color(100.00, 50.20, 50.20);
    }
    return lv_color;
}

text gf_GetSupplyforLatestCompletedBuildOrderStepasText () {
    // Variable Declarations
    text lv_result;

    // Variable Initialization

    // Implementation
    lv_result = IntToText(gf_GetSupplyforLatestCompletedBuildOrderStep());
    return lv_result;
}

int gf_GetSupplyforLatestCompletedBuildOrderStep () {
    // Variable Declarations
    int lv_currentSupply;

    // Variable Initialization

    // Implementation
    if (((PlayerRace(1) == "Zerg") && (CatalogFieldValueGetAsInt(c_gameCatalogUnit, gv_lastCreatedBuildOrderUnitType, "Attributes[" + IntToString(7) + "]", 1) == 1))) {
        lv_currentSupply = (PlayerScoreValueGetAsInt(1, "FoodUsed")+1);
    }
    else {
        lv_currentSupply = PlayerScoreValueGetAsInt(1, "FoodUsed");
    }
    return lv_currentSupply;
}

text gf_GetBenchmarkandCurrentStepSecondsDiffasText (int lp_stepNumber) {
    // Variable Declarations
    int lv_diff;
    text lv_result;

    // Variable Initialization

    // Implementation
    lv_diff = (FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer))-gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds);
    if ((lv_diff < 0)) {
        lv_diff = (gv_benchmarkBuildOrderSteps[lp_stepNumber].lv_elapsedSeconds-FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer)));
        TextExpressionSetToken("Param/Expression/D17BAC5D", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_diff));
        lv_result = TextExpressionAssemble("Param/Expression/D17BAC5D");
    }
    else {
        TextExpressionSetToken("Param/Expression/8F0B85E2", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_diff));
        lv_result = TextExpressionAssemble("Param/Expression/8F0B85E2");
    }
    return lv_result;
}

int gf_GetObjectiveIndexforBenchmarkBuildOrderStep (int lp_cursor) {
    // Variable Declarations
    int lv_result;

    // Variable Initialization

    // Implementation
    lv_result = (lp_cursor - gv_buildOrderCycleOffset);
    TextExpressionSetToken("Param/Expression/FE96BC14", "A", IntToText(lp_cursor));
    TextExpressionSetToken("Param/Expression/FE96BC14", "B", IntToText(lv_result));
    TextExpressionSetToken("Param/Expression/FE96BC14", "C", IntToText(gv_buildOrderCycleOffset));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/FE96BC14"));
    return lv_result;
}

bool gf_IsUnitTypeCorrectForBenchmarkBuildOrderStep (string lp_unitType, int lp_benchmarkBuildOrderStepIndex) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if ((lp_unitType == gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_unitType)) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    if ((gv_debugBuildOrderEnabled == true)) {
        TextExpressionSetToken("Param/Expression/161A937D", "A", UnitTypeGetName(gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_unitType));
        TextExpressionSetToken("Param/Expression/161A937D", "B", UnitTypeGetName(lp_unitType));
        TextExpressionSetToken("Param/Expression/161A937D", "C", libNtve_gf_ConvertBooleanToText(lv_result));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/161A937D"));
    }
    else {
    }
    return lv_result;
}

bool gf_IsUpgradeTypeCorrectForBenchmarkBuildOrderStep (string lp_upgrade, int lp_benchmarkBuildOrderStepIndex) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if ((lp_upgrade == gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_upgrade)) {
        lv_result = true;
    }
    else {
        lv_result = false;
    }
    if ((gv_debugBuildOrderEnabled == true)) {
        TextExpressionSetToken("Param/Expression/FD541E74", "A", UnitTypeGetName(gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_upgrade));
        TextExpressionSetToken("Param/Expression/FD541E74", "B", StringToText((lp_upgrade)));
        TextExpressionSetToken("Param/Expression/FD541E74", "C", libNtve_gf_ConvertBooleanToText(lv_result));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/FD541E74"));
    }
    else {
    }
    return lv_result;
}

bool gf_IsSupplyCorrectForBenchmarkBuildOrderStep (int lp_supplyCount, int lp_benchmarkBuildOrderStepIndex) {
    // Implementation
    if ((lp_supplyCount <= (gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_supply+15))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsAmountCorrectForBenchmarkBuildOrderStep (int lp_numUnits, int lp_benchmarkBuildOrderStepIndex) {
    // Implementation
    if ((lp_numUnits == gv_benchmarkBuildOrderSteps[lp_benchmarkBuildOrderStepIndex].lv_amount)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsUnitTypeValidForBuildOrder (string lp_unitType) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if (((PlayerScoreValueGetAsInt(1, "FoodUsed") <= gv_trackQueensUntil) && ((lp_unitType == "Queen")))) {
        lv_result = true;
    }
    else if ((lp_unitType == "MothershipCore")) {
        lv_result = true;
    }
    else if (((gv_trackSupplyUnitsAsObjectives == true) && (PlayerScoreValueGetAsInt(1, "FoodUsed") <= gv_trackSupplyUnitObjectivesUntil) && ((lp_unitType == "Overlord") || (lp_unitType == "SupplyDepot") || (lp_unitType == "Pylon")))) {
        lv_result = true;
    }
    else if (((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "Attributes[" + IntToString(7) + "]", c_playerAny) == 1) && (!(((lp_unitType == "CreepTumorQueen") || (lp_unitType == "CreepTumor") || (lp_unitType == "CreepTumorBurrowed")))) && (!(((PlayerScoreValueGetAsInt(1, "FoodUsed") > gv_buildOrderMaxGasSupply) && ((lp_unitType == "Extractor") || (lp_unitType == "Assimilator") || (lp_unitType == "Refinery"))))) && (lp_unitType != "SupplyDepot") && (lp_unitType != "Pylon"))) {
        lv_result = true;
    }
    TextExpressionSetToken("Param/Expression/E84E69DA", "A", UnitTypeGetName(lp_unitType));
    TextExpressionSetToken("Param/Expression/E84E69DA", "B", libNtve_gf_ConvertBooleanToText(lv_result));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/E84E69DA"));
    return lv_result;
}

bool gf_IsUpgradeTypeValidForBuildOrder (string lp_upgrade) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if (((lp_upgrade == "WarpGateResearch") || (lp_upgrade == "BlinkTech") || (lp_upgrade == "ExtendedThermalLance") || (lp_upgrade == "Stimpack") || (lp_upgrade == "PunisherGrenades") || (lp_upgrade == "ShieldWall") || (lp_upgrade == "zerglingmovementspeed") || (lp_upgrade == "Burrow") || (lp_upgrade == "ProtossAirArmorsLevel1") || (lp_upgrade == "ProtossAirArmorsLevel2") || (lp_upgrade == "ProtossAirArmorsLevel3") || (lp_upgrade == "ProtossGroundArmorsLevel1") || (lp_upgrade == "ProtossGroundArmorsLevel2") || (lp_upgrade == "ProtossGroundArmorsLevel3") || (lp_upgrade == "ProtossShieldsLevel1") || (lp_upgrade == "ProtossShieldsLevel2") || (lp_upgrade == "ProtossShieldsLevel3") || (lp_upgrade == "ProtossAirWeaponsLevel1") || (lp_upgrade == "ProtossAirWeaponsLevel2") || (lp_upgrade == "ProtossAirWeaponsLevel3") || (lp_upgrade == "ProtossGroundWeaponsLevel1") || (lp_upgrade == "ProtossGroundWeaponsLevel2") || (lp_upgrade == "ProtossGroundWeaponsLevel3") || (lp_upgrade == "TerranInfantryArmorsLevel1") || (lp_upgrade == "TerranInfantryArmorsLevel2") || (lp_upgrade == "TerranInfantryArmorsLevel3") || (lp_upgrade == "TerranShipArmorsLevel1") || (lp_upgrade == "TerranShipArmorsLevel2") || (lp_upgrade == "TerranShipArmorsLevel3") || (lp_upgrade == "TerranVehicleArmorsLevel1") || (lp_upgrade == "TerranVehicleArmorsLevel2") || (lp_upgrade == "TerranVehicleArmorsLevel3") || (lp_upgrade == "TerranInfantryWeaponsLevel1") || (lp_upgrade == "TerranInfantryWeaponsLevel2") || (lp_upgrade == "TerranInfantryWeaponsLevel3") || (lp_upgrade == "TerranShipWeaponsLevel1") || (lp_upgrade == "TerranShipWeaponsLevel2") || (lp_upgrade == "TerranShipWeaponsLevel3") || (lp_upgrade == "TerranVehicleWeaponsLevel1") || (lp_upgrade == "TerranVehicleWeaponsLevel2") || (lp_upgrade == "TerranVehicleWeaponsLevel3") || (lp_upgrade == "ZergFlyerArmorsLevel1") || (lp_upgrade == "ZergFlyerArmorsLevel2") || (lp_upgrade == "ZergFlyerArmorsLevel3") || (lp_upgrade == "ZergGroundArmorsLevel1") || (lp_upgrade == "ZergGroundArmorsLevel2") || (lp_upgrade == "ZergGroundArmorsLevel3") || (lp_upgrade == "ZergFlyerWeaponsLevel1") || (lp_upgrade == "ZergFlyerWeaponsLevel2") || (lp_upgrade == "ZergFlyerWeaponsLevel3") || (lp_upgrade == "ZergMeleeWeaponsLevel1") || (lp_upgrade == "ZergMeleeWeaponsLevel2") || (lp_upgrade == "ZergMeleeWeaponsLevel3") || (lp_upgrade == "ZergMissileWeaponsLevel1") || (lp_upgrade == "ZergMissileWeaponsLevel2") || (lp_upgrade == "ZergMissileWeaponsLevel3"))) {
        lv_result = true;
    }
    else {
    }
    if ((gv_debugBuildOrderEnabled == true)) {
        TextExpressionSetToken("Param/Expression/D87C562D", "A", StringToText((lp_upgrade)));
        TextExpressionSetToken("Param/Expression/D87C562D", "B", libNtve_gf_ConvertBooleanToText(lv_result));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/D87C562D"));
    }
    else {
    }
    return lv_result;
}

bool gf_IsUnitTypeSameasPreviousUnitType (string lp_unitType) {
    // Variable Declarations
    bool lv_result;

    // Variable Initialization

    // Implementation
    if ((lp_unitType == gv_lastCreatedBuildOrderUnitType)) {
        lv_result = true;
    }
    else {
    }
    return lv_result;
}

bool gf_DoesBuildHaveAnotherStepToDisplay () {
    // Implementation
    if (((gv_benchmarkBuildOrderStepCursor + (gv_maxDisplayedBuildOrderObjectives1 - gv_benchmarkBuildOrderObjectiveCycleThreshold)) <= gv_totalNumBenchmarkBuildOrderSteps)) {
        return true;
    }
    else {
        return false;
    }
}

fixed gf_GetAverageResourceCollectionRate () {
    // Variable Declarations
    fixed lv_result;

    // Variable Initialization

    // Implementation
    if ((gv_resourceCollectionRateSamplesCurrentBuild >= 1)) {
        lv_result = ((gv_cumulativeAverageMineralResourceCollectionRateCurrentBuild+gv_cumulativeAverageGasResourceCollectionRateCurrentBuild)/gv_resourceCollectionRateSamplesCurrentBuild);
    }
    else {
        lv_result = 0.0;
    }
    return lv_result;
}

fixed gf_GetAverageUnspentResources () {
    // Implementation
    if ((gv_averageUnspentResourceSamples >= 1)) {
        return ((gv_cumulativeAverageUnspentMineralsCurrentBuild+gv_cumulativeAverageUnspentGasCurrentBuild)/gv_averageUnspentResourceSamples);
    }
    else {
        return 0;
    }
}

int gf_GetAverageUnspentMinerals () {
    // Implementation
    if ((gv_averageUnspentResourceSamples >= 1)) {
        return FixedToInt((gv_cumulativeAverageUnspentMineralsCurrentBuild/gv_averageUnspentResourceSamples));
    }
    else {
        return 0;
    }
}

int gf_GetAverageUnspentGas () {
    // Implementation
    if ((gv_averageUnspentResourceSamples >= 1)) {
        return FixedToInt((gv_cumulativeAverageUnspentGasCurrentBuild/gv_averageUnspentResourceSamples));
    }
    else {
        return 0;
    }
}

int gf_GetTimeSupplyBlocked () {
    // Implementation
    return gv_timeSupplyBlockedThisBuild;
}

int gf_GetIdleProductionTime () {
    // Implementation
    if ((TimerGetElapsed(gv_currentBuildBuildTimer) >= 1)) {
        return gv_timeProductionIdleThisBuild;
    }
    else {
        return 0;
    }
}

int gf_GetAverageBuildAPM () {
    // Implementation
    if ((gv_totalAPMSamplesThisBuild >= 1)) {
        return FixedToInt((gv_cumulativeAPM/gv_totalAPMSamplesThisBuild));
    }
    else {
        return 0;
    }
}

int gf_GetTotalArmySupply () {
    // Implementation
    return PlayerScoreValueGetAsInt(1, "FoodUsedArmy");
}

int gf_GetTotalArmyValueMinerals () {
    // Implementation
    return PlayerScoreValueGetAsInt(1, "MineralsUsedTotalArmy");
}

int gf_GetTotalArmyValueGas () {
    // Implementation
    return PlayerScoreValueGetAsInt(1, "VespeneUsedTotalArmy");
}

int gf_GetNumUpgradesResearched () {
    // Implementation
    return gv_totalNumberofUpgradesResearchedCurrentBuild;
}

int gf_GetTotalMineralsCollected () {
    // Implementation
    return gv_totalMineralsCollectedCurrentBuild;
}

int gf_GetTotalGasCollected () {
    // Implementation
    return gv_totalGasCollectedCurrentBuild;
}

fixed gf_CalculateSpendingQuotient () {
    // Implementation
    return (35*(0.00137*gf_GetAverageResourceCollectionRate()-gf_ln(gf_GetAverageUnspentResources()))+240);
}

text gf_CalculateIntPercentDifferenceasText (int lp_value, int lp_previousBest, bool lp_higherisBetter) {
    // Variable Declarations
    fixed lv_percentDifference;
    text lv_percentDifferenceText;
    text lv_coloredPercentDifferenceText;

    // Variable Initialization

    // Implementation
    if (((lp_value > 0) && (lp_previousBest > 0))) {
        lv_percentDifference = (100*((IntToFixed(lp_value)-IntToFixed(lp_previousBest))/IntToFixed(lp_previousBest)));
        TextExpressionSetToken("Param/Expression/C52C6861", "A", FixedToText(lv_percentDifference, 2));
        lv_percentDifferenceText = TextExpressionAssemble("Param/Expression/C52C6861");
    }
    else {
        lv_percentDifferenceText = StringExternal("Param/Value/69E3E79E");
    }
    TextExpressionSetToken("Param/Expression/627D2026", "A", TextWithColor(lv_percentDifferenceText, gf_GetColorForPercentage(lv_percentDifference, lp_higherisBetter)));
    lv_coloredPercentDifferenceText = TextExpressionAssemble("Param/Expression/627D2026");
    return lv_coloredPercentDifferenceText;
}

text gf_CalculateRealPercentDifferenceasText (fixed lp_value, fixed lp_previousBest, bool lp_higherisBetter) {
    // Variable Declarations
    fixed lv_percentDifference;
    text lv_percentDifferenceText;
    text lv_coloredPercentDifferenceText;

    // Variable Initialization

    // Implementation
    if (((lp_value > 0) && (lp_previousBest > 0))) {
        lv_percentDifference = (100*((lp_value-lp_previousBest)/lp_previousBest));
        TextExpressionSetToken("Param/Expression/57AF9E6B", "A", FixedToText(lv_percentDifference, 2));
        lv_percentDifferenceText = TextExpressionAssemble("Param/Expression/57AF9E6B");
    }
    else {
        lv_percentDifferenceText = StringExternal("Param/Value/5EC7DC33");
    }
    TextExpressionSetToken("Param/Expression/25E9AAD7", "A", TextWithColor(lv_percentDifferenceText, gf_GetColorForPercentage(lv_percentDifference, lp_higherisBetter)));
    lv_coloredPercentDifferenceText = TextExpressionAssemble("Param/Expression/25E9AAD7");
    return lv_coloredPercentDifferenceText;
}

color gf_GetColorForPercentage (fixed lp_percentage, bool lp_higherIsBetter) {
    // Variable Declarations
    color lv_result;

    // Variable Initialization
    lv_result = Color(149*100/255,150*100/255,151*100/255);

    // Implementation
    if ((((lp_percentage > 0.0) && (lp_higherIsBetter == true)) || ((lp_percentage < 0.0) && (lp_higherIsBetter == false)))) {
        lv_result = Color(22*100/255,128*100/255,0);
    }
    else if ((((lp_percentage < 0.0) && (lp_higherIsBetter == true)) || ((lp_percentage > 0.0) && (lp_higherIsBetter == false)))) {
        lv_result = Color(100.00, 0.00, 0.00);
    }
    return lv_result;
}

int gf_GetWinButtonYPadding () {
    string autoDB867731_val;

    // Implementation
    autoDB867731_val = PlayerRace(1);
    if (autoDB867731_val == "Terr") {
        return gv_winButtonTerranYPadding;
    }
    else if (autoDB867731_val == "Prot") {
        return gv_winButtonProtossYPadding;
    }
    else if (autoDB867731_val == "Zerg") {
        return gv_winButtonZergYPadding;
    }
    else {
        return 0;
    }
}

string gf_GetIconForBuildingType (string lp_unitType) {
    string auto77F30C81_val;

    // Implementation
    auto77F30C81_val = lp_unitType;
    if (auto77F30C81_val == "Nexus") {
        return "Assets\\Textures\\btn-building-protoss-nexus.dds";
    }
    else if (auto77F30C81_val == "Gateway") {
        return "Assets\\Textures\\btn-building-protoss-gateway.dds";
    }
    else if (auto77F30C81_val == "RoboticsFacility") {
        return "Assets\\Textures\\btn-building-protoss-roboticsfacility.dds";
    }
    else if (auto77F30C81_val == "Stargate") {
        return "Assets\\Textures\\btn-building-protoss-stargate.dds";
    }
    else if (auto77F30C81_val == "CommandCenter") {
        return "Assets\\Textures\\btn-building-terran-commandcenter.dds";
    }
    else if (auto77F30C81_val == "OrbitalCommand") {
        return "Assets\\Textures\\btn-techupgrade-terran-orbitalcommand.dds";
    }
    else if (auto77F30C81_val == "PlanetaryFortress") {
        return "Assets\\Textures\\btn-building-terran-planetaryfortress.dds";
    }
    else if (auto77F30C81_val == "Barracks") {
        return "Assets\\Textures\\btn-building-terran-barracks.dds";
    }
    else if (auto77F30C81_val == "Factory") {
        return "Assets\\Textures\\btn-building-terran-factory.dds";
    }
    else if (auto77F30C81_val == "Starport") {
        return "Assets\\Textures\\btn-building-terran-starport.dds";
    }
    else if (auto77F30C81_val == "Larva") {
        return "Assets\\Textures\\btn-unit-zerg-larva.dds";
    }
    else if (auto77F30C81_val == "Hatchery") {
        return "Assets\\Textures\\btn-building-zerg-hatchery.dds";
    }
    else if (auto77F30C81_val == "Lair") {
        return "Assets\\Textures\\btn-building-zerg-lair.dds";
    }
    else if (auto77F30C81_val == "Hive") {
        return "Assets\\Textures\\btn-building-zerg-hive.dds";
    }
    else {
        return null;
    }
}

bool gf_IsUpgradeof1Variety (string lp_upgrade) {
    // Implementation
    if (((lp_upgrade == "ProtossAirArmorsLevel1") || (lp_upgrade == "ProtossAirArmorsLevel2") || (lp_upgrade == "ProtossAirArmorsLevel3") || (lp_upgrade == "ProtossGroundArmorsLevel1") || (lp_upgrade == "ProtossGroundArmorsLevel2") || (lp_upgrade == "ProtossGroundArmorsLevel3") || (lp_upgrade == "ProtossShieldsLevel1") || (lp_upgrade == "ProtossShieldsLevel2") || (lp_upgrade == "ProtossShieldsLevel3") || (lp_upgrade == "ProtossAirWeaponsLevel1") || (lp_upgrade == "ProtossAirWeaponsLevel2") || (lp_upgrade == "ProtossAirWeaponsLevel3") || (lp_upgrade == "ProtossGroundWeaponsLevel1") || (lp_upgrade == "ProtossGroundWeaponsLevel2") || (lp_upgrade == "ProtossGroundWeaponsLevel3") || (lp_upgrade == "TerranInfantryArmorsLevel1") || (lp_upgrade == "TerranInfantryArmorsLevel2") || (lp_upgrade == "TerranInfantryArmorsLevel3") || (lp_upgrade == "TerranShipArmorsLevel1") || (lp_upgrade == "TerranShipArmorsLevel2") || (lp_upgrade == "TerranShipArmorsLevel3") || (lp_upgrade == "TerranVehicleArmorsLevel1") || (lp_upgrade == "TerranVehicleArmorsLevel2") || (lp_upgrade == "TerranVehicleArmorsLevel3") || (lp_upgrade == "TerranInfantryWeaponsLevel1") || (lp_upgrade == "TerranInfantryWeaponsLevel2") || (lp_upgrade == "TerranInfantryWeaponsLevel3") || (lp_upgrade == "TerranShipWeaponsLevel1") || (lp_upgrade == "TerranShipWeaponsLevel2") || (lp_upgrade == "TerranShipWeaponsLevel3") || (lp_upgrade == "TerranVehicleWeaponsLevel1") || (lp_upgrade == "TerranVehicleWeaponsLevel2") || (lp_upgrade == "TerranVehicleWeaponsLevel3") || (lp_upgrade == "ZergFlyerArmorsLevel1") || (lp_upgrade == "ZergFlyerArmorsLevel2") || (lp_upgrade == "ZergFlyerArmorsLevel3") || (lp_upgrade == "ZergGroundArmorsLevel1") || (lp_upgrade == "ZergGroundArmorsLevel2") || (lp_upgrade == "ZergGroundArmorsLevel3") || (lp_upgrade == "ZergFlyerWeaponsLevel1") || (lp_upgrade == "ZergFlyerWeaponsLevel2") || (lp_upgrade == "ZergFlyerWeaponsLevel3") || (lp_upgrade == "ZergMeleeWeaponsLevel1") || (lp_upgrade == "ZergMeleeWeaponsLevel2") || (lp_upgrade == "ZergMeleeWeaponsLevel3") || (lp_upgrade == "ZergMissileWeaponsLevel1") || (lp_upgrade == "ZergMissileWeaponsLevel2") || (lp_upgrade == "ZergMissileWeaponsLevel3"))) {
        return true;
    }
    else {
        return false;
    }
}

text gf_GetFormattedUpgradeNameasText (string lp_upgrade) {
    // Variable Declarations
    string lv_result;
    string lv_upgradeCatalogString;
    string lv_formattedUpgradeCatalogString;
    string lv_condensedFormattedUpgradeCatalogString;

    // Variable Initialization
    lv_result = "";
    lv_upgradeCatalogString = "";
    lv_formattedUpgradeCatalogString = "";
    lv_condensedFormattedUpgradeCatalogString = "";

    // Implementation
    lv_upgradeCatalogString = CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Name", c_playerAny);
    lv_formattedUpgradeCatalogString = gf_FormatCatalogStringwithSpaces(lv_upgradeCatalogString);
    if ((gf_IsUpgradeof1Variety(lp_upgrade) == true)) {
        lv_result = (StringWord(lv_formattedUpgradeCatalogString, 4) + " " + gf_TrimSOffArmorsUpgradeName(StringWord(lv_formattedUpgradeCatalogString, 5)) + " " + StringWord(lv_formattedUpgradeCatalogString, 7));
    }
    else {
        lv_result = lv_formattedUpgradeCatalogString;
    }
    return StringToText(lv_result);
}

string gf_FormatCatalogStringwithSpaces (string lp_string) {
    int auto6F8A5183_ae;
    int auto6F8A5183_ai;

    // Variable Declarations
    string lv_currentLetter;
    string lv_result;
    int lv_i;

    // Variable Initialization
    lv_currentLetter = "";
    lv_result = "";

    // Implementation
    auto6F8A5183_ae = StringLength(lp_string);
    auto6F8A5183_ai = 1;
    lv_i = 0;
    for ( ; ( (auto6F8A5183_ai >= 0 && lv_i <= auto6F8A5183_ae) || (auto6F8A5183_ai <= 0 && lv_i >= auto6F8A5183_ae) ) ; lv_i += auto6F8A5183_ai ) {
        lv_currentLetter = StringSub(lp_string, lv_i, lv_i);
        if ((gf_IsCapitalLetterOrDigit(lv_currentLetter) == true)) {
            lv_result = (lv_result + " " + lv_currentLetter);
        }
        else {
            lv_result = (lv_result + lv_currentLetter);
        }
    }
    return lv_result;
}

string gf_TrimSOffArmorsUpgradeName (string lp_string) {
    // Implementation
    if ((lp_string == "Armors")) {
        return "Armor";
    }
    else {
        return lp_string;
    }
}

unitgroup gf_GetAllPlayer1UnitsforType (string lp_unitType) {
    unitgroup auto7054DA5F_g;
    int auto7054DA5F_u;

    // Variable Declarations
    unit lv_currentUnit;
    unitgroup lv_result;

    // Variable Initialization
    lv_result = UnitGroupEmpty();

    // Implementation
    auto7054DA5F_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7054DA5F_u = 1;
    for ( ; auto7054DA5F_u <= UnitGroupCount(auto7054DA5F_g, c_unitCountAll) ; auto7054DA5F_u += BoolToInt(lv_currentUnit == UnitGroupUnit(auto7054DA5F_g, auto7054DA5F_u)) ) {
        lv_currentUnit = UnitGroupUnit(auto7054DA5F_g, auto7054DA5F_u);
        if ((UnitGetType(lv_currentUnit) == lp_unitType)) {
            UnitGroupAdd(lv_result, lv_currentUnit);
        }
        else {
        }
    }
    return lv_result;
}

unitgroup gf_GetAllPlayer1Units () {
    // Variable Declarations
    unitgroup lv_result;

    // Variable Initialization
    lv_result = UnitGroupEmpty();

    // Implementation
    UnitGroupLoopBegin(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(lv_result, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return lv_result;
}

text gf_ConverttoTextWithSign (int lp_int) {
    // Variable Declarations
    text lv_result;

    // Variable Initialization

    // Implementation
    if ((lp_int > 0)) {
        TextExpressionSetToken("Param/Expression/B99F7846", "A", IntToText(lp_int));
        lv_result = TextExpressionAssemble("Param/Expression/B99F7846");
    }
    else {
        TextExpressionSetToken("Param/Expression/DD4AB624", "A", IntToText(lp_int));
        lv_result = TextExpressionAssemble("Param/Expression/DD4AB624");
    }
    return lv_result;
}

bool gf_IsCapitalLetterOrDigit (string lp_letter) {
    // Implementation
    if (((lp_letter == "A") || (lp_letter == "B") || (lp_letter == "C") || (lp_letter == "D") || (lp_letter == "E") || (lp_letter == "F") || (lp_letter == "G") || (lp_letter == "H") || (lp_letter == "I") || (lp_letter == "J") || (lp_letter == "K") || (lp_letter == "L") || (lp_letter == "M") || (lp_letter == "N") || (lp_letter == "O") || (lp_letter == "P") || (lp_letter == "Q") || (lp_letter == "R") || (lp_letter == "S") || (lp_letter == "T") || (lp_letter == "U") || (lp_letter == "V") || (lp_letter == "W") || (lp_letter == "X") || (lp_letter == "Y") || (lp_letter == "Z") || (lp_letter == "1") || (lp_letter == "2") || (lp_letter == "3") || (lp_letter == "4") || (lp_letter == "5") || (lp_letter == "6") || (lp_letter == "7") || (lp_letter == "8") || (lp_letter == "9") || (lp_letter == "0"))) {
        return true;
    }
    else {
        return false;
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minerals Above Threshold
//--------------------------------------------------------------------------------------------------
bool gt_MineralsAboveThreshold_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_alertMineralsCheckEnabled == true) && (TimerGetRemaining(gv_alertMineralsCooldownTimer) == 0.0) && (PlayerScoreValueGetAsInt(1, "MineralsCurrent") > gv_alertMineralsThreshold) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) <= 200)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_alertMineralsCooldownTimer, gv_alertCooldownSeconds, false, c_timeGame);
    UIAlert("MineralsTooHigh", 1, StringExternal("Param/Value/40F47144"), null);
    if ((gv_muteAlertsEnabled == false)) {
        SoundPlay(SoundLink("Alert_BaseUnderAttackKlaxon", -1), PlayerGroupAll(), 50.0, 4.8);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralsAboveThreshold_Init () {
    gt_MineralsAboveThreshold = TriggerCreate("gt_MineralsAboveThreshold_Func");
    TriggerAddEventTimePeriodic(gt_MineralsAboveThreshold, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gas Above Threshold
//--------------------------------------------------------------------------------------------------
bool gt_GasAboveThreshold_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_alertGasCheckEnabled == true) && (TimerGetRemaining(gv_alertGasCooldownTimer) == 0.0) && (PlayerScoreValueGetAsInt(1, "VespeneCurrent") > gv_alertGasThreshold) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) <= 200)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_alertGasCooldownTimer, gv_alertCooldownSeconds, false, c_timeGame);
    UIAlert("GasTooHigh", 1, StringExternal("Param/Value/F8A6C784"), null);
    if ((gv_muteAlertsEnabled == false)) {
        SoundPlay(SoundLink("Doodad_ProtossWarpInPad_Alert", -1), PlayerGroupAll(), 50.0, 0.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GasAboveThreshold_Init () {
    gt_GasAboveThreshold = TriggerCreate("gt_GasAboveThreshold_Func");
    TriggerAddEventTimePeriodic(gt_GasAboveThreshold, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Block Imminent
//--------------------------------------------------------------------------------------------------
bool gt_SupplyBlockImminent_Func (bool testConds, bool runActions) {
    string auto281F1F30_val;

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_alertSupplyBlockCheckEnabled == true) && (TimerGetRemaining(gv_alertSupplyBlockCooldownTimer) == 0.0) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) > gv_alertSupplyBlockStart) && (((PlayerGetPropertyInt(1, c_playerPropSuppliesMade)-PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)) >= 0) && ((PlayerGetPropertyInt(1, c_playerPropSuppliesMade)-PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)) <= gv_alertSupplyBlockWithinCapThreshold)) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) <= (200-gv_alertSupplyBlockWithinCapThreshold)) && (gf_IsSupplyDepotorPylonUnderConstruction() == false) && (gf_IsOverlordCurrentlyInProgress() == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_alertSupplyBlockCooldownTimer, gv_warningPingCooldownSeconds, false, c_timeGame);
    auto281F1F30_val = PlayerRace(1);
    if (auto281F1F30_val == "Prot") {
        UIAlert("SupplyBlockImminentProtoss", 1, StringExternal("Param/Value/7533586F"), null);
    }
    else if (auto281F1F30_val == "Terr") {
        UIAlert("SupplyBlockImminentTerran", 1, StringExternal("Param/Value/02411A2F"), null);
    }
    else if (auto281F1F30_val == "Zerg") {
        UIAlert("SupplyBlockImminentZerg", 1, StringExternal("Param/Value/657B8378"), null);
    }
    else {
    }
    if ((gv_muteAlertsEnabled == false)) {
        SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 50.0, 2.3);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyBlockImminent_Init () {
    gt_SupplyBlockImminent = TriggerCreate("gt_SupplyBlockImminent_Func");
    TriggerAddEventTimePeriodic(gt_SupplyBlockImminent, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Race Macro Energy Above Threshold
//--------------------------------------------------------------------------------------------------
bool gt_RaceMacroEnergyAboveThreshold_Func (bool testConds, bool runActions) {
    unitgroup autoF5F9D5CD_g;
    int autoF5F9D5CD_u;
    string autoB329AA1E_val;

    // Variable Declarations
    unit lv_currentunit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_alertMacroEnergyCheckEnabled == true) && (gf_IsRaceMacroEnergyAboveThreshold() == true) && (TimerGetRemaining(gv_alertMacroEnergyCooldownTimer) == 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF5F9D5CD_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF5F9D5CD_u = 1;
    for ( ; autoF5F9D5CD_u <= UnitGroupCount(autoF5F9D5CD_g, c_unitCountAll) ; autoF5F9D5CD_u += BoolToInt(lv_currentunit == UnitGroupUnit(autoF5F9D5CD_g, autoF5F9D5CD_u)) ) {
        lv_currentunit = UnitGroupUnit(autoF5F9D5CD_g, autoF5F9D5CD_u);
        TextExpressionSetToken("Param/Expression/8B19054D", "A", UnitTypeGetName(UnitGetType(lv_currentunit)));
        gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/8B19054D"));
        if (((UnitGetPropertyFixed(lv_currentunit, c_unitPropEnergy, c_unitPropCurrent) > gv_alertSelectedMacroEnergyThreshold) && ((UnitGetType(lv_currentunit) == "Queen") || (UnitGetType(lv_currentunit) == "QueenBurrowed") || (UnitGetType(lv_currentunit) == "OrbitalCommand") || (UnitGetType(lv_currentunit) == "OrbitalCommandFlying") || (UnitGetType(lv_currentunit) == "Nexus")))) {
            autoB329AA1E_val = PlayerRace(1);
            if (autoB329AA1E_val == "Zerg") {
                TextExpressionSetToken("Param/Expression/23180F1D", "A", UnitTypeGetName(UnitGetType(lv_currentunit)));
                UIAlertUnit("NexusEnergyTooHigh", 1, TextExpressionAssemble("Param/Expression/23180F1D"), null, lv_currentunit);
            }
            else if (autoB329AA1E_val == "Terr") {
                TextExpressionSetToken("Param/Expression/BF1F3D17", "A", UnitTypeGetName(UnitGetType(lv_currentunit)));
                UIAlertUnit("OrbitalCommandEnergyTooHigh", 1, TextExpressionAssemble("Param/Expression/BF1F3D17"), null, lv_currentunit);
            }
            else if (autoB329AA1E_val == "Prot") {
                TextExpressionSetToken("Param/Expression/BB1E6CB1", "A", UnitTypeGetName(UnitGetType(lv_currentunit)));
                UIAlertUnit("QueenEnergyTooHigh", 1, TextExpressionAssemble("Param/Expression/BB1E6CB1"), null, lv_currentunit);
            }
            else {
            }
            PingCreate(PlayerGroupAll(), "MinimapPing", UnitGetPosition(lv_currentunit), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 4.0);
            PingSetUnit(PingLastCreated(), lv_currentunit);
            if ((gv_muteAlertsEnabled == false)) {
                SoundPlay(SoundLink("UI_Bnet_PopUp_Generic", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else {
            }
            TimerStart(gv_alertMacroEnergyCooldownTimer, gv_alertCooldownSeconds, false, c_timeGame);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaceMacroEnergyAboveThreshold_Init () {
    gt_RaceMacroEnergyAboveThreshold = TriggerCreate("gt_RaceMacroEnergyAboveThreshold_Func");
    TriggerAddEventTimePeriodic(gt_RaceMacroEnergyAboveThreshold, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Gap Above Threshold - Upgrade Completes (Add/Restart Timer)
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeGapAboveThresholdUpgradeCompletesAddRestartTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_tempTimer;

    // Variable Initialization
    lv_tempTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && ((libNtve_gf_TriggeringProgressUpgrade() == "ZergMeleeWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMeleeWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergGroundArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergGroundArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossShieldsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossShieldsLevel2"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_tempTimer, gv_alertUpgradeGapThreshold, false, c_timeGame);
    gv_alertUpgradeGapTimers[gv_alertUpgradeGapNumUpgrades] = TimerLastStarted();
    gv_alertUpgradeGapCooldownTimers[gv_alertUpgradeGapNumUpgrades] = TimerCreate();
    gv_alertUpgradeGapUpgrades[gv_alertUpgradeGapNumUpgrades] = libNtve_gf_TriggeringProgressUpgrade();
    gv_alertUpgradeGapNumUpgrades += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeGapAboveThresholdUpgradeCompletesAddRestartTimer_Init () {
    gt_UpgradeGapAboveThresholdUpgradeCompletesAddRestartTimer = TriggerCreate("gt_UpgradeGapAboveThresholdUpgradeCompletesAddRestartTimer_Func");
    TriggerAddEventUnitResearchProgress(gt_UpgradeGapAboveThresholdUpgradeCompletesAddRestartTimer, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Gap Above Threshold - New Upgrade Starts (Stop Active Timers)
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeGapAboveThresholdNewUpgradeStartsStopActiveTimers_Func (bool testConds, bool runActions) {
    int auto54EAB7A2_ae;
    int auto54EAB7A2_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_alertUpgradeGapCheckEnabled == true) && ((libNtve_gf_TriggeringProgressUpgrade() == "ZergMeleeWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMeleeWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergGroundArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergGroundArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergGroundArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossShieldsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossShieldsLevel3"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto54EAB7A2_ae = gv_alertUpgradeGapNumUpgrades;
    auto54EAB7A2_ai = 1;
    lv_i = 0;
    for ( ; ( (auto54EAB7A2_ai >= 0 && lv_i <= auto54EAB7A2_ae) || (auto54EAB7A2_ai <= 0 && lv_i >= auto54EAB7A2_ae) ) ; lv_i += auto54EAB7A2_ai ) {
        if ((libNtve_gf_TriggeringProgressUpgrade() == gf_GetNextUpgrade(gv_alertUpgradeGapUpgrades[lv_i]))) {
            TimerRestart(gv_alertUpgradeGapTimers[lv_i]);
            TimerPause(gv_alertUpgradeGapTimers[lv_i], true);
            TimerRestart(gv_alertUpgradeGapCooldownTimers[lv_i]);
            TimerPause(gv_alertUpgradeGapCooldownTimers[lv_i], true);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeGapAboveThresholdNewUpgradeStartsStopActiveTimers_Init () {
    gt_UpgradeGapAboveThresholdNewUpgradeStartsStopActiveTimers = TriggerCreate("gt_UpgradeGapAboveThresholdNewUpgradeStartsStopActiveTimers_Func");
    TriggerAddEventUnitResearchProgress(gt_UpgradeGapAboveThresholdNewUpgradeStartsStopActiveTimers, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Gap Above Threshold - Timer Expires (Fire Alert)
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeGapAboveThresholdTimerExpiresFireAlert_Func (bool testConds, bool runActions) {
    int auto4B6990F6_ae;
    int auto4B6990F6_ai;

    // Variable Declarations
    string lv_currentNextUpgrade;
    string lv_currentNextUpgradeName;
    string lv_currentNextUpgradeNameFormatted;
    int lv_i;

    // Variable Initialization
    lv_currentNextUpgradeName = "";
    lv_currentNextUpgradeNameFormatted = "";

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_alertUpgradeGapCheckEnabled == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4B6990F6_ae = gv_alertUpgradeGapNumUpgrades;
    auto4B6990F6_ai = 1;
    lv_i = 0;
    for ( ; ( (auto4B6990F6_ai >= 0 && lv_i <= auto4B6990F6_ae) || (auto4B6990F6_ai <= 0 && lv_i >= auto4B6990F6_ae) ) ; lv_i += auto4B6990F6_ai ) {
        if (((EventTimer() == gv_alertUpgradeGapTimers[lv_i]) || (EventTimer() == gv_alertUpgradeGapCooldownTimers[lv_i]))) {
            lv_currentNextUpgrade = gf_GetNextUpgrade(gv_alertUpgradeGapUpgrades[lv_i]);
            TextExpressionSetToken("Param/Expression/DDA3FDF3", "A", gf_GetFormattedUpgradeNameasText(lv_currentNextUpgrade));
            UIAlert("UpgradeDelayed", 1, TextExpressionAssemble("Param/Expression/DDA3FDF3"), (CatalogFieldValueGet(c_gameCatalogUpgrade, lv_currentNextUpgrade, "Icon", c_playerAny)));
            if ((gv_muteAlertsEnabled == false)) {
                SoundPlay(SoundLink("UI_ObjectiveUpdate", -1), PlayerGroupAll(), 50.0, 0.0);
            }
            else {
            }
            TimerStart(gv_alertUpgradeGapCooldownTimers[lv_i], gv_alertCooldownSeconds, false, c_timeGame);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeGapAboveThresholdTimerExpiresFireAlert_Init () {
    gt_UpgradeGapAboveThresholdTimerExpiresFireAlert = TriggerCreate("gt_UpgradeGapAboveThresholdTimerExpiresFireAlert_Func");
    TriggerAddEventTimer(gt_UpgradeGapAboveThresholdTimerExpiresFireAlert, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production Idle Above Threshold - Production Finishes (Add/Restart Timer)
//--------------------------------------------------------------------------------------------------
bool gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_productionUnitTypeExists;
    timer lv_tempTimer;

    // Variable Initialization
    lv_tempTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_productionIdleCheckEnabled == true) && (gf_IsUnitTypeaProductionIdleType(UnitGetType(EventUnit())) == true) && (gf_IsUnitTypeTrainingQueueEmpty(UnitGetType(EventUnit())) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_DoesAlertTimerExistForUnitType(UnitGetType(EventUnit())) == false)) {
        gf_AddProductionIdleTimersforUnitType(UnitGetType(EventUnit()));
    }
    else {
        gf_RestartProductionIdleAlertTimer(UnitGetType(EventUnit()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer_Init () {
    gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer = TriggerCreate("gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer_Func");
    TriggerAddEventUnitTrainProgress(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, c_unitProgressStageComplete);
    TriggerAddEventUnitTrainProgress(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, c_unitProgressStageCancel);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("BarracksAddOns", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("BarracksAddOns", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("BarracksAddOns", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("BarracksAddOns", 1), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("FactoryAddOns", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("FactoryAddOns", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("FactoryAddOns", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("FactoryAddOns", 1), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("StarportAddOns", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("StarportAddOns", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("StarportAddOns", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("StarportAddOns", 1), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("NexusTrainMothershipCore", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("NexusTrainMothershipCore", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("NexusTrainMothership", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer, null, AbilityCommand("NexusTrainMothership", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production Idle Above Threshold - New Production Begins (Stop Active Timers)
//--------------------------------------------------------------------------------------------------
bool gt_ProductionIdleAboveThresholdNewProductionBeginsStopActiveTimers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_triggeringUnitType;
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_productionIdleCheckEnabled == true) && ((gf_IsUnitTypeaProductionIdleType(UnitGetType(EventUnit())) == true) || (UnitGetType(EventUnit()) == "Egg"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Egg")) {
        lv_triggeringUnitType = "Larva";
    }
    else {
        lv_triggeringUnitType = UnitGetType(EventUnit());
    }
    if ((gf_DoesAlertTimerExistForUnitType(lv_triggeringUnitType) == true)) {
        gf_StopProductionIdleTimers(lv_triggeringUnitType);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProductionIdleAboveThresholdNewProductionBeginsStopActiveTimers_Init () {
    gt_ProductionIdleAboveThresholdNewProductionBeginsStopActiveTimers = TriggerCreate("gt_ProductionIdleAboveThresholdNewProductionBeginsStopActiveTimers_Func");
    TriggerAddEventUnitTrainProgress(gt_ProductionIdleAboveThresholdNewProductionBeginsStopActiveTimers, null, c_unitProgressStageStart);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionBeginsStopActiveTimers, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionBeginsStopActiveTimers, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionBeginsStopActiveTimers, null, AbilityCommand("BarracksAddOns", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionBeginsStopActiveTimers, null, AbilityCommand("BarracksAddOns", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionBeginsStopActiveTimers, null, AbilityCommand("FactoryAddOns", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionBeginsStopActiveTimers, null, AbilityCommand("FactoryAddOns", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionBeginsStopActiveTimers, null, AbilityCommand("StarportAddOns", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionBeginsStopActiveTimers, null, AbilityCommand("StarportAddOns", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionBeginsStopActiveTimers, null, AbilityCommand("NexusTrainMothershipCore", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProductionIdleAboveThresholdNewProductionBeginsStopActiveTimers, null, AbilityCommand("NexusTrainMothership", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production Idle Above Threshold - Timer Expires (Fire Alert)
//--------------------------------------------------------------------------------------------------
bool gt_ProductionIdleAboveThresholdTimerExpiresFireAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitTypeForTimer;
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_paused == false) && (gv_productionIdleCheckEnabled == true) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) < 200) && (gf_IsTimeraProductionIdleTimer(EventTimer()) == true) && (gf_IsUnitTypeTrainingQueueEmpty(lv_unitTypeForTimer) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitTypeForTimer = gf_GetUnitTypeforProductionIdleTimer(EventTimer());
    TextExpressionSetToken("Param/Expression/494EACFA", "A", UnitTypeGetName(lv_unitTypeForTimer));
    gf_LogTextMessage(gv_debugAlertsEnabled, TextExpressionAssemble("Param/Expression/494EACFA"));
    TextExpressionSetToken("Param/Expression/FFDFB39E", "A", UnitTypeGetName(lv_unitTypeForTimer));
    UIAlert("ProductionIdleTooLong", 1, TextExpressionAssemble("Param/Expression/FFDFB39E"), gf_GetIconForBuildingType(lv_unitTypeForTimer));
    if ((gv_muteAlertsEnabled == false)) {
        SoundPlay(SoundLink("Alert_UniObjectiveCompleted", -1), PlayerGroupAll(), 50.0, 0.0);
    }
    else {
    }
    gf_RestartProductionIdleCooldownTimer(lv_unitTypeForTimer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProductionIdleAboveThresholdTimerExpiresFireAlert_Init () {
    gt_ProductionIdleAboveThresholdTimerExpiresFireAlert = TriggerCreate("gt_ProductionIdleAboveThresholdTimerExpiresFireAlert_Func");
    TriggerAddEventTimer(gt_ProductionIdleAboveThresholdTimerExpiresFireAlert, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Build
//--------------------------------------------------------------------------------------------------
bool gt_StartBuild_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_startButton[0]) || (EventDialogControl() == gv_startButton[1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_benchmarkDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_alertMenuDialog, PlayerGroupAll(), false);
    gf_SaveBenchmarkMenuConfiguration(gf_GetCurrentlySelectedMatchupasBankSectionKey());
    gf_SaveAlertMenuConfiguration();
    gf_ResetGameState();
    gf_InitializeBuildConfiguration();
    TimerStart(gv_currentBuildBuildTimer, gv_onehourinseconds, false, c_timeGame);
    gf_StartBenchmarkTimers();
    gf_UnpauseGame();
    CameraPan(1, PlayerStartLocation(1), 0.5, -1, 5.0, true);
    CinematicFade(true, 0.5, c_fadeStyleSquareRoot, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBuild_Init () {
    gt_StartBuild = TriggerCreate("gt_StartBuild_Func");
    TriggerAddEventDialogControl(gt_StartBuild, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Build
//--------------------------------------------------------------------------------------------------
bool gt_ResetBuild_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_paused == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/B010EEE3"));
    CinematicFade(false, 0.5, c_fadeStyleSquareRoot, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(0.5, c_timeGame);
    gf_PauseGame();
    gf_ResetGameState();
    gf_InitializeBuildConfiguration();
    Wait(0.5, c_timeGame);
    gf_UnpauseGame();
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    CameraPan(1, PlayerStartLocation(1), 0.5, -1, 5.0, true);
    CinematicFade(true, 0.5, c_fadeStyleSquareRoot, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetBuild_Init () {
    gt_ResetBuild = TriggerCreate("gt_ResetBuild_Func");
    TriggerAddEventChatMessage(gt_ResetBuild, c_playerAny, "-r", true);
    TriggerAddEventChatMessage(gt_ResetBuild, c_playerAny, "-reset", true);
    TriggerAddEventKeyPressed(gt_ResetBuild, 1, c_keyR, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Stats and Resume Build from Ok Button
//--------------------------------------------------------------------------------------------------
bool gt_CloseStatsandResumeBuildfromOkButton_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_statsOkButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CloseStatsDialogandUnpause();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseStatsandResumeBuildfromOkButton_Init () {
    gt_CloseStatsandResumeBuildfromOkButton = TriggerCreate("gt_CloseStatsandResumeBuildfromOkButton_Func");
    TriggerAddEventDialogControl(gt_CloseStatsandResumeBuildfromOkButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Stats and Resume Build from Hotkey
//--------------------------------------------------------------------------------------------------
bool gt_CloseStatsandResumeBuildfromHotkey_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_statsDialogOpen == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CloseStatsDialogandUnpause();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseStatsandResumeBuildfromHotkey_Init () {
    gt_CloseStatsandResumeBuildfromHotkey = TriggerCreate("gt_CloseStatsandResumeBuildfromHotkey_Func");
    TriggerAddEventKeyPressed(gt_CloseStatsandResumeBuildfromHotkey, 1, c_keyZ, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Help and Resume Build from Ok Button
//--------------------------------------------------------------------------------------------------
bool gt_CloseHelpandResumeBuildfromOkButton_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_helpOkButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CloseHelpDialogandUnpause();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseHelpandResumeBuildfromOkButton_Init () {
    gt_CloseHelpandResumeBuildfromOkButton = TriggerCreate("gt_CloseHelpandResumeBuildfromOkButton_Func");
    TriggerAddEventDialogControl(gt_CloseHelpandResumeBuildfromOkButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Help and Resume Build from Hotkey
//--------------------------------------------------------------------------------------------------
bool gt_CloseHelpandResumeBuildfromHotkey_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_helpDialogOpen == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CloseHelpDialogandUnpause();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseHelpandResumeBuildfromHotkey_Init () {
    gt_CloseHelpandResumeBuildfromHotkey = TriggerCreate("gt_CloseHelpandResumeBuildfromHotkey_Func");
    TriggerAddEventKeyPressed(gt_CloseHelpandResumeBuildfromHotkey, 1, c_keyX, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Build at Max Supply
//--------------------------------------------------------------------------------------------------
bool gt_EndBuildatMaxSupply_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((DialogControlGetSelectedItem(gv_endBuildPulldown, 1) == 1) && (PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) >= 200) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_benchmarkMaxTimeObjective) == c_objectiveStateActive)) {
        ObjectiveSetState(gv_benchmarkMaxTimeObjective, c_objectiveStateCompleted);
        TextExpressionSetToken("Param/Expression/739A89F7", "A", ObjectiveGetName(gv_benchmarkMaxTimeObjective));
        TextExpressionSetToken("Param/Expression/739A89F7", "B", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetElapsed(gv_currentBuildBuildTimer))));
        ObjectiveSetName(gv_benchmarkMaxTimeObjective, TextExpressionAssemble("Param/Expression/739A89F7"));
    }
    else {
    }
    TriggerExecute(gt_OpenPostBuildReportDialog, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndBuildatMaxSupply_Init () {
    gt_EndBuildatMaxSupply = TriggerCreate("gt_EndBuildatMaxSupply_Func");
    TriggerAddEventTimePeriodic(gt_EndBuildatMaxSupply, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Build at Specified Game Time
//--------------------------------------------------------------------------------------------------
bool gt_EndBuildatSpecifiedGameTime_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((DialogControlGetSelectedItem(gv_endBuildPulldown, 1) == 2) && (TimerGetElapsed(gv_currentBuildBuildTimer) >= (60*gv_benchmarkEndBuildatMinutes+gv_benchmarkEndBuildatSeconds)) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_OpenPostBuildReportDialog, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndBuildatSpecifiedGameTime_Init () {
    gt_EndBuildatSpecifiedGameTime = TriggerCreate("gt_EndBuildatSpecifiedGameTime_Func");
    TriggerAddEventTimePeriodic(gt_EndBuildatSpecifiedGameTime, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Build From Hotkey
//--------------------------------------------------------------------------------------------------
bool gt_EndBuildFromHotkey_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PauseGame();
    TriggerExecute(gt_OpenPostBuildReportDialog, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndBuildFromHotkey_Init () {
    gt_EndBuildFromHotkey = TriggerCreate("gt_EndBuildFromHotkey_Func");
    TriggerAddEventKeyPressed(gt_EndBuildFromHotkey, c_playerAny, c_keyNumPad0, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Debug Alerts
//--------------------------------------------------------------------------------------------------
bool gt_ToggleDebugAlerts_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugAlertsEnabled == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/96D9C4FC"));
        gv_debugAlertsEnabled = true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/26B62EAA"));
        gv_debugAlertsEnabled = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleDebugAlerts_Init () {
    gt_ToggleDebugAlerts = TriggerCreate("gt_ToggleDebugAlerts_Func");
    TriggerAddEventChatMessage(gt_ToggleDebugAlerts, c_playerAny, "-debug alerts", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Debug Stats
//--------------------------------------------------------------------------------------------------
bool gt_ToggleDebugStats_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugStatsEnabled == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B26255F6"));
        gv_debugStatsEnabled = true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/68D2F15B"));
        gv_debugStatsEnabled = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleDebugStats_Init () {
    gt_ToggleDebugStats = TriggerCreate("gt_ToggleDebugStats_Func");
    TriggerAddEventChatMessage(gt_ToggleDebugStats, c_playerAny, "-debug stats", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Debug Bank
//--------------------------------------------------------------------------------------------------
bool gt_ToggleDebugBank_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugBankEnabled == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BC3400B2"));
        gv_debugBankEnabled = true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BF2265EA"));
        gv_debugBankEnabled = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleDebugBank_Init () {
    gt_ToggleDebugBank = TriggerCreate("gt_ToggleDebugBank_Func");
    TriggerAddEventChatMessage(gt_ToggleDebugBank, c_playerAny, "-debug bank", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Debug Build Order
//--------------------------------------------------------------------------------------------------
bool gt_ToggleDebugBuildOrder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugBuildOrderEnabled == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6F56ECFB"));
        gv_debugBuildOrderEnabled = true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A4733019"));
        gv_debugBuildOrderEnabled = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleDebugBuildOrder_Init () {
    gt_ToggleDebugBuildOrder = TriggerCreate("gt_ToggleDebugBuildOrder_Func");
    TriggerAddEventChatMessage(gt_ToggleDebugBuildOrder, c_playerAny, "-debug build", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Debug Map Mechanics
//--------------------------------------------------------------------------------------------------
bool gt_ToggleDebugMapMechanics_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugMapMechanicsEnabled == false)) {
        gv_debugMapMechanicsEnabled = true;
    }
    else {
        gv_debugMapMechanicsEnabled = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleDebugMapMechanics_Init () {
    gt_ToggleDebugMapMechanics = TriggerCreate("gt_ToggleDebugMapMechanics_Func");
    TriggerAddEventChatMessage(gt_ToggleDebugMapMechanics, c_playerAny, "-debug map", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mute/Unmute Alerts
//--------------------------------------------------------------------------------------------------
bool gt_MuteUnmuteAlerts_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_muteAlertsEnabled == false)) {
        gv_muteAlertsEnabled = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/053D400F"));
    }
    else {
        gv_muteAlertsEnabled = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5BC648F7"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MuteUnmuteAlerts_Init () {
    gt_MuteUnmuteAlerts = TriggerCreate("gt_MuteUnmuteAlerts_Func");
    TriggerAddEventChatMessage(gt_MuteUnmuteAlerts, c_playerAny, "-a", true);
    TriggerAddEventChatMessage(gt_MuteUnmuteAlerts, c_playerAny, "-alerts", true);
    TriggerAddEventKeyPressed(gt_MuteUnmuteAlerts, 1, c_keyA, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Mineral Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableMineralAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_mineralAboveThresholdAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alertMineralsCheckEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_alertMineralsCheckEnabled, 0, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableMineralAlert_Init () {
    gt_EnableDisableMineralAlert = TriggerCreate("gt_EnableDisableMineralAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableMineralAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Gas Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableGasAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_gasAboveThresholdAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alertGasCheckEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_alertGasCheckEnabled, 1, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableGasAlert_Init () {
    gt_EnableDisableGasAlert = TriggerCreate("gt_EnableDisableGasAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableGasAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Supply Block Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableSupplyBlockAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_supplyBlockImminentAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alertSupplyBlockCheckEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_alertSupplyBlockCheckEnabled, 2, 4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableSupplyBlockAlert_Init () {
    gt_EnableDisableSupplyBlockAlert = TriggerCreate("gt_EnableDisableSupplyBlockAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableSupplyBlockAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Macro Energy Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableMacroEnergyAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_macroEnergyAboveThresholdAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alertMacroEnergyCheckEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_alertMacroEnergyCheckEnabled, 3, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableMacroEnergyAlert_Init () {
    gt_EnableDisableMacroEnergyAlert = TriggerCreate("gt_EnableDisableMacroEnergyAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableMacroEnergyAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Upgrade Gap Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableUpgradeGapAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_upgradeGapAboveThresholdAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alertUpgradeGapCheckEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_alertUpgradeGapCheckEnabled, 4, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableUpgradeGapAlert_Init () {
    gt_EnableDisableUpgradeGapAlert = TriggerCreate("gt_EnableDisableUpgradeGapAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableUpgradeGapAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable/Disable Production Idle Alert
//--------------------------------------------------------------------------------------------------
bool gt_EnableDisableProductionIdleAlert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_productionIdleAboveThresholdAlertCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_productionIdleCheckEnabled = libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1);
    gf_EnableDisableAlertRow(gv_productionIdleCheckEnabled, 5, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDisableProductionIdleAlert_Init () {
    gt_EnableDisableProductionIdleAlert = TriggerCreate("gt_EnableDisableProductionIdleAlert_Func");
    TriggerAddEventDialogControl(gt_EnableDisableProductionIdleAlert, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Benchmark Menu
//--------------------------------------------------------------------------------------------------
bool gt_SelectBenchmarkMenu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_benchmarksMenuButton[0]) || (EventDialogControl() == gv_benchmarksMenuButton[1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SelectBenchmarkMenu();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectBenchmarkMenu_Init () {
    gt_SelectBenchmarkMenu = TriggerCreate("gt_SelectBenchmarkMenu_Func");
    TriggerAddEventDialogControl(gt_SelectBenchmarkMenu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Main Menu
//--------------------------------------------------------------------------------------------------
bool gt_OpenMainMenu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_OpenBenchmarkMainDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenMainMenu_Init () {
    gt_OpenMainMenu = TriggerCreate("gt_OpenMainMenu_Func");
    TriggerAddEventChatMessage(gt_OpenMainMenu, c_playerAny, "-m", true);
    TriggerAddEventChatMessage(gt_OpenMainMenu, c_playerAny, "-menu", true);
    TriggerAddEventKeyPressed(gt_OpenMainMenu, 1, c_keyC, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Alert Menu
//--------------------------------------------------------------------------------------------------
bool gt_SelectAlertMenu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_alertMenuButton[0]) || (EventDialogControl() == gv_alertMenuButton[1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SelectAlertMenu();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectAlertMenu_Init () {
    gt_SelectAlertMenu = TriggerCreate("gt_SelectAlertMenu_Func");
    TriggerAddEventDialogControl(gt_SelectAlertMenu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Matchup
//--------------------------------------------------------------------------------------------------
bool gt_SelectMatchup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_matchupSelectionButtons[0]) || (EventDialogControl() == gv_matchupSelectionButtons[1]) || (EventDialogControl() == gv_matchupSelectionButtons[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupAll());
    gf_SaveBenchmarkMenuConfiguration(gf_GetCurrentlySelectedMatchupasBankSectionKey());
    gf_UpdateCurrentlySelectedMatchup();
    gf_LoadBenchmarkMenuConfiguration(gf_GetCurrentlySelectedMatchupasBankSectionKey());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectMatchup_Init () {
    gt_SelectMatchup = TriggerCreate("gt_SelectMatchup_Func");
    TriggerAddEventDialogControl(gt_SelectMatchup, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display End Build Game Time Edits
//--------------------------------------------------------------------------------------------------
bool gt_DisplayEndBuildGameTimeEdits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_endBuildPulldown) && (DialogControlGetSelectedItem(EventDialogControl(), 1) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_endBuildMinutesEditBox, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_endBuildMinutesLabel, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_endBuildSecondsEditBox, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_endBuildSecondsLabel, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplayEndBuildGameTimeEdits_Init () {
    gt_DisplayEndBuildGameTimeEdits = TriggerCreate("gt_DisplayEndBuildGameTimeEdits_Func");
    TriggerAddEventDialogControl(gt_DisplayEndBuildGameTimeEdits, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide End Build Game Time Edits
//--------------------------------------------------------------------------------------------------
bool gt_HideEndBuildGameTimeEdits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_endBuildPulldown) && (DialogControlGetSelectedItem(EventDialogControl(), 1) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_endBuildMinutesEditBox, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_endBuildMinutesLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_endBuildSecondsEditBox, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_endBuildSecondsLabel, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HideEndBuildGameTimeEdits_Init () {
    gt_HideEndBuildGameTimeEdits = TriggerCreate("gt_HideEndBuildGameTimeEdits_Func");
    TriggerAddEventDialogControl(gt_HideEndBuildGameTimeEdits, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Practice Against Saved Build
//--------------------------------------------------------------------------------------------------
bool gt_TogglePracticeAgainstSavedBuild_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_practiceAgainstSavedBuildOrderCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_EvaluateAndDisableEnableBuildHintsOptions();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TogglePracticeAgainstSavedBuild_Init () {
    gt_TogglePracticeAgainstSavedBuild = TriggerCreate("gt_TogglePracticeAgainstSavedBuild_Func");
    TriggerAddEventDialogControl(gt_TogglePracticeAgainstSavedBuild, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Help Dialog
//--------------------------------------------------------------------------------------------------
bool gt_OpenHelpDialog_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_helpDialogOpen == false) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_PauseGame();
    DialogSetVisible(gv_statsDialog, PlayerGroupAll(), false);
    gv_statsDialogOpen = false;
    DialogSetVisible(gv_benchmarkDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_helpDialog, PlayerGroupAll(), true);
    gv_helpDialogOpen = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenHelpDialog_Init () {
    gt_OpenHelpDialog = TriggerCreate("gt_OpenHelpDialog_Func");
    TriggerAddEventChatMessage(gt_OpenHelpDialog, c_playerAny, "-h", true);
    TriggerAddEventChatMessage(gt_OpenHelpDialog, c_playerAny, "-help", true);
    TriggerAddEventKeyPressed(gt_OpenHelpDialog, 1, c_keyX, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Post-Build Report Dialog
//--------------------------------------------------------------------------------------------------
bool gt_OpenPostBuildReportDialog_Func (bool testConds, bool runActions) {
    unitgroup auto8DF230F2_g;
    int auto8DF230F2_u;

    // Variable Declarations
    unit lv_currentUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    gf_PauseGame();
    gf_UpdatePostBuildReportDialogValues(true);
    DialogSetVisible(gv_postBuildReportDialog, PlayerGroupAll(), true);
    gf_UpdatePostBuildMatchupText();
    libNtve_gf_SwooshCamera(1, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 0.0), (CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)+10), PlayerStartLocation(1), 10.0);
    CameraPan(1, PlayerStartLocation(1), 10.0, -1, 10.0, true);
    auto8DF230F2_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto8DF230F2_u = 1;
    for ( ; auto8DF230F2_u <= UnitGroupCount(auto8DF230F2_g, c_unitCountAll) ; auto8DF230F2_u += BoolToInt(lv_currentUnit == UnitGroupUnit(auto8DF230F2_g, auto8DF230F2_u)) ) {
        lv_currentUnit = UnitGroupUnit(auto8DF230F2_g, auto8DF230F2_u);
        Wait(0.2, c_timeGame);
        UnitKill(lv_currentUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenPostBuildReportDialog_Init () {
    gt_OpenPostBuildReportDialog = TriggerCreate("gt_OpenPostBuildReportDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save Benchmark Build Stats
//--------------------------------------------------------------------------------------------------
bool gt_SaveBenchmarkBuildStats_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_postBuildReportSaveBuildButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SaveCurrentStatsasNewBenchmark();
    gf_UpdatePostBuildReportDialogValues(false);
    gf_SaveBenchmarkBuildOrder();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SaveBenchmarkBuildStats_Init () {
    gt_SaveBenchmarkBuildStats = TriggerCreate("gt_SaveBenchmarkBuildStats_Func");
    TriggerAddEventDialogControl(gt_SaveBenchmarkBuildStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Benchmark Build Stats
//--------------------------------------------------------------------------------------------------
bool gt_ResetBenchmarkBuildStats_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_postBuildReportResetBuildButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetBenchmarkBuildStatistics();
    gf_UpdatePostBuildReportDialogValues(false);
    gf_ClearBenchmarkBuildOrder();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetBenchmarkBuildStats_Init () {
    gt_ResetBenchmarkBuildStats = TriggerCreate("gt_ResetBenchmarkBuildStats_Func");
    TriggerAddEventDialogControl(gt_ResetBenchmarkBuildStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return to Main Menu from Report
//--------------------------------------------------------------------------------------------------
bool gt_ReturntoMainMenufromReport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_backToMenuButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_OpenBenchmarkMainDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturntoMainMenufromReport_Init () {
    gt_ReturntoMainMenufromReport = TriggerCreate("gt_ReturntoMainMenufromReport_Func");
    TriggerAddEventDialogControl(gt_ReturntoMainMenufromReport, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Stats Dialog
//--------------------------------------------------------------------------------------------------
bool gt_OpenStatsDialog_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_statsDialogOpen == false) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_PauseGame();
    DialogSetVisible(gv_benchmarkDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_helpDialog, PlayerGroupAll(), false);
    gv_helpDialogOpen = false;
    gf_RefreshStatsDialog();
    DialogSetVisible(gv_statsDialog, PlayerGroupAll(), true);
    gv_statsDialogOpen = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenStatsDialog_Init () {
    gt_OpenStatsDialog = TriggerCreate("gt_OpenStatsDialog_Func");
    TriggerAddEventChatMessage(gt_OpenStatsDialog, c_playerAny, "-s", true);
    TriggerAddEventChatMessage(gt_OpenStatsDialog, c_playerAny, "-stats", true);
    TriggerAddEventKeyPressed(gt_OpenStatsDialog, 1, c_keyZ, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetSpeedValue(c_gameSpeedFaster);
    CameraSave(1);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_InitializeGameDefaults();
    gf_InitializeDialogDefaults();
    gf_InitializeBankDefaults();
    gf_InitializeBank();
    gf_InitializeMapResourcesUnitGroup();
    MeleeInitUnits();
    gf_PauseGame();
    gf_InitializeBenchmarkDialog();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gf_CreateAlertMenuDialog();
    gf_CreateStatsDialog();
    gf_CreateHelpDialog();
    gf_InitializePostBuildReportDialog();
    gf_CreateScreenButtons();
    TimerWindowCreate(gv_currentBuildBuildTimer, StringExternal("Param/Value/EAED3202"), true, true);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorTopRight, 0, 0);
    gf_LoadBenchmarkMenuConfiguration(gf_GetCurrentlySelectedMatchupasBankSectionKey());
    gf_LoadAlertMenuConfiguration();
    gf_CreateHiddenBenchmarkSupplyObjectives();
    gv_debugMapMechanicsEnabled = false;
    gv_debugBuildOrderEnabled = false;
    gv_debugAlertsEnabled = false;
    gv_debugBankEnabled = false;
    gv_debugStatsEnabled = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInitialization_Init () {
    gt_MapInitialization = TriggerCreate("gt_MapInitialization_Func");
    TriggerAddEventMapInit(gt_MapInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Game
//--------------------------------------------------------------------------------------------------
bool gt_EndGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    GameOver(1, c_gameOverVictory, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndGame_Init () {
    gt_EndGame = TriggerCreate("gt_EndGame_Func");
    TriggerAddEventChatMessage(gt_EndGame, c_playerAny, "gg", false);
    TriggerAddEventKeyPressed(gt_EndGame, 1, c_keyW, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Benchmark 1 Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_Benchmark1TimerExpires_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) > gv_benchmarkSupplyValues[0])) {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[0], c_objectiveStateCompleted);
    }
    else {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[0], c_objectiveStateFailed);
    }
    TextExpressionSetToken("Param/Expression/B53438FA", "A", ObjectiveGetName(gv_benchmarkSupplyObjectives[0]));
    TextExpressionSetToken("Param/Expression/B53438FA", "B", IntToText(PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)));
    ObjectiveSetName(gv_benchmarkSupplyObjectives[0], TextExpressionAssemble("Param/Expression/B53438FA"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Benchmark1TimerExpires_Init () {
    gt_Benchmark1TimerExpires = TriggerCreate("gt_Benchmark1TimerExpires_Func");
    TriggerAddEventTimer(gt_Benchmark1TimerExpires, gv_benchmark1Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Benchmark 2 Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_Benchmark2TimerExpires_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) > gv_benchmarkSupplyValues[1])) {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[1], c_objectiveStateCompleted);
    }
    else {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[1], c_objectiveStateFailed);
    }
    TextExpressionSetToken("Param/Expression/E571E892", "A", ObjectiveGetName(gv_benchmarkSupplyObjectives[1]));
    TextExpressionSetToken("Param/Expression/E571E892", "B", IntToText(PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)));
    ObjectiveSetName(gv_benchmarkSupplyObjectives[1], TextExpressionAssemble("Param/Expression/E571E892"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Benchmark2TimerExpires_Init () {
    gt_Benchmark2TimerExpires = TriggerCreate("gt_Benchmark2TimerExpires_Func");
    TriggerAddEventTimer(gt_Benchmark2TimerExpires, gv_benchmark2Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Benchmark 3 Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_Benchmark3TimerExpires_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) > gv_benchmarkSupplyValues[2])) {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[2], c_objectiveStateCompleted);
    }
    else {
        ObjectiveSetState(gv_benchmarkSupplyObjectives[2], c_objectiveStateFailed);
    }
    TextExpressionSetToken("Param/Expression/D3C9632E", "A", ObjectiveGetName(gv_benchmarkSupplyObjectives[2]));
    TextExpressionSetToken("Param/Expression/D3C9632E", "B", IntToText(PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)));
    ObjectiveSetName(gv_benchmarkSupplyObjectives[2], TextExpressionAssemble("Param/Expression/D3C9632E"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Benchmark3TimerExpires_Init () {
    gt_Benchmark3TimerExpires = TriggerCreate("gt_Benchmark3TimerExpires_Func");
    TriggerAddEventTimer(gt_Benchmark3TimerExpires, gv_benchmark3Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MaxTime Timer Elapsed
//--------------------------------------------------------------------------------------------------
bool gt_MaxTimeTimerElapsed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) == 200)) {
        ObjectiveSetState(gv_benchmarkMaxTimeObjective, c_objectiveStateCompleted);
    }
    else {
        ObjectiveSetState(gv_benchmarkMaxTimeObjective, c_objectiveStateFailed);
    }
    TextExpressionSetToken("Param/Expression/A9D9AADE", "A", ObjectiveGetName(gv_benchmarkMaxTimeObjective));
    TextExpressionSetToken("Param/Expression/A9D9AADE", "B", IntToText(PlayerGetPropertyInt(1, c_playerPropSuppliesUsed)));
    ObjectiveSetName(gv_benchmarkMaxTimeObjective, TextExpressionAssemble("Param/Expression/A9D9AADE"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MaxTimeTimerElapsed_Init () {
    gt_MaxTimeTimerElapsed = TriggerCreate("gt_MaxTimeTimerElapsed_Func");
    TriggerAddEventTimer(gt_MaxTimeTimerElapsed, gv_benchmarkMaxTimeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Every Second - Check for Build Hints
//--------------------------------------------------------------------------------------------------
bool gt_EverySecondCheckforBuildHints_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_message;
    fixed lv_timebeforenextstep;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_displayBuildHints == true) && (gv_paused == false) && (TimerGetRemaining(gv_displayBuildHintCooldownTimer) == 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timebeforenextstep = (gv_benchmarkBuildOrderSteps[gv_buildHintCursor].lv_elapsedSeconds-TimerGetElapsed(gv_currentBuildBuildTimer));
    if (((lv_timebeforenextstep <= gv_buildHintTimeThreshold) && (lv_timebeforenextstep >= 0.0))) {
        TimerStart(gv_displayBuildHintCooldownTimer, 6.0, false, c_timeGame);
        TextExpressionSetToken("Param/Expression/8534C2D6", "A", gf_GetBenchmarkBuildOrderStepText(gv_buildHintCursor));
        lv_message = TextExpressionAssemble("Param/Expression/8534C2D6");
        gv_buildHintCursor += 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lv_message);
        Wait(0.5, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        Wait(0.5, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lv_message);
        Wait(0.5, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        Wait(0.5, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lv_message);
        Wait(4.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EverySecondCheckforBuildHints_Init () {
    gt_EverySecondCheckforBuildHints = TriggerCreate("gt_EverySecondCheckforBuildHints_Func");
    TriggerAddEventTimePeriodic(gt_EverySecondCheckforBuildHints, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: On Upgrade Start - Update Current Build Order
//--------------------------------------------------------------------------------------------------
bool gt_OnUpgradeStartUpdateCurrentBuildOrder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gf_IsUpgradeTypeValidForBuildOrder(libNtve_gf_TriggeringProgressUpgrade()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/1A81B682", "A", gf_GetFormattedUpgradeNameasText(libNtve_gf_TriggeringProgressUpgrade()));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/1A81B682"));
    if (((gv_currentBuildOrderStepCursor) < gv_maxCurrentBuildOrderStepsTracked)) {
        gf_AddUpgradeBuildOrderStep(libNtve_gf_TriggeringProgressUpgrade());
        gf_EvaluateUpgradeForBenchmarkBuildOrderStep(libNtve_gf_TriggeringProgressUpgrade());
        gv_currentBuildOrderStepCursor += 1;
    }
    else {
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/4D60D22A"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnUpgradeStartUpdateCurrentBuildOrder_Init () {
    gt_OnUpgradeStartUpdateCurrentBuildOrder = TriggerCreate("gt_OnUpgradeStartUpdateCurrentBuildOrder_Func");
    TriggerAddEventUnitResearchProgress(gt_OnUpgradeStartUpdateCurrentBuildOrder, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: On Unit Start - Update Current Build Order
//--------------------------------------------------------------------------------------------------
bool gt_OnUnitStartUpdateCurrentBuildOrder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gf_IsUnitTypeValidForBuildOrder(libNtve_gf_TriggeringProgressUnitType()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/DE9D0EE9", "A", UnitTypeGetName(libNtve_gf_TriggeringProgressUnitType()));
    TextExpressionSetToken("Param/Expression/DE9D0EE9", "B", IntToText(gv_currentBuildOrderStepCursor));
    TextExpressionSetToken("Param/Expression/DE9D0EE9", "C", IntToText(gv_benchmarkBuildOrderStepCursor));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/DE9D0EE9"));
    if ((((TimerGetElapsed(gv_currentBuildBuildTimer)-gv_lastCreatedUnitTimestamp) <= gv_multipleUnitTimeCutoffThreshold) && (gf_IsUnitTypeSameasPreviousUnitType(libNtve_gf_TriggeringProgressUnitType()) == true))) {
        TextExpressionSetToken("Param/Expression/5A4EE543", "A", UnitTypeGetName(libNtve_gf_TriggeringProgressUnitType()));
        TextExpressionSetToken("Param/Expression/5A4EE543", "B", UnitTypeGetName(gv_lastCreatedBuildOrderUnitType));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/5A4EE543"));
        gv_currentBuildOrderSteps[(gv_currentBuildOrderStepCursor-1)].lv_amount += 1;
        TextExpressionSetToken("Param/Expression/9057FDA6", "A", gf_GetCurrentBuildOrderStepText((gv_currentBuildOrderStepCursor-1)));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/9057FDA6"));
        if ((gv_practiceAgainstBenchmarkBuildOrder == true)) {
            gf_EvaluateUnitTypeandAmountForBenchmarkBuildOrderStep(libNtve_gf_TriggeringProgressUnitType(), gv_currentBuildOrderSteps[(gv_currentBuildOrderStepCursor - 1)].lv_amount);
        }
        else {
        }
    }
    else {
        TextExpressionSetToken("Param/Expression/EF816D38", "A", UnitTypeGetName(libNtve_gf_TriggeringProgressUnitType()));
        TextExpressionSetToken("Param/Expression/EF816D38", "B", UnitTypeGetName(gv_lastCreatedBuildOrderUnitType));
        gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/EF816D38"));
        if (((gv_currentBuildOrderStepCursor) < gv_maxCurrentBuildOrderStepsTracked)) {
            gf_AddUnitBuildOrderStep(libNtve_gf_TriggeringProgressUnitType());
            if (((gv_totalNumBenchmarkBuildOrderSteps > 0) && (gv_practiceAgainstBenchmarkBuildOrder == true) && ((gv_currentBuildOrderStepCursor) <= (gv_totalNumBenchmarkBuildOrderSteps+gv_numCorrectedBenchmarkBuildOrderSteps)))) {
                gf_EvaluateUnitTypeandAmountForBenchmarkBuildOrderStep(libNtve_gf_TriggeringProgressUnitType(), gv_currentBuildOrderSteps[gv_currentBuildOrderStepCursor].lv_amount);
            }
            else {
                TextExpressionSetToken("Param/Expression/8EF5124A", "B", IntToText(gv_currentBuildOrderStepCursor));
                TextExpressionSetToken("Param/Expression/8EF5124A", "A", IntToText((gv_totalNumBenchmarkBuildOrderSteps+gv_numCorrectedBenchmarkBuildOrderSteps)));
                gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/8EF5124A"));
            }
        }
        else {
            gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/FE737C09"));
        }
        gv_currentBuildOrderStepCursor += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnUnitStartUpdateCurrentBuildOrder_Init () {
    gt_OnUnitStartUpdateCurrentBuildOrder = TriggerCreate("gt_OnUnitStartUpdateCurrentBuildOrder_Func");
    TriggerAddEventUnitTrainProgress(gt_OnUnitStartUpdateCurrentBuildOrder, null, c_unitProgressStageStart);
    TriggerAddEventUnitConstructProgress(gt_OnUnitStartUpdateCurrentBuildOrder, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: On Unit Cancel - Update Current Build Order
//--------------------------------------------------------------------------------------------------
bool gt_OnUnitCancelUpdateCurrentBuildOrder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == gv_lastCreatedBuildOrderUnitType))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnUnitCancelUpdateCurrentBuildOrder_Init () {
    gt_OnUnitCancelUpdateCurrentBuildOrder = TriggerCreate("gt_OnUnitCancelUpdateCurrentBuildOrder_Func");
    TriggerAddEventUnitTrainProgress(gt_OnUnitCancelUpdateCurrentBuildOrder, null, c_unitProgressStageCancel);
    TriggerAddEventUnitConstructProgress(gt_OnUnitCancelUpdateCurrentBuildOrder, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: On Multiple Unit Failure Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_OnMultipleUnitFailureTimerExpires_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_practiceAgainstBenchmarkBuildOrder == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/721980B5", "A", UnitTypeGetName(gv_lastCreatedBuildOrderUnitType));
    TextExpressionSetToken("Param/Expression/721980B5", "B", IntToText(gv_benchmarkBuildOrderStepCursor));
    gf_LogTextMessage(gv_debugBuildOrderEnabled, TextExpressionAssemble("Param/Expression/721980B5"));
    gf_FailCurrentBuildStepAndCycle();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnMultipleUnitFailureTimerExpires_Init () {
    gt_OnMultipleUnitFailureTimerExpires = TriggerCreate("gt_OnMultipleUnitFailureTimerExpires_Func");
    TriggerAddEventTimer(gt_OnMultipleUnitFailureTimerExpires, gv_multipleUnitFailureTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Gas Taken
//--------------------------------------------------------------------------------------------------
bool gt_UpdateGasTaken_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Assimilator") || (UnitGetType(EventUnit()) == "Extractor") || (UnitGetType(EventUnit()) == "Refinery")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentBuildIsGasTaken = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateGasTaken_Init () {
    gt_UpdateGasTaken = TriggerCreate("gt_UpdateGasTaken_Func");
    TriggerAddEventUnitConstructProgress(gt_UpdateGasTaken, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Time Supply Blocked
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTimeSupplyBlocked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((PlayerScoreValueGetAsInt(1, "FoodUsed") == PlayerScoreValueGetAsInt(1, "FoodMade")) && (gv_paused == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_timeSupplyBlockedThisBuild += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateTimeSupplyBlocked_Init () {
    gt_UpdateTimeSupplyBlocked = TriggerCreate("gt_UpdateTimeSupplyBlocked_Func");
    TriggerAddEventTimePeriodic(gt_UpdateTimeSupplyBlocked, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Minerals Collected This Build
//--------------------------------------------------------------------------------------------------
bool gt_UpdateMineralsCollectedThisBuild_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayerPropertyChangeInt() > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_totalMineralsCollectedCurrentBuild += EventPlayerPropertyChangeInt();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateMineralsCollectedThisBuild_Init () {
    gt_UpdateMineralsCollectedThisBuild = TriggerCreate("gt_UpdateMineralsCollectedThisBuild_Func");
    TriggerAddEventPlayerPropChange(gt_UpdateMineralsCollectedThisBuild, 1, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Gas Collected This Build
//--------------------------------------------------------------------------------------------------
bool gt_UpdateGasCollectedThisBuild_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayerPropertyChangeInt() > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_totalGasCollectedCurrentBuild += EventPlayerPropertyChangeInt();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateGasCollectedThisBuild_Init () {
    gt_UpdateGasCollectedThisBuild = TriggerCreate("gt_UpdateGasCollectedThisBuild_Func");
    TriggerAddEventPlayerPropChange(gt_UpdateGasCollectedThisBuild, 1, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Cumulative APM
//--------------------------------------------------------------------------------------------------
bool gt_UpdateCumulativeAPM_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_paused == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_cumulativeAPM += PlayerScoreValueGetAsInt(1, "APM");
    gv_totalAPMSamplesThisBuild += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateCumulativeAPM_Init () {
    gt_UpdateCumulativeAPM = TriggerCreate("gt_UpdateCumulativeAPM_Func");
    TriggerAddEventTimePeriodic(gt_UpdateCumulativeAPM, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Total Workers
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTotalWorkers_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnitCreatedUnit()) == 1) && ((UnitGetType(EventUnitCreatedUnit()) == "Drone") || (UnitGetType(EventUnitCreatedUnit()) == "Probe") || (UnitGetType(EventUnitCreatedUnit()) == "SCV"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_workersCreatedCurrentBuild += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateTotalWorkers_Init () {
    gt_UpdateTotalWorkers = TriggerCreate("gt_UpdateTotalWorkers_Func");
    TriggerAddEventUnitCreated(gt_UpdateTotalWorkers, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Num Upgrades Researched
//--------------------------------------------------------------------------------------------------
bool gt_UpdateNumUpgradesResearched_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_totalNumberofUpgradesResearchedCurrentBuild += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateNumUpgradesResearched_Init () {
    gt_UpdateNumUpgradesResearched = TriggerCreate("gt_UpdateNumUpgradesResearched_Func");
    TriggerAddEventUnitResearchProgress(gt_UpdateNumUpgradesResearched, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Resource Collection Rate
//--------------------------------------------------------------------------------------------------
bool gt_UpdateResourceCollectionRate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_paused == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_cumulativeAverageMineralResourceCollectionRateCurrentBuild += PlayerScoreValueGetAsFixed(1, "MineralsCollectionRate");
    gv_cumulativeAverageGasResourceCollectionRateCurrentBuild += PlayerScoreValueGetAsFixed(1, "VespeneCollectionRate");
    gv_resourceCollectionRateSamplesCurrentBuild += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateResourceCollectionRate_Init () {
    gt_UpdateResourceCollectionRate = TriggerCreate("gt_UpdateResourceCollectionRate_Func");
    TriggerAddEventTimePeriodic(gt_UpdateResourceCollectionRate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Average Unspent Resources
//--------------------------------------------------------------------------------------------------
bool gt_UpdateAverageUnspentResources_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_paused == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_cumulativeAverageUnspentMineralsCurrentBuild += PlayerScoreValueGetAsInt(1, "MineralsFloatAverage");
    gv_cumulativeAverageUnspentGasCurrentBuild += PlayerScoreValueGetAsInt(1, "VespeneFloatAverage");
    gv_averageUnspentResourceSamples += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateAverageUnspentResources_Init () {
    gt_UpdateAverageUnspentResources = TriggerCreate("gt_UpdateAverageUnspentResources_Func");
    TriggerAddEventTimePeriodic(gt_UpdateAverageUnspentResources, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord InProgress Fix
//--------------------------------------------------------------------------------------------------
bool gt_OverlordInProgressFix_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_morphingOverlords, EventUnit());
    gv_numMorphingOverlords += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordInProgressFix_Init () {
    gt_OverlordInProgressFix = TriggerCreate("gt_OverlordInProgressFix_Func");
    TriggerAddEventUnitAbility(gt_OverlordInProgressFix, null, AbilityCommand("LarvaTrain", 2), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Completed or Cancelled Fix
//--------------------------------------------------------------------------------------------------
bool gt_OverlordCompletedorCancelledFix_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_numMorphingOverlords -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordCompletedorCancelledFix_Init () {
    gt_OverlordCompletedorCancelledFix = TriggerCreate("gt_OverlordCompletedorCancelledFix_Func");
    TriggerAddEventUnitAbility(gt_OverlordCompletedorCancelledFix, null, AbilityCommand("LarvaTrain", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_OverlordCompletedorCancelledFix, null, AbilityCommand("LarvaTrain", 2), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Larva Spawn Fix
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryLarvaSpawnFix_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((GameGetMissionTime() > 1.0) && (UnitGroupCount(UnitGroup(null, 1, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0), c_unitCountAll) == 1) && (UnitGetType(EventUnit()) == "Hatchery")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "SpawnMutantLarvaApplySpawnBehavior3", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryLarvaSpawnFix_Init () {
    gt_HatcheryLarvaSpawnFix = TriggerCreate("gt_HatcheryLarvaSpawnFix_Func");
    TriggerAddEventUnitRegion(gt_HatcheryLarvaSpawnFix, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MineralsAboveThreshold_Init();
    gt_GasAboveThreshold_Init();
    gt_SupplyBlockImminent_Init();
    gt_RaceMacroEnergyAboveThreshold_Init();
    gt_UpgradeGapAboveThresholdUpgradeCompletesAddRestartTimer_Init();
    gt_UpgradeGapAboveThresholdNewUpgradeStartsStopActiveTimers_Init();
    gt_UpgradeGapAboveThresholdTimerExpiresFireAlert_Init();
    gt_ProductionIdleAboveThresholdProductionFinishesAddRestartTimer_Init();
    gt_ProductionIdleAboveThresholdNewProductionBeginsStopActiveTimers_Init();
    gt_ProductionIdleAboveThresholdTimerExpiresFireAlert_Init();
    gt_StartBuild_Init();
    gt_ResetBuild_Init();
    gt_CloseStatsandResumeBuildfromOkButton_Init();
    gt_CloseStatsandResumeBuildfromHotkey_Init();
    gt_CloseHelpandResumeBuildfromOkButton_Init();
    gt_CloseHelpandResumeBuildfromHotkey_Init();
    gt_EndBuildatMaxSupply_Init();
    gt_EndBuildatSpecifiedGameTime_Init();
    gt_EndBuildFromHotkey_Init();
    gt_ToggleDebugAlerts_Init();
    gt_ToggleDebugStats_Init();
    gt_ToggleDebugBank_Init();
    gt_ToggleDebugBuildOrder_Init();
    gt_ToggleDebugMapMechanics_Init();
    gt_MuteUnmuteAlerts_Init();
    gt_EnableDisableMineralAlert_Init();
    gt_EnableDisableGasAlert_Init();
    gt_EnableDisableSupplyBlockAlert_Init();
    gt_EnableDisableMacroEnergyAlert_Init();
    gt_EnableDisableUpgradeGapAlert_Init();
    gt_EnableDisableProductionIdleAlert_Init();
    gt_SelectBenchmarkMenu_Init();
    gt_OpenMainMenu_Init();
    gt_SelectAlertMenu_Init();
    gt_SelectMatchup_Init();
    gt_DisplayEndBuildGameTimeEdits_Init();
    gt_HideEndBuildGameTimeEdits_Init();
    gt_TogglePracticeAgainstSavedBuild_Init();
    gt_OpenHelpDialog_Init();
    gt_OpenPostBuildReportDialog_Init();
    gt_SaveBenchmarkBuildStats_Init();
    gt_ResetBenchmarkBuildStats_Init();
    gt_ReturntoMainMenufromReport_Init();
    gt_OpenStatsDialog_Init();
    gt_MapInitialization_Init();
    gt_EndGame_Init();
    gt_Benchmark1TimerExpires_Init();
    gt_Benchmark2TimerExpires_Init();
    gt_Benchmark3TimerExpires_Init();
    gt_MaxTimeTimerElapsed_Init();
    gt_EverySecondCheckforBuildHints_Init();
    gt_OnUpgradeStartUpdateCurrentBuildOrder_Init();
    gt_OnUnitStartUpdateCurrentBuildOrder_Init();
    gt_OnUnitCancelUpdateCurrentBuildOrder_Init();
    gt_OnMultipleUnitFailureTimerExpires_Init();
    gt_UpdateGasTaken_Init();
    gt_UpdateTimeSupplyBlocked_Init();
    gt_UpdateMineralsCollectedThisBuild_Init();
    gt_UpdateGasCollectedThisBuild_Init();
    gt_UpdateCumulativeAPM_Init();
    gt_UpdateTotalWorkers_Init();
    gt_UpdateNumUpgradesResearched_Init();
    gt_UpdateResourceCollectionRate_Init();
    gt_UpdateAverageUnspentResources_Init();
    gt_OverlordInProgressFix_Init();
    gt_OverlordCompletedorCancelledFix_Init();
    gt_HatcheryLarvaSpawnFix_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
